(()=>{"use strict";var e={282:(e,t,n)=>{n.d(t,{A:()=>s});var o=n(354),i=n.n(o),r=n(314),l=n.n(r)()(i());l.push([e.id,'/** cursor style */\n[contenteditable="true"] {\n    cursor: text !important;\n    white-space: pre-wrap !important;\n}\n\n\n\n/** CSS reset */\n\n.button-reset {\n    border: none;\n    margin: 0;\n    padding: 0;\n    width: auto;\n    overflow: visible;\n    background: transparent;\n    color: inherit;\n    font: inherit;\n    line-height: normal;\n    -webkit-font-smoothing: inherit;\n    -moz-osx-font-smoothing: inherit;\n    -webkit-appearance: none;\n}\n\n\n\n/** add block */\n.add-block {\n    margin: 0;\n    padding: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid #000;\n    background-color: white;\n    transition: all 0.3s ease;\n    box-sizing: border-box;\n    margin-left: 1.3rem;\n}\n\n.add-block-wrapper {\n    width: 100%;\n    height: 3.125rem;\n}\n\n.add-block-wrapper:hover .add-block {\n    display: flex;\n}\n\n/** and add block */\n\n\n\n/** List  **/\n.list {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n\n}\n\n.list-item-checkable input {\n    margin-top: 0.5rem;\n}\n\n.list li div {\n    display: inline-block !important;\n    min-width: 100px;\n    line-height: 1;\n}\n\nol.johannes-content-element,\nul.johannes-content-element {\n    padding-left: 1rem !important;\n}\n\n.johannes-content-element li>button {\n    /* display: none; */\n    display: none;\n    position: absolute;\n    margin-left: 10px;\n    top: 0;\n\n    flex-direction: row;\n    align-items: start;\n    justify-content: start;\n\n}\n\n.johannes-content-element li {\n    position: relative;\n\n}\n\n.johannes-content-element li::before {\n    margin-left: 0.3125rem;\n}\n\n.johannes-content-element li:hover>button {\n    /* display: inline-block; */\n    display: inline-flex;\n\n}\n\np.johannes-content-element {\n    display: inline-block;\n    line-height: 1;\n    margin: 0;\n    padding: 0;\n}\n\n.johannes-content-element .checkbox-list {\n    list-style-type: none;\n    padding-left: 0 !important;\n}\n\n\n.johannes-content-element .checkbox-list li {\n    display: flex;\n    flex-direction: row;\n    justify-content: left;\n}\n\n\n.johannes-content-element ul.checkbox-list input[type="checkbox"]:checked+span {\n    text-decoration: line-through;\n}\n\n/* ul.johannes-content-element:not(.checkbox-list),\nol.johannes-content-element:not(.checkbox-list) {\n    padding-left: 1.5rem !important;\n} */\n\n/** Add line through text decoration to checked checkboxes text div */\n.block input[type="checkbox"]:checked+div {\n    text-decoration: line-through;\n}\n\n/** Remove the default list style and replace by another that works with display flex */\n.block ol,\n.block ul {\n    list-style: none;\n}\n\n.block ul .list-item,\n.block ol .list-item {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n\n}\n\n.block ol li {\n    counter-increment: item;\n}\n\n.block ol li::before {\n    content: counter(item) ".";\n    margin-right: 0.3125rem;\n    display: flex;\n    /* width: 18px; */\n    justify-content: flex-start;\n}\n\n.block ul li:not(.no-list-style)::before {\n    content: "•";\n    margin-right: 0.3125rem;\n    display: flex;\n    /* width: 18px; */\n}\n\n.list-item-checkable input {\n    /* width: 18px; */\n    margin-right: 0.3125rem;\n}\n\n\n/** and list **/\n\n\n\n.drag-handler {\n    color: #84888d;\n    visibility: hidden;\n    cursor: grab;\n    align-self: start;\n    padding-top: 0.33rem;\n    position: absolute;\n}\n\n.drag-handler-wrapper {\n    position: relative;\n    height: 0;\n    width: 0;\n}\n\n\n\n.drag-handler svg {\n    /* background-color: red; */\n}\n\n.drag-handler svg use {\n    /* background-color: blue; */\n}\n\n.drag-handler:active {\n    cursor: grabbing;\n}\n\n.block {\n    display: flex;\n    flex-direction: row;\n    margin-bottom: 1rem;\n    position: relative;\n    max-width: 100%;\n}\n\n.block>*:not(.editor-only) {\n    padding-left: 1.25rem !important;\n}\n\n.block:hover .drag-handler {\n    visibility: visible;\n    vertical-align: top;\n    justify-content: start;\n    transition: visibility 0.2s;\n}\n\n/* .block:hover .block-toolbar {\n    visibility: visible;\n} */\n\n.drop-line {\n    height: 1rem;\n    background-color: #84888d;\n    width: 100%;\n}\n\n\n.title h1 {\n    margin-left: 1.3rem;\n    line-height: 3rem;\n}\n\n\n[contenteditable="true"]:empty:focus {\n    content: attr(data-placeholder);\n    color: #84888d;\n    pointer-events: none;\n}\n\nh1[data-placeholder]:empty:before {\n    content: attr(data-placeholder);\n    color: #84888d !important;\n    display: block;\n}\n\nh1[data-placeholder]:focus:before {}\n\n\n*[contenteditable="true"]:not(h1):empty:before {\n    content: attr(data-placeholder);\n    color: #84888acd;\n    display: none;\n}\n\n*[contenteditable="true"]:not(h1):empty:hover:before {\n    display: block;\n}\n\ncite[contenteditable="true"]:empty:before {\n    display: block;\n}\n\n*[contenteditable="true"]:not(h1)[data-placeholder]:empty:focus:before {\n    content: attr(data-placeholder);\n    color: #84888acd !important;\n    display: block;\n}\n\nli.div[contenteditable="true"]:empty:hover:before {\n    content: attr(data-placeholder);\n    color: #84888acd;\n    display: block;\n}\n\n\n\nh1 {\n    font-size: 2.5rem;\n    font-weight: bolder !important;\n}\n\n.johannes-editor {\n    width: 100%;\n\n}\n\n.content {\n    width: 100%;\n    box-sizing: border-box;\n    /* background-color: red; */\n}\n\n.content .block .table-wrapper {\n    overflow-x: auto;\n    overflow-y: hidden;\n}\n\n\n/* pre {\n    width: 100%;\n} */\n\n[contenteditable] {\n    outline: none;\n}\n\nbody {\n    /* min-height: 2000px; */\n    background-color: white;\n\n    font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n}\n\n\n\n.editor {\n    display: flex;\n    margin-top: 80px;\n}\n\np {\n    color: #242424;\n}\n\n\n.block,\n.block * {\n    user-select: text;\n}\n\n\n.johannes-content-element {\n    width: 100%;\n    padding: 0;\n    margin: 0;\n    /* background-color: green; */\n}\n\n\n#johannesEditor {\n    width: 60%;\n    margin-left: auto;\n    margin-right: auto;\n}\n\n.johannes-editor hr {\n    width: 100%;\n    height: 2px;\n    visibility: visible;\n    border: none;\n    border-bottom: 1px solid rgba(55, 53, 47, 0.16);\n}\n\n\n\n.johannes-editor blockquote {\n    margin: 0.5rem 0;\n    padding-left: 20px;\n    border-left: 4px solid rgb(55, 53, 47);\n    font-style: italic;\n    display: block;\n}\n\n.johannes-editor cite {\n    padding-top: 1rem !important;\n    display: inline-block;\n}\n\n\n.johannes-editor cite::before {\n    content: \'— \';\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#linkBox {\n    z-index: 999999;\n    width: fit-content;\n    /* background-color: white; */\n    background-color: white;\n}\n\n#linkBox .header {\n    border-bottom: 1px solid rgba(55, 53, 47, 0.16);\n    ;\n    padding: 10px 20px;\n    /* font-size: 0.75rem; */\n    /* color: rgba(55, 53, 47, 0.6); */\n    font-size: 0.86rem;\n}\n\n#linkBox .link-box-shell {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    padding: 20px;\n}\n\n\n#linkBox .link-box-shell input {\n    width: 20rem;\n    border: 1px solid rgba(55, 53, 47, 0.16);\n    height: 1.5rem;\n    border-radius: 4px;\n    padding-left: 10px;\n}\n\n\n.ctrl-active .johannes-content-element a {\n    cursor: pointer;\n}\n\n\n\n\n/* #linkBox {\n    border-radius: 2px;\n    padding: 20px;\n    background-color: #f9f9f9;\n\n\n    box-shadow:\n        0 4px 6px rgba(0, 0, 0, 0.1),\n        0 -2px 4px rgba(0, 0, 0, 0.02),\n        -2px 0 4px rgba(0, 0, 0, 0.02),\n        2px 0 4px rgba(0, 0, 0, 0.02);\n\n\n    border: 1px solid #d0d0d0;\n    width: fit-content;\n    z-index: 999999;\n    color: rgb(120, 119, 116);\n    border-radius: none;\n}\n\n\n#linkBox input {\n    width: 316px;\n    padding: 8px 40px 8px 16px;\n\n    border: 1px solid #949494;\n    height: 24px;\n\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n}\n\n\n#linkBox input::selection,\n#linkBox input:focus {\n    border-radius: none;\n} */\n\n/** soft-box-shadow class */\n.soft-box-shadow {\n    margin: 0;\n    padding: 0;\n    border-radius: 2px;\n    box-shadow:\n        0 4px 6px rgba(0, 0, 0, 0.1),\n        0 -2px 4px rgba(216, 196, 196, 0.02),\n        -2px 0 4px rgba(0, 0, 0, 0.02),\n        2px 0 4px rgba(0, 0, 0, 0.02);\n\n    border: 1px solid #d0d0d0;\n}\n\n/** and soft-box-shadow */\n\n\n/** selection-wrapper class */\n.select-wrapper {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n.select-wrapper ul {\n    position: absolute;\n    background: white;\n    flex-direction: column;\n    width: fit-content;\n    padding-bottom: 0.5rem;\n    padding-left: 5px;\n    padding-right: 5px;\n    top: 2.2rem;\n    color: rgb(55, 53, 47);\n    padding-right: 0.3125rem;\n}\n\n.select-wrapper ul li {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 0.625rem;\n    padding: 0.1875rem 0.3125rem;\n    border-radius: 0.1875rem;\n    user-select: none !important;\n    font-size: small !important;\n    font-weight: 500;\n}\n\n.select-wrapper ul li span,\n.select-wrapper button span {\n    display: inline-block;\n    width: max-content;\n    line-height: 100% !important;\n}\n\n.select-wrapper ul li .option-image {\n    width: 1.375rem;\n    height: 1.375rem;\n    color: #242424;\n    padding: 0 !important;\n    margin: 0 !important;\n}\n\n.select-wrapper ul li .option-image svg {\n    color: #4f4f4f;\n    padding: 0 !important;\n    margin: 0 !important;\n}\n\n.select-wrapper {\n    position: relative;\n    color: rgb(120, 119, 116);\n}\n\n.select-wrapper>button {\n    color: rgba(55, 53, 47, 0.85);\n}\n\n.select-wrapper ul li>h3 {\n    margin: 0;\n    font-size: small !important;\n    color: #37352fa6;\n    margin: 0;\n    padding: 0;\n    font-weight: 600 !important;\n    margin-top: 0.3125rem;\n    margin-bottom: 0.3125rem;\n}\n\n/** end selection wrapper **/\n\n\n\n/** Text formatting Bar **/\n\n\n\n.floating-toolbar {\n    justify-content: space-between;\n    padding: 8px 16px;\n    background-color: white;\n    width: fit-content;\n    z-index: 999999;\n    position: absolute;\n    user-select: none;\n}\n\n\n.floating-toolbar .item {\n    color: rgb(120, 119, 116);\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n.floating-toolbar .item>button {\n\n    display: inline-flex;\n    align-items: center;\n}\n\n\n.floating-toolbar select {\n    color: rgb(120, 119, 116);\n    border: none;\n    font-size: 0.85rem;\n    background-color: inherit;\n}\n\n.text-formatting-select-button {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n#turnIntoButton span {\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    font-size: 0.9rem;\n\n}\n\n#turnIntoButton svg use {\n    margin: auto;\n}\n\n/* code:not(pre code) {\n    margin: 0;\n    padding: 0;\n    background-color: #d0d0d0;\n    background-color: #f6f5f4;\n    font-size: inherit;\n    font-size: 1rem !important;\n    border: 1px solid #0000001a;\n    padding: 0 3px;\n    display: inline-block;\n    border-radius: 4px;\n    box-sizing: border-box;\n} */\n\n\n\n\n/* a:not([href]) {\n    background-color: #d3e3fd;\n} */\n\n.text-formatting-button-active {\n    color: #2382e2;\n}\n\n.text-formatting-circle-active {\n    border-color: #2382e2 !important;\n}\n\n\n\n#moreTextOptionSelect {\n    position: absolute;\n}\n\n.moreTextOptionWrapper {\n    position: relative;\n}\n\n\n.bgc-red {\n    background-color: #FDDEDE;\n}\n\n.bgc-green {\n    background-color: #D7F7DC;\n}\n\n.bgc-blue {\n    background-color: #D9EDF6;\n}\n\n.bgc-yellow {\n    background-color: #FAF4D1;\n}\n\n.bgc-grey {\n    background-color: #E1E0E0;\n}\n\np,\nmark {\n    line-height: 1;\n}\n\n#turnIntoSelect .option-image {\n    /* display: none !important; */\n}\n\n.border-less-image {\n    width: 24px;\n    height: 24px;\n}\n\n\n\n\n/** Block Options **/\n\n.block-options-wrapper {\n    z-index: 999999;\n    position: absolute;\n    display: none;\n}\n\n.block-options {\n    width: fit-content;\n    max-height: 19rem;\n    overflow-y: auto;\n}\n\n.block-options {\n    padding: 0 0.625rem;\n    background: white;\n}\n\n.block-options section h2 {\n    font-size: small !important;\n    color: #37352fa6;\n    margin: 0;\n    padding: 0;\n    font-weight: 600 !important;\n    margin-top: 0.3125rem;\n    margin-bottom: 0.3125rem;\n    padding-left: 0.3125rem;\n}\n\n.block-options .option {\n    padding: 0.3125rem 0.625rem;\n    margin: 0.3125rem 0;\n    cursor: pointer;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: left;\n    gap: 0.6rem;\n    border-radius: 3px;\n}\n\n.block-options .option:focus {\n    outline: none;\n    background-color: #e9e9e9;\n    background-color: red;\n    border: inherit;\n}\n\n.option-focused {\n    outline: none;\n    background-color: #e9e9e9;\n    border: none;\n}\n\n.danger-option.option-focused,\n.danger-option.option-focused svg {\n    color: #EB5757 !important;\n}\n\n\n\n.block-options .option:focus-visible {\n    outline: none;\n    background-color: #e9e9e9;\n    border: inherit;\n}\n\n/* .option-hover:hover {\n    background-color: #e9e9e9;\n    box-shadow: 0px 0px 0px 2px #e9e9e9;\n    border-radius: 1px;\n    transition: 0.1s ease;\n} */\n\n/* .select-wrapper>button, */\n\n/* #turnIntoButton,\n#colorTextButton {\n    padding-left: 4px;\n} */\n\n#colorTextButton {\n    margin-left: 0.625rem;\n}\n\n#turnIntoButton:not([disabled]):hover,\n#colorTextButton:not([disabled]):hover,\n#moreTextOptionButton:not([disabled]):hover,\n.floating-toolbar .item>button:not([disabled]):hover {\n    background-color: #e9e9e9;\n    box-shadow: 0px 0px 0px 2px #e9e9e9;\n    border-radius: 1px;\n    transition: 0.1s ease;\n}\n\n\n\n.option[focused="true"] {\n    background-color: #bde4ff;\n}\n\n.option-image {\n    width: 2.875rem;\n    height: 2.875rem;\n    border-radius: 0.1875rem;\n    border: 1px solid #ccc;\n    color: #4f4f4f;\n\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    vertical-align: middle;\n    align-items: center;\n    background-color: #ffff;\n    box-sizing: border-box;\n}\n\n.option-image img {\n    max-width: 2.875rem;\n    max-height: 2.875rem;\n}\n\n.option-image svg {\n    margin: 0;\n    padding: 0;\n    padding: 0.625rem;\n    box-sizing: border-box;\n\n}\n\n.option-text * {\n    margin: 0;\n    padding: 0;\n\n}\n\n.option-text .block-title {\n    font-size: small !important;\n    font-weight: 500;\n}\n\n.option-text .block-description {\n    font-size: small !important;\n    color: rgba(55, 53, 47, 0.5);\n}\n\n/** End Block Options **/\n\n\n\n/* #deleteBlockButton:hover svg,\n#deleteBlockButton:hover {\n    color: rgb(235, 87, 87) !important;\n} */\n\n\n\n.johannes-editor *::selection {\n    /* background-color: rgba(211, 227, 253, 0.5) !important; */\n\n    background-color: hsl(210 75% 50% / 1);\n    color: white;\n}\n\n.johannes-editor mark,\n.johannes-editor *:not(h1) {\n    line-height: 1.5 !important;\n}\n\n.option {\n    justify-content: space-between;\n}\n\n.text-option {\n    display: flex;\n    flex-direction: row;\n    justify-content: start;\n    align-items: center;\n    gap: 0.625rem;\n}\n\n\n\n\n:root {\n    /* font-size: 16px; */\n    /* Tamanho padrão */\n}\n\n/* Para telas com densidade média */\n@media only screen and (-webkit-min-device-pixel-ratio: 2),\nonly screen and (min--moz-device-pixel-ratio: 2),\nonly screen and (min-resolution: 192dpi),\nonly screen and (min-resolution: 2dppx) {\n    :root {\n        font-size: 18px;\n        /* Aumenta o tamanho da fonte para telas de alta densidade */\n    }\n}\n\n/* Para telas com altíssima densidade */\n@media only screen and (-webkit-min-device-pixel-ratio: 3),\nonly screen and (min--moz-device-pixel-ratio: 3),\nonly screen and (min-resolution: 288dpi),\nonly screen and (min-resolution: 3dppx) {\n    :root {\n        font-size: 20px;\n        /* Ainda maior para telas de densidade muito alta */\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\ntable.johannes-content-element {\n    border-collapse: collapse;\n    max-width: inherit;\n    width: auto;\n    display: flex;\n    box-sizing: border-box !important;\n}\n\ntable.johannes-content-element th,\ntable.johannes-content-element td {\n    min-height: 20px;\n}\n\ntable.johannes-content-element th,\ntable.johannes-content-element td {\n    border: 1px solid #84888d;\n    padding: 8px;\n    text-align: left;\n    align-items: start;\n    overflow-wrap: break-word;\n    word-wrap: break-word;\n    white-space: normal;\n    vertical-align: top;\n    min-width: 100px;\n    max-width: 200px;\n    /* box-sizing: border-box !important; */\n\n    transition: border 100ms ease-out, box-shadow 100ms ease-out;\n\n}\n\ntable.johannes-content-element td.selected,\ntable.johannes-content-element td:focus {\n    outline: none;\n    box-shadow: 0 0 0 1px #74b6db inset;\n    border: 1px double #74b6db;\n\n}\n\ntd {\n    min-height: 1rem !important;\n    line-height: 1rem;\n}\n\ntd::placeholder {\n    display: block;\n}\n\ntd:empty:before {\n    content: attr(data-placeholder);\n    color: #84888acd;\n    display: block !important;\n    opacity: 0;\n}\n\n.table-wrapper {\n    width: 100%;\n}\n\n.table-controller {\n    position: relative;\n    max-width: 100%;\n}\n\n.add-table-row {\n    background-color: rgba(55, 53, 47, 0.06);\n    width: 100%;\n    padding: 0;\n    margin: 0;\n    margin-top: 0.375rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    height: 1rem;\n    cursor: pointer;\n    opacity: 0;\n    user-select: none;\n}\n\n.add-table-column {\n    position: absolute;\n    right: -1.3125rem;\n    background-color: rgba(55, 53, 47, 0.06);\n    width: 1rem;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    height: 100%;\n    top: 0;\n    cursor: pointer;\n    height: calc(100% - 1rem - 5px);\n    opacity: 0;\n    user-select: none;\n}\n\n.add-table-column:hover {\n    opacity: 1;\n}\n\n.add-table-row:hover {\n    opacity: 1;\n}\n\n.table-shell {\n    max-width: 100%;\n}\n\n\n\n.table-option {\n    background-color: white;\n    width: fit-content;\n    justify-content: space-between;\n    padding: 8px 16px;\n    background-color: #f9f9f9;\n    width: fit-content;\n    z-index: 999999;\n    position: absolute;\n    user-select: none;\n    padding: 8px 16px;\n    display: none;\n}\n\n\n/** Callout **/\n\n.callout-wrapper {\n    padding: 1rem;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n}\n\n.callout:hover .options-button {\n    display: block !important;\n}\n\n.callout p {\n    margin: 0;\n}\n\n.callout-background-red {\n    background-color: #FDDEDE;\n    border-color: #e4c8c8;\n}\n\n.callout-background-green {\n    background-color: #D7F7DC;\n    border-color: #c2dec6;\n}\n\n.callout-background-blue {\n    background-color: #D9EDF6;\n    border-color: #c3d5dd;\n}\n\n.callout-background-yellow {\n    background-color: #fcf7df;\n    border-color: #fbf5d6;\n}\n\n.callout-background-grey {\n    background-color: #edecec;\n    border-color: #e7e6e6;\n}\n\n.callout-background-none {\n    background-color: transparent;\n    border-color: #e7e6e6;\n\n}\n\n/** end callout */\n\n\n/** mediaInputter **/\n.mediaInputter {\n    background-color: white;\n}\n\n/** mediaInputter **/\n\n\n.no-selection {\n    user-select: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n}\n\n.pointer {\n    cursor: pointer;\n}\n\n\n/** upload/embed **/\n\n.tab-container {\n    font-size: 0.86rem;\n    display: flex;\n    flex-direction: column;\n    transition: 0.1s ease;\n\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n\n    transition: visibility 0.2s ease;\n\n\n    width: fit-content;\n    /* background-color: white !important; */\n    position: absolute;\n\n}\n\n.nav-underline {\n    margin: 0;\n    padding: 0;\n    border-bottom: 1px solid rgba(55, 53, 47, 0.16);\n    padding: 10px 20px;\n}\n\n.nav-underline .nav-item {\n    display: flex;\n    margin-right: 15px;\n}\n\n.nav-underline .nav-link {\n    cursor: pointer;\n    text-decoration: none;\n    color: rgb(55, 53, 47);\n    color: rgba(55, 53, 47, 0.5);\n    transition: 0.1s ease;\n}\n\n\n.nav-item.active .nav-link {\n    color: #000;\n}\n\n.tab-content .content-data {\n    display: none;\n    padding: 20px;\n    border-top: none;\n    transition: 0.1s ease;\n}\n\n.tab-content .content-data.active {\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n    gap: 1rem;\n}\n\n.tab-content .text-info {\n    font-size: 0.75rem;\n    color: rgba(55, 53, 47, 0.6);\n}\n\n.nav-underline .nav-item {\n    display: inline;\n}\n\n.embed-content input {\n    width: 20rem;\n    border: 1px solid rgba(55, 53, 47, 0.16);\n    height: 1.5rem;\n    border-radius: 4px;\n    padding-left: 10px;\n}\n\n\n.upload-content label {\n    display: block;\n    border: 1px solid rgba(55, 53, 47, 0.16);\n    border-radius: 4px;\n    width: 20rem;\n    text-align: center;\n    padding: 4px;\n    color: rgb(55, 53, 47);\n    background-color: #fff;\n    /* transition: 0.1s ease; */\n}\n\n.upload-content label:hover {\n    background-color: #eeeeee;\n}\n\n\n\n\n\n\n\n\n\n\n/* Estilo para as alças de redimensionamento */\n.resize-handle {\n    position: absolute;\n    width: 10px;\n    height: 10px;\n    background: rgba(0, 0, 0, 0.5);\n    cursor: nwse-resize;\n    /* Cursor de redimensionamento diagonal */\n}\n\n.resize-handle.se {\n    bottom: 0;\n    right: 0;\n}\n\n.spotify-embed {\n    min-height: 152px;\n    height: auto !important;\n    padding-bottom: 0 !important;\n    border-radius: .75rem !important;\n}\n\n.gist-embed {\n    padding-bottom: 0 !important;\n    min-height: 150px !important;\n    overflow-y: auto;\n}\n\n.snippet-embed {\n    padding-bottom: 0 !important;\n    min-height: 150px !important;\n    overflow-y: auto;\n}\n\n.embed-container {\n    position: relative;\n    width: 100%;\n    padding-bottom: 56.25%;\n    height: 0;\n    overflow: visible;\n}\n\n.embed-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n\n\n.iframe-wrapper {\n    position: relative;\n}\n\n\n\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-bottom: 56.25%;\n    height: 0;\n    overflow: hidden;\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n\n\n\n\n\n\n\n.x-resizable {\n    resize: horizontal;\n    overflow: auto;\n    cursor: nesw-resize;\n    min-width: 250px;\n}\n\n.y-resizable {\n    resize: vertical;\n    overflow: auto;\n    cursor: ns-resize;\n    min-height: 150px;\n}\n\n.background {\n    background-color: #e7e6e3;\n}\n\n\n.fit-content {\n    width: fit-content;\n    height: fit-content;\n}\n\n\n\n\n\n\n\n\n\n\n\n/* .embed-container {\n    position: relative;\n}\n\n.more-options-button {\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 999999;\n    background-color: red;\n\n}\n\n.context-menu {\n    position: absolute;\n    top: 20px;\n    right: 0;\n    background-color: #fff;\n    border: 1px solid #ccc;\n    padding: 5px;\n    z-index: 10;\n    display: none;\n}\n\n.more-options-button:active + .context-menu,\n.more-options-button:focus + .context-menu {\n    display: block;\n}\n\n\n.bbbuton{\n    background-color: red;\n    top: 0;\n    left: 0;\n} */\n\n\n/** BlockToolbar component **/\n.block-toolbar-wrapper {\n    width: 0;\n    height: 0;\n    position: relative;\n    overflow: visible;\n    margin: 0;\n    padding: 0;\n    display: contents;\n    display: block;\n    \n}\n\n.block-toolbar {\n    margin: 0;\n    padding: 0;\n    position: absolute;\n    right: 0;\n    display: flex;\n    flex-direction: row;\n    background-color: #f9f9f9;\n    color: black !important;\n    justify-content: center;\n    align-items: center;\n    padding: 0;\n    margin: 0;\n    gap: 10px;\n    padding: 5px;\n    padding-left: 10px;\n    padding-right: 10px;\n    transition: visibility 0.2s;\n\n    top: 5px;\n    right: 5px;\n    border-radius: 4px;\n}\n\n.block-toolbar .item {\n    flex-direction: row;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.block-toolbar .item button {\n    display: flex;\n}\n\n.block-toolbar button {\n    color: black;\n}\n\n.block-toolbar .color-interactive-button {\n    margin: 0;\n    padding: 0;\n}\n\n/** End BlockToolbar component **/\n\n\n\n.justify-left {\n    justify-content: left;\n}\n\n.justify-center {\n    justify-content: center;\n}\n\n.justify-right {\n    justify-content: right;\n}\n\n\n.hidden {\n    visibility: hidden !important;\n}\n\n\n\n\nfigure {\n    margin: 0;\n    padding: 0;\n}\n\n\n.overflow-hidden {\n    overflow: hidden;\n}\n\n/** Inline Code **/\n.johannes-content-element code:not(pre code) {\n    font-size: 1rem;\n    background-color: #cccccc7a;\n    padding: 0 3px;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n}\n\n/** Content placeholder */\n\n.content-placeholder {\n    padding: 1rem;\n    background-color: #e7e6e3;\n    color: rgba(55, 53, 47, 0.5);\n    display: flex;\n    gap: 5px;\n    align-items: center;\n    border-radius: 4px;\n}\n\n.content-placeholder .icon-wrapper {\n    display: flex;\n    align-items: center;\n    margin-right: 8px;\n}\n\n\n/* end Content placeholder */\n\n\n\n/** Code **/\n\npre {\n    margin: 0;\n}\n\npre code {\n    border-radius: 4px;\n}\n\n.ignore-events {\n    position: relative;\n}\n\n.code-block {\n    position: relative;\n}\n\n.code-block select {\n    position: absolute;\n}\n\n.code-block select {\n    appearance: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    background: transparent;\n    border: none;\n    padding: 4px 8px;\n    font: inherit;\n    color: inherit;\n    background-repeat: no-repeat;\n    background-position: right 10px center;\n    color: white;\n    display: none;\n}\n\n.code-block:hover select {\n    display: block;\n}\n\n\n\n.code-block code {\n    font-size: 1rem;\n\n}\n\n\n\n@keyframes shake {\n\n    0%,\n    100% {\n        transform: translateX(0);\n    }\n\n    25%,\n    75% {\n        transform: translateX(-5px);\n    }\n\n    50% {\n        transform: translateX(5px);\n    }\n}\n\n.shake-animation {\n    animation: shake 0.6s cubic-bezier(.36, .07, .19, .97) both;\n    transform: translate3d(0, 0, 0);\n    backface-visibility: hidden;\n    perspective: 1000px;\n}\n\n.blue-button {\n    background-color: "#2383e2";\n    color: "white";\n    border: "none";\n    padding: "3px";\n    border-radius: "5px";\n    font-weight: "500";\n}\n\n\n.block-selected {\n    /* border: 2px dashed red; */\n}\n\n.separator {\n    /* padding: 10px 0; */\n}\n\n\n.separator-wrapper {\n    display: flex;\n    align-items: center;\n    /* height: 50px; */\n}\n\n.separator {\n    flex-grow: 1;\n    padding: 0 10px;\n}\n\n/* .separator::before,\n.separator::after {\n    content: "";\n    flex-grow: 1;\n} */\n\n\n\n.separator-wrapper hr {\n    /* Outros estilos */\n    outline: none !important;\n    /* Remova esta linha se estiver presente */\n}\n\n.separator-wrapper hr:focus {\n    outline: none !important;\n}\n\n.separator-selected {\n    /* outline: 2px solid blue; */\n    border: none !important;\n    outline: none !important;\n    background-color: hsl(210 75% 50% / 1);\n}\n\n\n.separator-selected hr {\n    /* outline: 2px solid blue; */\n    /* border: 1px solid white !important; */\n\n    /* background-color: hsl(210 75% 50% / 1); */\n    color: white !important;\n    border-color: white !important;\n\n\n}',"",{version:3,sources:["webpack://./src/assets/css/main.css"],names:[],mappings:"AAAA,kBAAkB;AAClB;IACI,uBAAuB;IACvB,gCAAgC;AACpC;;;;AAIA,eAAe;;AAEf;IACI,YAAY;IACZ,SAAS;IACT,UAAU;IACV,WAAW;IACX,iBAAiB;IACjB,uBAAuB;IACvB,cAAc;IACd,aAAa;IACb,mBAAmB;IACnB,+BAA+B;IAC/B,gCAAgC;IAChC,wBAAwB;AAC5B;;;;AAIA,eAAe;AACf;IACI,SAAS;IACT,UAAU;IACV,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,sBAAsB;IACtB,uBAAuB;IACvB,yBAAyB;IACzB,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,aAAa;AACjB;;AAEA,mBAAmB;;;;AAInB,YAAY;AACZ;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;;AAEb;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,gCAAgC;IAChC,gBAAgB;IAChB,cAAc;AAClB;;AAEA;;IAEI,6BAA6B;AACjC;;AAEA;IACI,mBAAmB;IACnB,aAAa;IACb,kBAAkB;IAClB,iBAAiB;IACjB,MAAM;;IAEN,mBAAmB;IACnB,kBAAkB;IAClB,sBAAsB;;AAE1B;;AAEA;IACI,kBAAkB;;AAEtB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,2BAA2B;IAC3B,oBAAoB;;AAExB;;AAEA;IACI,qBAAqB;IACrB,cAAc;IACd,SAAS;IACT,UAAU;AACd;;AAEA;IACI,qBAAqB;IACrB,0BAA0B;AAC9B;;;AAGA;IACI,aAAa;IACb,mBAAmB;IACnB,qBAAqB;AACzB;;;AAGA;IACI,6BAA6B;AACjC;;AAEA;;;GAGG;;AAEH,qEAAqE;AACrE;IACI,6BAA6B;AACjC;;AAEA,uFAAuF;AACvF;;IAEI,gBAAgB;AACpB;;AAEA;;IAEI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;;AAE3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,0BAA0B;IAC1B,uBAAuB;IACvB,aAAa;IACb,iBAAiB;IACjB,2BAA2B;AAC/B;;AAEA;IACI,YAAY;IACZ,uBAAuB;IACvB,aAAa;IACb,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,uBAAuB;AAC3B;;;AAGA,eAAe;;;;AAIf;IACI,cAAc;IACd,kBAAkB;IAClB,YAAY;IACZ,iBAAiB;IACjB,oBAAoB;IACpB,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,QAAQ;AACZ;;;;AAIA;IACI,2BAA2B;AAC/B;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;IACnB,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;IACnB,mBAAmB;IACnB,sBAAsB;IACtB,2BAA2B;AAC/B;;AAEA;;GAEG;;AAEH;IACI,YAAY;IACZ,yBAAyB;IACzB,WAAW;AACf;;;AAGA;IACI,mBAAmB;IACnB,iBAAiB;AACrB;;;AAGA;IACI,+BAA+B;IAC/B,cAAc;IACd,oBAAoB;AACxB;;AAEA;IACI,+BAA+B;IAC/B,yBAAyB;IACzB,cAAc;AAClB;;AAEA,mCAAmC;;;AAGnC;IACI,+BAA+B;IAC/B,gBAAgB;IAChB,aAAa;AACjB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,+BAA+B;IAC/B,2BAA2B;IAC3B,cAAc;AAClB;;AAEA;IACI,+BAA+B;IAC/B,gBAAgB;IAChB,cAAc;AAClB;;;;AAIA;IACI,iBAAiB;IACjB,8BAA8B;AAClC;;AAEA;IACI,WAAW;;AAEf;;AAEA;IACI,WAAW;IACX,sBAAsB;IACtB,2BAA2B;AAC/B;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;AACtB;;;AAGA;;GAEG;;AAEH;IACI,aAAa;AACjB;;AAEA;IACI,wBAAwB;IACxB,uBAAuB;;IAEvB,4MAA4M;AAChN;;;;AAIA;IACI,aAAa;IACb,gBAAgB;AACpB;;AAEA;IACI,cAAc;AAClB;;;AAGA;;IAEI,iBAAiB;AACrB;;;AAGA;IACI,WAAW;IACX,UAAU;IACV,SAAS;IACT,6BAA6B;AACjC;;;AAGA;IACI,UAAU;IACV,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,WAAW;IACX,mBAAmB;IACnB,YAAY;IACZ,+CAA+C;AACnD;;;;AAIA;IACI,gBAAgB;IAChB,kBAAkB;IAClB,sCAAsC;IACtC,kBAAkB;IAClB,cAAc;AAClB;;AAEA;IACI,4BAA4B;IAC5B,qBAAqB;AACzB;;;AAGA;IACI,aAAa;AACjB;;;;;;;;;;;;;;;;;;;;;;;AAuBA;IACI,eAAe;IACf,kBAAkB;IAClB,6BAA6B;IAC7B,uBAAuB;AAC3B;;AAEA;IACI,+CAA+C;;IAE/C,kBAAkB;IAClB,wBAAwB;IACxB,kCAAkC;IAClC,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,aAAa;AACjB;;;AAGA;IACI,YAAY;IACZ,wCAAwC;IACxC,cAAc;IACd,kBAAkB;IAClB,kBAAkB;AACtB;;;AAGA;IACI,eAAe;AACnB;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsCG;;AAEH,2BAA2B;AAC3B;IACI,SAAS;IACT,UAAU;IACV,kBAAkB;IAClB;;;;qCAIiC;;IAEjC,yBAAyB;AAC7B;;AAEA,yBAAyB;;;AAGzB,6BAA6B;AAC7B;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,sBAAsB;IACtB,kBAAkB;IAClB,sBAAsB;IACtB,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;IACX,sBAAsB;IACtB,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;IACnB,aAAa;IACb,4BAA4B;IAC5B,wBAAwB;IACxB,4BAA4B;IAC5B,2BAA2B;IAC3B,gBAAgB;AACpB;;AAEA;;IAEI,qBAAqB;IACrB,kBAAkB;IAClB,4BAA4B;AAChC;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,cAAc;IACd,qBAAqB;IACrB,oBAAoB;AACxB;;AAEA;IACI,cAAc;IACd,qBAAqB;IACrB,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,yBAAyB;AAC7B;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,SAAS;IACT,2BAA2B;IAC3B,gBAAgB;IAChB,SAAS;IACT,UAAU;IACV,2BAA2B;IAC3B,qBAAqB;IACrB,wBAAwB;AAC5B;;AAEA,4BAA4B;;;;AAI5B,0BAA0B;;;;AAI1B;IACI,8BAA8B;IAC9B,iBAAiB;IACjB,uBAAuB;IACvB,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,iBAAiB;AACrB;;;AAGA;IACI,yBAAyB;IACzB,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;;AAEA;;IAEI,oBAAoB;IACpB,mBAAmB;AACvB;;;AAGA;IACI,yBAAyB;IACzB,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;IACpB,mBAAmB;IACnB,uBAAuB;IACvB,mBAAmB;IACnB,iBAAiB;;AAErB;;AAEA;IACI,YAAY;AAChB;;AAEA;;;;;;;;;;;;GAYG;;;;;AAKH;;GAEG;;AAEH;IACI,cAAc;AAClB;;AAEA;IACI,gCAAgC;AACpC;;;;AAIA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;;AAGA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;;IAEI,cAAc;AAClB;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;;;;AAKA,oBAAoB;;AAEpB;IACI,eAAe;IACf,kBAAkB;IAClB,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,2BAA2B;IAC3B,gBAAgB;IAChB,SAAS;IACT,UAAU;IACV,2BAA2B;IAC3B,qBAAqB;IACrB,wBAAwB;IACxB,uBAAuB;AAC3B;;AAEA;IACI,2BAA2B;IAC3B,mBAAmB;IACnB,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,mBAAmB;IACnB,qBAAqB;IACrB,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,yBAAyB;IACzB,qBAAqB;IACrB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,yBAAyB;IACzB,YAAY;AAChB;;AAEA;;IAEI,yBAAyB;AAC7B;;;;AAIA;IACI,aAAa;IACb,yBAAyB;IACzB,eAAe;AACnB;;AAEA;;;;;GAKG;;AAEH,4BAA4B;;AAE5B;;;GAGG;;AAEH;IACI,qBAAqB;AACzB;;AAEA;;;;IAII,yBAAyB;IACzB,mCAAmC;IACnC,kBAAkB;IAClB,qBAAqB;AACzB;;;;AAIA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,wBAAwB;IACxB,sBAAsB;IACtB,cAAc;;IAEd,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA;IACI,mBAAmB;IACnB,oBAAoB;AACxB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,iBAAiB;IACjB,sBAAsB;;AAE1B;;AAEA;IACI,SAAS;IACT,UAAU;;AAEd;;AAEA;IACI,2BAA2B;IAC3B,gBAAgB;AACpB;;AAEA;IACI,2BAA2B;IAC3B,4BAA4B;AAChC;;AAEA,wBAAwB;;;;AAIxB;;;GAGG;;;;AAIH;IACI,2DAA2D;;IAE3D,sCAAsC;IACtC,YAAY;AAChB;;AAEA;;IAEI,2BAA2B;AAC/B;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,sBAAsB;IACtB,mBAAmB;IACnB,aAAa;AACjB;;;;;AAKA;IACI,qBAAqB;IACrB,mBAAmB;AACvB;;AAEA,mCAAmC;AACnC;;;;IAII;QACI,eAAe;QACf,4DAA4D;IAChE;AACJ;;AAEA,uCAAuC;AACvC;;;;IAII;QACI,eAAe;QACf,mDAAmD;IACvD;AACJ;;;;;;;;;;;;AAYA;IACI,yBAAyB;IACzB,kBAAkB;IAClB,WAAW;IACX,aAAa;IACb,iCAAiC;AACrC;;AAEA;;IAEI,gBAAgB;AACpB;;AAEA;;IAEI,yBAAyB;IACzB,YAAY;IACZ,gBAAgB;IAChB,kBAAkB;IAClB,yBAAyB;IACzB,qBAAqB;IACrB,mBAAmB;IACnB,mBAAmB;IACnB,gBAAgB;IAChB,gBAAgB;IAChB,uCAAuC;;IAEvC,4DAA4D;;AAEhE;;AAEA;;IAEI,aAAa;IACb,mCAAmC;IACnC,0BAA0B;;AAE9B;;AAEA;IACI,2BAA2B;IAC3B,iBAAiB;AACrB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,+BAA+B;IAC/B,gBAAgB;IAChB,yBAAyB;IACzB,UAAU;AACd;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,wCAAwC;IACxC,WAAW;IACX,UAAU;IACV,SAAS;IACT,oBAAoB;IACpB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,kBAAkB;IAClB,YAAY;IACZ,eAAe;IACf,UAAU;IACV,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,wCAAwC;IACxC,WAAW;IACX,UAAU;IACV,SAAS;IACT,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,kBAAkB;IAClB,YAAY;IACZ,MAAM;IACN,eAAe;IACf,+BAA+B;IAC/B,UAAU;IACV,iBAAiB;AACrB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,eAAe;AACnB;;;;AAIA;IACI,uBAAuB;IACvB,kBAAkB;IAClB,8BAA8B;IAC9B,iBAAiB;IACjB,yBAAyB;IACzB,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;IACjB,aAAa;AACjB;;;AAGA,cAAc;;AAEd;IACI,aAAa;IACb,kBAAkB;IAClB,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,yBAAyB;IACzB,qBAAqB;AACzB;;AAEA;IACI,yBAAyB;IACzB,qBAAqB;AACzB;;AAEA;IACI,yBAAyB;IACzB,qBAAqB;AACzB;;AAEA;IACI,yBAAyB;IACzB,qBAAqB;AACzB;;AAEA;IACI,yBAAyB;IACzB,qBAAqB;AACzB;;AAEA;IACI,6BAA6B;IAC7B,qBAAqB;;AAEzB;;AAEA,iBAAiB;;;AAGjB,oBAAoB;AACpB;IACI,uBAAuB;AAC3B;;AAEA,oBAAoB;;;AAGpB;IACI,iBAAiB;IACjB,yBAAyB;IACzB,sBAAsB;IACtB,qBAAqB;AACzB;;AAEA;IACI,eAAe;AACnB;;;AAGA,mBAAmB;;AAEnB;IACI,kBAAkB;IAClB,aAAa;IACb,sBAAsB;IACtB,qBAAqB;;IAErB,yBAAyB;IACzB,sBAAsB;IACtB,iBAAiB;;IAEjB,gCAAgC;;;IAGhC,kBAAkB;IAClB,wCAAwC;IACxC,kBAAkB;;AAEtB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,+CAA+C;IAC/C,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,qBAAqB;IACrB,sBAAsB;IACtB,4BAA4B;IAC5B,qBAAqB;AACzB;;;AAGA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,aAAa;IACb,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,kBAAkB;IAClB,4BAA4B;AAChC;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,wCAAwC;IACxC,cAAc;IACd,kBAAkB;IAClB,kBAAkB;AACtB;;;AAGA;IACI,cAAc;IACd,wCAAwC;IACxC,kBAAkB;IAClB,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ,sBAAsB;IACtB,sBAAsB;IACtB,2BAA2B;AAC/B;;AAEA;IACI,yBAAyB;AAC7B;;;;;;;;;;;AAWA,8CAA8C;AAC9C;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,8BAA8B;IAC9B,mBAAmB;IACnB,yCAAyC;AAC7C;;AAEA;IACI,SAAS;IACT,QAAQ;AACZ;;AAEA;IACI,iBAAiB;IACjB,uBAAuB;IACvB,4BAA4B;IAC5B,gCAAgC;AACpC;;AAEA;IACI,4BAA4B;IAC5B,4BAA4B;IAC5B,gBAAgB;AACpB;;AAEA;IACI,4BAA4B;IAC5B,4BAA4B;IAC5B,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,sBAAsB;IACtB,SAAS;IACT,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,WAAW;IACX,YAAY;AAChB;;;AAGA;IACI,kBAAkB;AACtB;;;;AAIA;IACI,kBAAkB;IAClB,WAAW;IACX,sBAAsB;IACtB,SAAS;IACT,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,WAAW;IACX,YAAY;AAChB;;;;;;;;AAQA;IACI,kBAAkB;IAClB,cAAc;IACd,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;IAChB,cAAc;IACd,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,yBAAyB;AAC7B;;;AAGA;IACI,kBAAkB;IAClB,mBAAmB;AACvB;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCG;;;AAGH,6BAA6B;AAC7B;IACI,QAAQ;IACR,SAAS;IACT,kBAAkB;IAClB,iBAAiB;IACjB,SAAS;IACT,UAAU;IACV,iBAAiB;IACjB,cAAc;;AAElB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,kBAAkB;IAClB,QAAQ;IACR,aAAa;IACb,mBAAmB;IACnB,yBAAyB;IACzB,uBAAuB;IACvB,uBAAuB;IACvB,mBAAmB;IACnB,UAAU;IACV,SAAS;IACT,SAAS;IACT,YAAY;IACZ,kBAAkB;IAClB,mBAAmB;IACnB,2BAA2B;;IAE3B,QAAQ;IACR,UAAU;IACV,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,SAAS;IACT,UAAU;AACd;;AAEA,iCAAiC;;;;AAIjC;IACI,qBAAqB;AACzB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,sBAAsB;AAC1B;;;AAGA;IACI,6BAA6B;AACjC;;;;;AAKA;IACI,SAAS;IACT,UAAU;AACd;;;AAGA;IACI,gBAAgB;AACpB;;AAEA,kBAAkB;AAClB;IACI,eAAe;IACf,2BAA2B;IAC3B,cAAc;IACd,kBAAkB;IAClB,sBAAsB;AAC1B;;AAEA,yBAAyB;;AAEzB;IACI,aAAa;IACb,yBAAyB;IACzB,4BAA4B;IAC5B,aAAa;IACb,QAAQ;IACR,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,iBAAiB;AACrB;;;AAGA,4BAA4B;;;;AAI5B,WAAW;;AAEX;IACI,SAAS;AACb;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;IAChB,wBAAwB;IACxB,qBAAqB;IACrB,uBAAuB;IACvB,YAAY;IACZ,gBAAgB;IAChB,aAAa;IACb,cAAc;IACd,4BAA4B;IAC5B,sCAAsC;IACtC,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,cAAc;AAClB;;;;AAIA;IACI,eAAe;;AAEnB;;;;AAIA;;IAEI;;QAEI,wBAAwB;IAC5B;;IAEA;;QAEI,2BAA2B;IAC/B;;IAEA;QACI,0BAA0B;IAC9B;AACJ;;AAEA;IACI,2DAA2D;IAC3D,+BAA+B;IAC/B,2BAA2B;IAC3B,mBAAmB;AACvB;;AAEA;IACI,2BAA2B;IAC3B,cAAc;IACd,cAAc;IACd,cAAc;IACd,oBAAoB;IACpB,kBAAkB;AACtB;;;AAGA;IACI,4BAA4B;AAChC;;AAEA;IACI,qBAAqB;AACzB;;;AAGA;IACI,aAAa;IACb,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,YAAY;IACZ,eAAe;AACnB;;AAEA;;;;GAIG;;;;AAIH;IACI,mBAAmB;IACnB,wBAAwB;IACxB,0CAA0C;AAC9C;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,6BAA6B;IAC7B,uBAAuB;IACvB,wBAAwB;IACxB,sCAAsC;AAC1C;;;AAGA;IACI,6BAA6B;IAC7B,wCAAwC;;IAExC,4CAA4C;IAC5C,uBAAuB;IACvB,8BAA8B;;;AAGlC",sourcesContent:['/** cursor style */\n[contenteditable="true"] {\n    cursor: text !important;\n    white-space: pre-wrap !important;\n}\n\n\n\n/** CSS reset */\n\n.button-reset {\n    border: none;\n    margin: 0;\n    padding: 0;\n    width: auto;\n    overflow: visible;\n    background: transparent;\n    color: inherit;\n    font: inherit;\n    line-height: normal;\n    -webkit-font-smoothing: inherit;\n    -moz-osx-font-smoothing: inherit;\n    -webkit-appearance: none;\n}\n\n\n\n/** add block */\n.add-block {\n    margin: 0;\n    padding: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid #000;\n    background-color: white;\n    transition: all 0.3s ease;\n    box-sizing: border-box;\n    margin-left: 1.3rem;\n}\n\n.add-block-wrapper {\n    width: 100%;\n    height: 3.125rem;\n}\n\n.add-block-wrapper:hover .add-block {\n    display: flex;\n}\n\n/** and add block */\n\n\n\n/** List  **/\n.list {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n\n}\n\n.list-item-checkable input {\n    margin-top: 0.5rem;\n}\n\n.list li div {\n    display: inline-block !important;\n    min-width: 100px;\n    line-height: 1;\n}\n\nol.johannes-content-element,\nul.johannes-content-element {\n    padding-left: 1rem !important;\n}\n\n.johannes-content-element li>button {\n    /* display: none; */\n    display: none;\n    position: absolute;\n    margin-left: 10px;\n    top: 0;\n\n    flex-direction: row;\n    align-items: start;\n    justify-content: start;\n\n}\n\n.johannes-content-element li {\n    position: relative;\n\n}\n\n.johannes-content-element li::before {\n    margin-left: 0.3125rem;\n}\n\n.johannes-content-element li:hover>button {\n    /* display: inline-block; */\n    display: inline-flex;\n\n}\n\np.johannes-content-element {\n    display: inline-block;\n    line-height: 1;\n    margin: 0;\n    padding: 0;\n}\n\n.johannes-content-element .checkbox-list {\n    list-style-type: none;\n    padding-left: 0 !important;\n}\n\n\n.johannes-content-element .checkbox-list li {\n    display: flex;\n    flex-direction: row;\n    justify-content: left;\n}\n\n\n.johannes-content-element ul.checkbox-list input[type="checkbox"]:checked+span {\n    text-decoration: line-through;\n}\n\n/* ul.johannes-content-element:not(.checkbox-list),\nol.johannes-content-element:not(.checkbox-list) {\n    padding-left: 1.5rem !important;\n} */\n\n/** Add line through text decoration to checked checkboxes text div */\n.block input[type="checkbox"]:checked+div {\n    text-decoration: line-through;\n}\n\n/** Remove the default list style and replace by another that works with display flex */\n.block ol,\n.block ul {\n    list-style: none;\n}\n\n.block ul .list-item,\n.block ol .list-item {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n\n}\n\n.block ol li {\n    counter-increment: item;\n}\n\n.block ol li::before {\n    content: counter(item) ".";\n    margin-right: 0.3125rem;\n    display: flex;\n    /* width: 18px; */\n    justify-content: flex-start;\n}\n\n.block ul li:not(.no-list-style)::before {\n    content: "•";\n    margin-right: 0.3125rem;\n    display: flex;\n    /* width: 18px; */\n}\n\n.list-item-checkable input {\n    /* width: 18px; */\n    margin-right: 0.3125rem;\n}\n\n\n/** and list **/\n\n\n\n.drag-handler {\n    color: #84888d;\n    visibility: hidden;\n    cursor: grab;\n    align-self: start;\n    padding-top: 0.33rem;\n    position: absolute;\n}\n\n.drag-handler-wrapper {\n    position: relative;\n    height: 0;\n    width: 0;\n}\n\n\n\n.drag-handler svg {\n    /* background-color: red; */\n}\n\n.drag-handler svg use {\n    /* background-color: blue; */\n}\n\n.drag-handler:active {\n    cursor: grabbing;\n}\n\n.block {\n    display: flex;\n    flex-direction: row;\n    margin-bottom: 1rem;\n    position: relative;\n    max-width: 100%;\n}\n\n.block>*:not(.editor-only) {\n    padding-left: 1.25rem !important;\n}\n\n.block:hover .drag-handler {\n    visibility: visible;\n    vertical-align: top;\n    justify-content: start;\n    transition: visibility 0.2s;\n}\n\n/* .block:hover .block-toolbar {\n    visibility: visible;\n} */\n\n.drop-line {\n    height: 1rem;\n    background-color: #84888d;\n    width: 100%;\n}\n\n\n.title h1 {\n    margin-left: 1.3rem;\n    line-height: 3rem;\n}\n\n\n[contenteditable="true"]:empty:focus {\n    content: attr(data-placeholder);\n    color: #84888d;\n    pointer-events: none;\n}\n\nh1[data-placeholder]:empty:before {\n    content: attr(data-placeholder);\n    color: #84888d !important;\n    display: block;\n}\n\nh1[data-placeholder]:focus:before {}\n\n\n*[contenteditable="true"]:not(h1):empty:before {\n    content: attr(data-placeholder);\n    color: #84888acd;\n    display: none;\n}\n\n*[contenteditable="true"]:not(h1):empty:hover:before {\n    display: block;\n}\n\ncite[contenteditable="true"]:empty:before {\n    display: block;\n}\n\n*[contenteditable="true"]:not(h1)[data-placeholder]:empty:focus:before {\n    content: attr(data-placeholder);\n    color: #84888acd !important;\n    display: block;\n}\n\nli.div[contenteditable="true"]:empty:hover:before {\n    content: attr(data-placeholder);\n    color: #84888acd;\n    display: block;\n}\n\n\n\nh1 {\n    font-size: 2.5rem;\n    font-weight: bolder !important;\n}\n\n.johannes-editor {\n    width: 100%;\n\n}\n\n.content {\n    width: 100%;\n    box-sizing: border-box;\n    /* background-color: red; */\n}\n\n.content .block .table-wrapper {\n    overflow-x: auto;\n    overflow-y: hidden;\n}\n\n\n/* pre {\n    width: 100%;\n} */\n\n[contenteditable] {\n    outline: none;\n}\n\nbody {\n    /* min-height: 2000px; */\n    background-color: white;\n\n    font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n}\n\n\n\n.editor {\n    display: flex;\n    margin-top: 80px;\n}\n\np {\n    color: #242424;\n}\n\n\n.block,\n.block * {\n    user-select: text;\n}\n\n\n.johannes-content-element {\n    width: 100%;\n    padding: 0;\n    margin: 0;\n    /* background-color: green; */\n}\n\n\n#johannesEditor {\n    width: 60%;\n    margin-left: auto;\n    margin-right: auto;\n}\n\n.johannes-editor hr {\n    width: 100%;\n    height: 2px;\n    visibility: visible;\n    border: none;\n    border-bottom: 1px solid rgba(55, 53, 47, 0.16);\n}\n\n\n\n.johannes-editor blockquote {\n    margin: 0.5rem 0;\n    padding-left: 20px;\n    border-left: 4px solid rgb(55, 53, 47);\n    font-style: italic;\n    display: block;\n}\n\n.johannes-editor cite {\n    padding-top: 1rem !important;\n    display: inline-block;\n}\n\n\n.johannes-editor cite::before {\n    content: \'— \';\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#linkBox {\n    z-index: 999999;\n    width: fit-content;\n    /* background-color: white; */\n    background-color: white;\n}\n\n#linkBox .header {\n    border-bottom: 1px solid rgba(55, 53, 47, 0.16);\n    ;\n    padding: 10px 20px;\n    /* font-size: 0.75rem; */\n    /* color: rgba(55, 53, 47, 0.6); */\n    font-size: 0.86rem;\n}\n\n#linkBox .link-box-shell {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    padding: 20px;\n}\n\n\n#linkBox .link-box-shell input {\n    width: 20rem;\n    border: 1px solid rgba(55, 53, 47, 0.16);\n    height: 1.5rem;\n    border-radius: 4px;\n    padding-left: 10px;\n}\n\n\n.ctrl-active .johannes-content-element a {\n    cursor: pointer;\n}\n\n\n\n\n/* #linkBox {\n    border-radius: 2px;\n    padding: 20px;\n    background-color: #f9f9f9;\n\n\n    box-shadow:\n        0 4px 6px rgba(0, 0, 0, 0.1),\n        0 -2px 4px rgba(0, 0, 0, 0.02),\n        -2px 0 4px rgba(0, 0, 0, 0.02),\n        2px 0 4px rgba(0, 0, 0, 0.02);\n\n\n    border: 1px solid #d0d0d0;\n    width: fit-content;\n    z-index: 999999;\n    color: rgb(120, 119, 116);\n    border-radius: none;\n}\n\n\n#linkBox input {\n    width: 316px;\n    padding: 8px 40px 8px 16px;\n\n    border: 1px solid #949494;\n    height: 24px;\n\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n}\n\n\n#linkBox input::selection,\n#linkBox input:focus {\n    border-radius: none;\n} */\n\n/** soft-box-shadow class */\n.soft-box-shadow {\n    margin: 0;\n    padding: 0;\n    border-radius: 2px;\n    box-shadow:\n        0 4px 6px rgba(0, 0, 0, 0.1),\n        0 -2px 4px rgba(216, 196, 196, 0.02),\n        -2px 0 4px rgba(0, 0, 0, 0.02),\n        2px 0 4px rgba(0, 0, 0, 0.02);\n\n    border: 1px solid #d0d0d0;\n}\n\n/** and soft-box-shadow */\n\n\n/** selection-wrapper class */\n.select-wrapper {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n.select-wrapper ul {\n    position: absolute;\n    background: white;\n    flex-direction: column;\n    width: fit-content;\n    padding-bottom: 0.5rem;\n    padding-left: 5px;\n    padding-right: 5px;\n    top: 2.2rem;\n    color: rgb(55, 53, 47);\n    padding-right: 0.3125rem;\n}\n\n.select-wrapper ul li {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 0.625rem;\n    padding: 0.1875rem 0.3125rem;\n    border-radius: 0.1875rem;\n    user-select: none !important;\n    font-size: small !important;\n    font-weight: 500;\n}\n\n.select-wrapper ul li span,\n.select-wrapper button span {\n    display: inline-block;\n    width: max-content;\n    line-height: 100% !important;\n}\n\n.select-wrapper ul li .option-image {\n    width: 1.375rem;\n    height: 1.375rem;\n    color: #242424;\n    padding: 0 !important;\n    margin: 0 !important;\n}\n\n.select-wrapper ul li .option-image svg {\n    color: #4f4f4f;\n    padding: 0 !important;\n    margin: 0 !important;\n}\n\n.select-wrapper {\n    position: relative;\n    color: rgb(120, 119, 116);\n}\n\n.select-wrapper>button {\n    color: rgba(55, 53, 47, 0.85);\n}\n\n.select-wrapper ul li>h3 {\n    margin: 0;\n    font-size: small !important;\n    color: #37352fa6;\n    margin: 0;\n    padding: 0;\n    font-weight: 600 !important;\n    margin-top: 0.3125rem;\n    margin-bottom: 0.3125rem;\n}\n\n/** end selection wrapper **/\n\n\n\n/** Text formatting Bar **/\n\n\n\n.floating-toolbar {\n    justify-content: space-between;\n    padding: 8px 16px;\n    background-color: white;\n    width: fit-content;\n    z-index: 999999;\n    position: absolute;\n    user-select: none;\n}\n\n\n.floating-toolbar .item {\n    color: rgb(120, 119, 116);\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n.floating-toolbar .item>button {\n\n    display: inline-flex;\n    align-items: center;\n}\n\n\n.floating-toolbar select {\n    color: rgb(120, 119, 116);\n    border: none;\n    font-size: 0.85rem;\n    background-color: inherit;\n}\n\n.text-formatting-select-button {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n#turnIntoButton span {\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    font-size: 0.9rem;\n\n}\n\n#turnIntoButton svg use {\n    margin: auto;\n}\n\n/* code:not(pre code) {\n    margin: 0;\n    padding: 0;\n    background-color: #d0d0d0;\n    background-color: #f6f5f4;\n    font-size: inherit;\n    font-size: 1rem !important;\n    border: 1px solid #0000001a;\n    padding: 0 3px;\n    display: inline-block;\n    border-radius: 4px;\n    box-sizing: border-box;\n} */\n\n\n\n\n/* a:not([href]) {\n    background-color: #d3e3fd;\n} */\n\n.text-formatting-button-active {\n    color: #2382e2;\n}\n\n.text-formatting-circle-active {\n    border-color: #2382e2 !important;\n}\n\n\n\n#moreTextOptionSelect {\n    position: absolute;\n}\n\n.moreTextOptionWrapper {\n    position: relative;\n}\n\n\n.bgc-red {\n    background-color: #FDDEDE;\n}\n\n.bgc-green {\n    background-color: #D7F7DC;\n}\n\n.bgc-blue {\n    background-color: #D9EDF6;\n}\n\n.bgc-yellow {\n    background-color: #FAF4D1;\n}\n\n.bgc-grey {\n    background-color: #E1E0E0;\n}\n\np,\nmark {\n    line-height: 1;\n}\n\n#turnIntoSelect .option-image {\n    /* display: none !important; */\n}\n\n.border-less-image {\n    width: 24px;\n    height: 24px;\n}\n\n\n\n\n/** Block Options **/\n\n.block-options-wrapper {\n    z-index: 999999;\n    position: absolute;\n    display: none;\n}\n\n.block-options {\n    width: fit-content;\n    max-height: 19rem;\n    overflow-y: auto;\n}\n\n.block-options {\n    padding: 0 0.625rem;\n    background: white;\n}\n\n.block-options section h2 {\n    font-size: small !important;\n    color: #37352fa6;\n    margin: 0;\n    padding: 0;\n    font-weight: 600 !important;\n    margin-top: 0.3125rem;\n    margin-bottom: 0.3125rem;\n    padding-left: 0.3125rem;\n}\n\n.block-options .option {\n    padding: 0.3125rem 0.625rem;\n    margin: 0.3125rem 0;\n    cursor: pointer;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: left;\n    gap: 0.6rem;\n    border-radius: 3px;\n}\n\n.block-options .option:focus {\n    outline: none;\n    background-color: #e9e9e9;\n    background-color: red;\n    border: inherit;\n}\n\n.option-focused {\n    outline: none;\n    background-color: #e9e9e9;\n    border: none;\n}\n\n.danger-option.option-focused,\n.danger-option.option-focused svg {\n    color: #EB5757 !important;\n}\n\n\n\n.block-options .option:focus-visible {\n    outline: none;\n    background-color: #e9e9e9;\n    border: inherit;\n}\n\n/* .option-hover:hover {\n    background-color: #e9e9e9;\n    box-shadow: 0px 0px 0px 2px #e9e9e9;\n    border-radius: 1px;\n    transition: 0.1s ease;\n} */\n\n/* .select-wrapper>button, */\n\n/* #turnIntoButton,\n#colorTextButton {\n    padding-left: 4px;\n} */\n\n#colorTextButton {\n    margin-left: 0.625rem;\n}\n\n#turnIntoButton:not([disabled]):hover,\n#colorTextButton:not([disabled]):hover,\n#moreTextOptionButton:not([disabled]):hover,\n.floating-toolbar .item>button:not([disabled]):hover {\n    background-color: #e9e9e9;\n    box-shadow: 0px 0px 0px 2px #e9e9e9;\n    border-radius: 1px;\n    transition: 0.1s ease;\n}\n\n\n\n.option[focused="true"] {\n    background-color: #bde4ff;\n}\n\n.option-image {\n    width: 2.875rem;\n    height: 2.875rem;\n    border-radius: 0.1875rem;\n    border: 1px solid #ccc;\n    color: #4f4f4f;\n\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    vertical-align: middle;\n    align-items: center;\n    background-color: #ffff;\n    box-sizing: border-box;\n}\n\n.option-image img {\n    max-width: 2.875rem;\n    max-height: 2.875rem;\n}\n\n.option-image svg {\n    margin: 0;\n    padding: 0;\n    padding: 0.625rem;\n    box-sizing: border-box;\n\n}\n\n.option-text * {\n    margin: 0;\n    padding: 0;\n\n}\n\n.option-text .block-title {\n    font-size: small !important;\n    font-weight: 500;\n}\n\n.option-text .block-description {\n    font-size: small !important;\n    color: rgba(55, 53, 47, 0.5);\n}\n\n/** End Block Options **/\n\n\n\n/* #deleteBlockButton:hover svg,\n#deleteBlockButton:hover {\n    color: rgb(235, 87, 87) !important;\n} */\n\n\n\n.johannes-editor *::selection {\n    /* background-color: rgba(211, 227, 253, 0.5) !important; */\n\n    background-color: hsl(210 75% 50% / 1);\n    color: white;\n}\n\n.johannes-editor mark,\n.johannes-editor *:not(h1) {\n    line-height: 1.5 !important;\n}\n\n.option {\n    justify-content: space-between;\n}\n\n.text-option {\n    display: flex;\n    flex-direction: row;\n    justify-content: start;\n    align-items: center;\n    gap: 0.625rem;\n}\n\n\n\n\n:root {\n    /* font-size: 16px; */\n    /* Tamanho padrão */\n}\n\n/* Para telas com densidade média */\n@media only screen and (-webkit-min-device-pixel-ratio: 2),\nonly screen and (min--moz-device-pixel-ratio: 2),\nonly screen and (min-resolution: 192dpi),\nonly screen and (min-resolution: 2dppx) {\n    :root {\n        font-size: 18px;\n        /* Aumenta o tamanho da fonte para telas de alta densidade */\n    }\n}\n\n/* Para telas com altíssima densidade */\n@media only screen and (-webkit-min-device-pixel-ratio: 3),\nonly screen and (min--moz-device-pixel-ratio: 3),\nonly screen and (min-resolution: 288dpi),\nonly screen and (min-resolution: 3dppx) {\n    :root {\n        font-size: 20px;\n        /* Ainda maior para telas de densidade muito alta */\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\ntable.johannes-content-element {\n    border-collapse: collapse;\n    max-width: inherit;\n    width: auto;\n    display: flex;\n    box-sizing: border-box !important;\n}\n\ntable.johannes-content-element th,\ntable.johannes-content-element td {\n    min-height: 20px;\n}\n\ntable.johannes-content-element th,\ntable.johannes-content-element td {\n    border: 1px solid #84888d;\n    padding: 8px;\n    text-align: left;\n    align-items: start;\n    overflow-wrap: break-word;\n    word-wrap: break-word;\n    white-space: normal;\n    vertical-align: top;\n    min-width: 100px;\n    max-width: 200px;\n    /* box-sizing: border-box !important; */\n\n    transition: border 100ms ease-out, box-shadow 100ms ease-out;\n\n}\n\ntable.johannes-content-element td.selected,\ntable.johannes-content-element td:focus {\n    outline: none;\n    box-shadow: 0 0 0 1px #74b6db inset;\n    border: 1px double #74b6db;\n\n}\n\ntd {\n    min-height: 1rem !important;\n    line-height: 1rem;\n}\n\ntd::placeholder {\n    display: block;\n}\n\ntd:empty:before {\n    content: attr(data-placeholder);\n    color: #84888acd;\n    display: block !important;\n    opacity: 0;\n}\n\n.table-wrapper {\n    width: 100%;\n}\n\n.table-controller {\n    position: relative;\n    max-width: 100%;\n}\n\n.add-table-row {\n    background-color: rgba(55, 53, 47, 0.06);\n    width: 100%;\n    padding: 0;\n    margin: 0;\n    margin-top: 0.375rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    height: 1rem;\n    cursor: pointer;\n    opacity: 0;\n    user-select: none;\n}\n\n.add-table-column {\n    position: absolute;\n    right: -1.3125rem;\n    background-color: rgba(55, 53, 47, 0.06);\n    width: 1rem;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    height: 100%;\n    top: 0;\n    cursor: pointer;\n    height: calc(100% - 1rem - 5px);\n    opacity: 0;\n    user-select: none;\n}\n\n.add-table-column:hover {\n    opacity: 1;\n}\n\n.add-table-row:hover {\n    opacity: 1;\n}\n\n.table-shell {\n    max-width: 100%;\n}\n\n\n\n.table-option {\n    background-color: white;\n    width: fit-content;\n    justify-content: space-between;\n    padding: 8px 16px;\n    background-color: #f9f9f9;\n    width: fit-content;\n    z-index: 999999;\n    position: absolute;\n    user-select: none;\n    padding: 8px 16px;\n    display: none;\n}\n\n\n/** Callout **/\n\n.callout-wrapper {\n    padding: 1rem;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n}\n\n.callout:hover .options-button {\n    display: block !important;\n}\n\n.callout p {\n    margin: 0;\n}\n\n.callout-background-red {\n    background-color: #FDDEDE;\n    border-color: #e4c8c8;\n}\n\n.callout-background-green {\n    background-color: #D7F7DC;\n    border-color: #c2dec6;\n}\n\n.callout-background-blue {\n    background-color: #D9EDF6;\n    border-color: #c3d5dd;\n}\n\n.callout-background-yellow {\n    background-color: #fcf7df;\n    border-color: #fbf5d6;\n}\n\n.callout-background-grey {\n    background-color: #edecec;\n    border-color: #e7e6e6;\n}\n\n.callout-background-none {\n    background-color: transparent;\n    border-color: #e7e6e6;\n\n}\n\n/** end callout */\n\n\n/** mediaInputter **/\n.mediaInputter {\n    background-color: white;\n}\n\n/** mediaInputter **/\n\n\n.no-selection {\n    user-select: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n}\n\n.pointer {\n    cursor: pointer;\n}\n\n\n/** upload/embed **/\n\n.tab-container {\n    font-size: 0.86rem;\n    display: flex;\n    flex-direction: column;\n    transition: 0.1s ease;\n\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n\n    transition: visibility 0.2s ease;\n\n\n    width: fit-content;\n    /* background-color: white !important; */\n    position: absolute;\n\n}\n\n.nav-underline {\n    margin: 0;\n    padding: 0;\n    border-bottom: 1px solid rgba(55, 53, 47, 0.16);\n    padding: 10px 20px;\n}\n\n.nav-underline .nav-item {\n    display: flex;\n    margin-right: 15px;\n}\n\n.nav-underline .nav-link {\n    cursor: pointer;\n    text-decoration: none;\n    color: rgb(55, 53, 47);\n    color: rgba(55, 53, 47, 0.5);\n    transition: 0.1s ease;\n}\n\n\n.nav-item.active .nav-link {\n    color: #000;\n}\n\n.tab-content .content-data {\n    display: none;\n    padding: 20px;\n    border-top: none;\n    transition: 0.1s ease;\n}\n\n.tab-content .content-data.active {\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n    gap: 1rem;\n}\n\n.tab-content .text-info {\n    font-size: 0.75rem;\n    color: rgba(55, 53, 47, 0.6);\n}\n\n.nav-underline .nav-item {\n    display: inline;\n}\n\n.embed-content input {\n    width: 20rem;\n    border: 1px solid rgba(55, 53, 47, 0.16);\n    height: 1.5rem;\n    border-radius: 4px;\n    padding-left: 10px;\n}\n\n\n.upload-content label {\n    display: block;\n    border: 1px solid rgba(55, 53, 47, 0.16);\n    border-radius: 4px;\n    width: 20rem;\n    text-align: center;\n    padding: 4px;\n    color: rgb(55, 53, 47);\n    background-color: #fff;\n    /* transition: 0.1s ease; */\n}\n\n.upload-content label:hover {\n    background-color: #eeeeee;\n}\n\n\n\n\n\n\n\n\n\n\n/* Estilo para as alças de redimensionamento */\n.resize-handle {\n    position: absolute;\n    width: 10px;\n    height: 10px;\n    background: rgba(0, 0, 0, 0.5);\n    cursor: nwse-resize;\n    /* Cursor de redimensionamento diagonal */\n}\n\n.resize-handle.se {\n    bottom: 0;\n    right: 0;\n}\n\n.spotify-embed {\n    min-height: 152px;\n    height: auto !important;\n    padding-bottom: 0 !important;\n    border-radius: .75rem !important;\n}\n\n.gist-embed {\n    padding-bottom: 0 !important;\n    min-height: 150px !important;\n    overflow-y: auto;\n}\n\n.snippet-embed {\n    padding-bottom: 0 !important;\n    min-height: 150px !important;\n    overflow-y: auto;\n}\n\n.embed-container {\n    position: relative;\n    width: 100%;\n    padding-bottom: 56.25%;\n    height: 0;\n    overflow: visible;\n}\n\n.embed-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n\n\n.iframe-wrapper {\n    position: relative;\n}\n\n\n\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-bottom: 56.25%;\n    height: 0;\n    overflow: hidden;\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n\n\n\n\n\n\n\n.x-resizable {\n    resize: horizontal;\n    overflow: auto;\n    cursor: nesw-resize;\n    min-width: 250px;\n}\n\n.y-resizable {\n    resize: vertical;\n    overflow: auto;\n    cursor: ns-resize;\n    min-height: 150px;\n}\n\n.background {\n    background-color: #e7e6e3;\n}\n\n\n.fit-content {\n    width: fit-content;\n    height: fit-content;\n}\n\n\n\n\n\n\n\n\n\n\n\n/* .embed-container {\n    position: relative;\n}\n\n.more-options-button {\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 999999;\n    background-color: red;\n\n}\n\n.context-menu {\n    position: absolute;\n    top: 20px;\n    right: 0;\n    background-color: #fff;\n    border: 1px solid #ccc;\n    padding: 5px;\n    z-index: 10;\n    display: none;\n}\n\n.more-options-button:active + .context-menu,\n.more-options-button:focus + .context-menu {\n    display: block;\n}\n\n\n.bbbuton{\n    background-color: red;\n    top: 0;\n    left: 0;\n} */\n\n\n/** BlockToolbar component **/\n.block-toolbar-wrapper {\n    width: 0;\n    height: 0;\n    position: relative;\n    overflow: visible;\n    margin: 0;\n    padding: 0;\n    display: contents;\n    display: block;\n    \n}\n\n.block-toolbar {\n    margin: 0;\n    padding: 0;\n    position: absolute;\n    right: 0;\n    display: flex;\n    flex-direction: row;\n    background-color: #f9f9f9;\n    color: black !important;\n    justify-content: center;\n    align-items: center;\n    padding: 0;\n    margin: 0;\n    gap: 10px;\n    padding: 5px;\n    padding-left: 10px;\n    padding-right: 10px;\n    transition: visibility 0.2s;\n\n    top: 5px;\n    right: 5px;\n    border-radius: 4px;\n}\n\n.block-toolbar .item {\n    flex-direction: row;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.block-toolbar .item button {\n    display: flex;\n}\n\n.block-toolbar button {\n    color: black;\n}\n\n.block-toolbar .color-interactive-button {\n    margin: 0;\n    padding: 0;\n}\n\n/** End BlockToolbar component **/\n\n\n\n.justify-left {\n    justify-content: left;\n}\n\n.justify-center {\n    justify-content: center;\n}\n\n.justify-right {\n    justify-content: right;\n}\n\n\n.hidden {\n    visibility: hidden !important;\n}\n\n\n\n\nfigure {\n    margin: 0;\n    padding: 0;\n}\n\n\n.overflow-hidden {\n    overflow: hidden;\n}\n\n/** Inline Code **/\n.johannes-content-element code:not(pre code) {\n    font-size: 1rem;\n    background-color: #cccccc7a;\n    padding: 0 3px;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n}\n\n/** Content placeholder */\n\n.content-placeholder {\n    padding: 1rem;\n    background-color: #e7e6e3;\n    color: rgba(55, 53, 47, 0.5);\n    display: flex;\n    gap: 5px;\n    align-items: center;\n    border-radius: 4px;\n}\n\n.content-placeholder .icon-wrapper {\n    display: flex;\n    align-items: center;\n    margin-right: 8px;\n}\n\n\n/* end Content placeholder */\n\n\n\n/** Code **/\n\npre {\n    margin: 0;\n}\n\npre code {\n    border-radius: 4px;\n}\n\n.ignore-events {\n    position: relative;\n}\n\n.code-block {\n    position: relative;\n}\n\n.code-block select {\n    position: absolute;\n}\n\n.code-block select {\n    appearance: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    background: transparent;\n    border: none;\n    padding: 4px 8px;\n    font: inherit;\n    color: inherit;\n    background-repeat: no-repeat;\n    background-position: right 10px center;\n    color: white;\n    display: none;\n}\n\n.code-block:hover select {\n    display: block;\n}\n\n\n\n.code-block code {\n    font-size: 1rem;\n\n}\n\n\n\n@keyframes shake {\n\n    0%,\n    100% {\n        transform: translateX(0);\n    }\n\n    25%,\n    75% {\n        transform: translateX(-5px);\n    }\n\n    50% {\n        transform: translateX(5px);\n    }\n}\n\n.shake-animation {\n    animation: shake 0.6s cubic-bezier(.36, .07, .19, .97) both;\n    transform: translate3d(0, 0, 0);\n    backface-visibility: hidden;\n    perspective: 1000px;\n}\n\n.blue-button {\n    background-color: "#2383e2";\n    color: "white";\n    border: "none";\n    padding: "3px";\n    border-radius: "5px";\n    font-weight: "500";\n}\n\n\n.block-selected {\n    /* border: 2px dashed red; */\n}\n\n.separator {\n    /* padding: 10px 0; */\n}\n\n\n.separator-wrapper {\n    display: flex;\n    align-items: center;\n    /* height: 50px; */\n}\n\n.separator {\n    flex-grow: 1;\n    padding: 0 10px;\n}\n\n/* .separator::before,\n.separator::after {\n    content: "";\n    flex-grow: 1;\n} */\n\n\n\n.separator-wrapper hr {\n    /* Outros estilos */\n    outline: none !important;\n    /* Remova esta linha se estiver presente */\n}\n\n.separator-wrapper hr:focus {\n    outline: none !important;\n}\n\n.separator-selected {\n    /* outline: 2px solid blue; */\n    border: none !important;\n    outline: none !important;\n    background-color: hsl(210 75% 50% / 1);\n}\n\n\n.separator-selected hr {\n    /* outline: 2px solid blue; */\n    /* border: 1px solid white !important; */\n\n    /* background-color: hsl(210 75% 50% / 1); */\n    color: white !important;\n    border-color: white !important;\n\n\n}'],sourceRoot:""}]);const s=l},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,i,r){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(o)for(var s=0;s<this.length;s++){var a=this[s][0];null!=a&&(l[a]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);o&&l[d[0]]||(void 0!==r&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=r),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),t.push(d))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(i," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var r={},l=[],s=0;s<e.length;s++){var a=e[s],c=o.base?a[0]+o.base:a[0],d=r[c]||0,u="".concat(c," ").concat(d);r[c]=d+1;var m=n(u),h={css:a[1],media:a[2],sourceMap:a[3],supports:a[4],layer:a[5]};if(-1!==m)t[m].references++,t[m].updater(h);else{var p=i(h,o);o.byIndex=s,t.splice(s,0,{identifier:u,updater:p,references:1})}l.push(u)}return l}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var r=o(e=e||[],i=i||{});return function(e){e=e||[];for(var l=0;l<r.length;l++){var s=n(r[l]);t[s].references--}for(var a=o(e,i),c=0;c<r.length;c++){var d=n(r[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}r=a}}},659:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,i&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var i=t[o];if(void 0!==i)return i.exports;var r=t[o]={id:o,exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var o,i,r,l,s,a,c,d,u,m,h,p,A,C,g,b,E,f=n(72),B=n.n(f),v=n(825),w=n.n(v),k=n(659),I=n.n(k),y=n(56),x=n.n(y),T=n(540),S=n.n(T),L=n(113),M=n.n(L),N=n(282),q={};q.styleTagTransform=M(),q.setAttributes=x(),q.insert=I().bind(null,"head"),q.domAPI=w(),q.insertStyleElement=S(),B()(N.A,q),N.A&&N.A.locals&&N.A.locals,function(e){e.Paragraph="p",e.Heading_1="h1",e.Heading_2="h2",e.Heading_3="h3",e.Heading_4="h4",e.Heading_5="h5",e.Heading_6="h6",e.CheckList="checkList",e.BulletedList="bulletedList",e.NumberedList="numberedList",e.List="list",e.Table="table",e.Image="image",e.Script="script",e.Iframe="iframe"}(o||(o={}));class H{static generateUniqueId(){const e=Date.now().toString(36),t=new Uint32Array(1);return window.crypto.getRandomValues(t),e+t[0].toString(36)}static rgbToHex(e){return"#"+e.match(/\d+/g).map(Number).map((e=>{const t=e.toString(16);return 1===t.length?"0"+t:t})).join("")}}!function(e){e.Link="icon-material-link",e.Bold="icon-wordpress-bold",e.Italic="icon-material-italic",e.Underline="icon-material-underline",e.InlineCode="icon-material-code-inline",e.StrikeThrough="icon-wordpress-strike-through",e.Plus="icon-plus",e.ColumnRight="icon-material-column-right",e.ColumnLeft="icon-material-column-left",e.RowAbove="icon-material-row-above",e.RowBelow="icon-material-row-below",e.deleteSweep="icon-material-delete-sweep",e.Trash="icon-material-trash",e.CloseCircle="icon-ionic-close-circle",e.Empty="Empty",e.Callout="icon-material-callout",e.Image="icon-material-image",e.Image2="icon-bootstrap-image",e.Video="icon-material-video",e.JustifyStart="icon-material-justify-start",e.JustifyCenter="icon-material-justify-center",e.JustifyEnd="icon-material-justify-end",e.Duplicate="icon-material-duplicate",e.Spotify="icon-bootstrap-spotify",e.GitHub="icon-bootstrap-github",e.GitLab="icon-bootstrap-gitlab",e.CodePen="icon-codepen",e.YouTube="icon-bootstrap-youtube"}(i||(i={})),function(e){e.IncludeBlockToolbarClass="include-block-toolbar",e.AlignToolClass="align-tool",e.ColorToolClass="color-tool",e.ExtraOptionsClass="extra-options",e.LanguageSelectionToolClass="language-selection-tool"}(r||(r={})),function(e){e.ContentElement="johannes-content-element",e.EditorOnly="editor-only",e.Block="block",e.ShowMediaInputOnClick="show-media-input-on-click",e.ShowMediaInputUpload="show-media-input-upload",e.ShowMediaInputEmbed="show-media-input-embed"}(l||(l={}));class O{creators;static _instance;static ELEMENT_TYPES={BLOCK_PARAGRAPH:"block-p",PARAGRAPH:"p",CHECKBOX_ITEM:"checkboxItem",LIST_ITEM:"listItem",CODE:"code",QUOTE:"blockquote",BULLETED_LIST:"ul",NUMBERED_LIST:"ol",CHECK_LIST:"checkLists",HEADER_1:"h1",HEADER_2:"h2",HEADER_3:"h3",HEADER_4:"h4",HEADER_5:"h5",HEADER_6:"h6",DRAG_HANDLE_BUTTON:"drag-handle-button",TABLE:"table",IMAGE:"image",VIDEO:"video",SPOTIFY:"spotify",GITHUB_GIST:"github-gist",GITLAB_SNIPPET:"gitlab-snippet",CODEPEN:"codepen",CALLOUT:"callout",SEPARATOR:"separator"};constructor(){if(O._instance)throw new Error("Use ElementFactoryService.getInstance() to get instance.");this.creators={},this.register(O.ELEMENT_TYPES.BLOCK_PARAGRAPH,O.blockParagraphCreator()),this.register(O.ELEMENT_TYPES.PARAGRAPH,O.paragraphCreator()),this.register(O.ELEMENT_TYPES.CHECKBOX_ITEM,O.checkboxItemCreator()),this.register(O.ELEMENT_TYPES.LIST_ITEM,O.listItemCreator()),this.register(O.ELEMENT_TYPES.CODE,O.codeCreator()),this.register(O.ELEMENT_TYPES.QUOTE,O.quoteCreator()),this.register(O.ELEMENT_TYPES.CHECK_LIST,O.checkListCreator()),this.register(O.ELEMENT_TYPES.BULLETED_LIST,O.bulletedListCreator()),this.register(O.ELEMENT_TYPES.NUMBERED_LIST,O.numberedListCreator()),this.register(O.ELEMENT_TYPES.HEADER_1,O.headingCreator(1)),this.register(O.ELEMENT_TYPES.HEADER_2,O.headingCreator(2)),this.register(O.ELEMENT_TYPES.HEADER_3,O.headingCreator(3)),this.register(O.ELEMENT_TYPES.HEADER_4,O.headingCreator(4)),this.register(O.ELEMENT_TYPES.HEADER_5,O.headingCreator(5)),this.register(O.ELEMENT_TYPES.HEADER_6,O.headingCreator(6)),this.register(O.ELEMENT_TYPES.DRAG_HANDLE_BUTTON,O.dragHandleButtonCreator()),this.register(O.ELEMENT_TYPES.TABLE,O.tableCreator()),this.register(O.ELEMENT_TYPES.IMAGE,O.placeholderCreator(o.Image,i.Image2,"Upload or embed an image",[l.ShowMediaInputUpload,l.ShowMediaInputEmbed,"image-embed-placeholder-text"])),this.register(O.ELEMENT_TYPES.VIDEO,O.placeholderCreator(o.Iframe,i.YouTube,"Embed a YouTube video",[l.ShowMediaInputEmbed,"youtube-embed-placeholder-text"])),this.register(O.ELEMENT_TYPES.SPOTIFY,O.placeholderCreator(o.Iframe,i.Spotify,"Embed a Spotify audio track",[l.ShowMediaInputEmbed,"spotify-embed-placeholder-text"])),this.register(O.ELEMENT_TYPES.GITHUB_GIST,O.placeholderCreator(o.Iframe,i.GitHub,"Embed a GitHub Gist",[l.ShowMediaInputEmbed,"github-gist-embed-placeholder-text"])),this.register(O.ELEMENT_TYPES.CODEPEN,O.placeholderCreator(o.Iframe,i.CodePen,"Embed a CodePen web demo",[l.ShowMediaInputEmbed,"codepen-embed-placeholder-text"])),this.register(O.ELEMENT_TYPES.CALLOUT,O.calloutCreator()),this.register(O.ELEMENT_TYPES.SEPARATOR,O.separatorCreator()),O._instance=this}static getInstance(){return this._instance||(this._instance=new O),this._instance}register(e,t){this.creators[e]=t}create(e,t){const n=this.creators[e];if(!n)throw new TypeError(`No creator registered for type: ${e}`);return n(t||"")}static blockParagraphCreator(){return e=>O.blockParagraph(e)}static paragraphCreator(){return e=>O.paragraph(e)}static headingCreator(e){return t=>O.heading(e,t)}static checkboxItemCreator(){return e=>O.checkboxItem(e||"")}static listItemCreator(){return e=>O.listItem_2(e)}static dragHandleButtonCreator(){return()=>O.dragHandleButton()}static codeCreator(){return e=>{const t=document.createElement("div");t.classList.add("johannes-content-element","ignore-events");const n=document.createElement("div");n.classList.add("code-block","ignore-quick-menu","ignore-text-floating-toolbar");const o=document.createElement("pre");o.classList.add(r.IncludeBlockToolbarClass,r.LanguageSelectionToolClass,r.ExtraOptionsClass);const i=document.createElement("code");return i.contentEditable="true",i.setAttribute("data-placeholder","/* Code snippet */"),i.textContent=e||"",i.classList.add("johannes-code","focusable","hljs","language-plaintext"),i.setAttribute("spellCheck","false"),o.appendChild(i),i.addEventListener("blur",(()=>{i.removeAttribute("data-highlighted"),hljs.highlightElement(i)})),n.appendChild(o),t.appendChild(n),hljs.highlightElement(i),t}}static quoteCreator(){return e=>{const t=document.createElement("div");t.classList.add("johannes-content-element","swittable");const n=document.createElement("blockquote");return n.classList.add("focusable"),n.textContent=e||"",n.contentEditable="true",n.setAttribute("data-placeholder",O.getRandomQuote()),t.appendChild(n),t}}static getRandomQuote(){const e=["Talk is cheap. Show me the code. - Linus Torvalds","Premature optimization is the root of all evil. - Donald Knuth","The most dangerous phrase in the language is, 'We've always done it this way.' - Grace Hopper","Simplicity is prerequisite for reliability. - Edsger W. Dijkstra","Any fool can write code that a computer can understand. Good programmers write code that humans can understand. - Martin Fowler","First, solve the problem. Then, write the code. - John Johnson","In programming, the hard part isn't solving problems, but deciding what problems to solve. - Paul Graham","Code is like humor. When you have to explain it, it's bad. - Cory House","Make it work, make it right, make it fast. - Kent Beck","Before software can be reusable it first has to be usable. - Ralph Johnson"];return e[Math.floor(Math.random()*e.length)]}static checkListCreator(){return e=>{const t=document.createElement("ul");t.classList.add("johannes-content-element"),t.classList.add("swittable"),t.classList.add("list"),t.classList.add("checkbox-list"),t.setAttribute("data-content-type",o.CheckList);const n=O.checkboxItem(e||"");return t.appendChild(n),t}}static bulletedListCreator(){return e=>{const t=document.createElement("ul");t.setAttribute("data-content-type",o.BulletedList),t.classList.add("johannes-content-element"),t.classList.add("swittable"),t.classList.add("list");const n=O.listItem_2(e||"");return t.appendChild(n),t}}static numberedListCreator(){return e=>{const t=document.createElement("ol");t.setAttribute("data-content-type",o.NumberedList),t.classList.add("johannes-content-element"),t.classList.add("swittable"),t.classList.add("list");const n=O.listItem_2(e||"");return t.appendChild(n),t}}static tableCreator(){return e=>{const t=document.createElement("div");t.classList.add("table-shell","ignore-quick-menu");const n=document.createElement("div");n.classList.add("table-controller");const i=document.createElement("div");i.classList.add("table-wrapper");const l=document.createElement("table");l.classList.add("johannes-content-element","swittable","table",r.IncludeBlockToolbarClass,r.AlignToolClass,r.ExtraOptionsClass),l.setAttribute("data-content-type",o.Table),t.appendChild(n),n.appendChild(i),i.appendChild(l);const s=document.createElement("tbody");l.appendChild(s);const a=e?e.split(","):[],c=document.createElement("tr");a.forEach((e=>{const t=document.createElement("td");t.classList.add("focusable"),t.setAttribute("data-placeholder","cell"),t.textContent=e,t.contentEditable="true",c.appendChild(t)})),s.appendChild(c);const d=document.createElement("div");d.classList.add("add-table-row"),d.innerHTML='<svg width="1rem" height="1rem" fill="currentColor"><use xlink:href="#icon-plus"></use></svg>';const u=document.createElement("div");return u.classList.add("add-table-column"),u.innerHTML='<svg width="1rem" height="1rem" fill="currentColor"><use xlink:href="#icon-plus"></use></svg>',n.appendChild(d),n.appendChild(u),t}}static placeholderCreator(e,t,n,o=[]){return i=>{const s=document.createElement("div");s.classList.add(l.ContentElement,"swittable","no-selection",r.IncludeBlockToolbarClass,r.ExtraOptionsClass),s.setAttribute("data-content-type",e);const a=document.createElement("div");a.classList.add("content-placeholder",l.ShowMediaInputOnClick,...o);const c=this.createIcon(t),d=document.createElement("span");return d.classList.add("no-selection"),d.innerText=n,s.appendChild(a),a.appendChild(c),a.appendChild(d),s}}static calloutCreator(){return e=>{const t=document.createElement("div");t.classList.add("ignore-quick-menu","callout","johannes-content-element","swittable",r.IncludeBlockToolbarClass,r.ColorToolClass,r.ExtraOptionsClass);const n=document.createElement("div");n.classList.add("callout-background-grey","callout-wrapper");const o=document.createElement("p");return o.setAttribute("data-placeholder","Type something..."),o.contentEditable="true",o.classList.add("callout-text","editable","focusable"),n.appendChild(o),t.appendChild(n),t}}static separatorCreator(){return()=>{const e=document.createElement("div");e.classList.add("johannes-content-element");const t=document.createElement("div");t.classList.add("separator-wrapper");const n=document.createElement("hr");return n.classList.add("separator"),t.appendChild(n),e.appendChild(t),e}}static paragraph(e=null){const t=document.createElement("p");return t.innerText=e||"",t.contentEditable="true",t.setAttribute("data-content-type",o.Paragraph),t.classList.add("johannes-content-element"),t.classList.add("swittable"),t.classList.add("focusable"),t.classList.add("key-trigger"),t.setAttribute("data-placeholder","Write something or type / (slash) to choose a block..."),t}static heading(e,t=null){const n=document.createElement(`h${e}`);return n.innerText=t||"",n.contentEditable="true",n.setAttribute("data-content-type",`h${e}`),n.classList.add("johannes-content-element"),n.classList.add("swittable"),n.classList.add("focusable"),n.classList.add("focus"),n.classList.add("key-trigger"),n.setAttribute("data-placeholder",`Heading ${e}`),n}static checkboxItem(e){const t=H.generateUniqueId();let n=document.createElement("li");n.classList.add("deletable","no-list-style","list-item","list-item-checkable");let o=document.createElement("input");o.id=t,o.setAttribute("type","checkbox");let i=document.createElement("div");return i.textContent=e,i.setAttribute("data-placeholder","To-do"),i.contentEditable="true",i.setAttribute("for",t),i.setAttribute("contentEditable","true"),i.classList.add("focusable"),i.classList.add("editable"),i.classList.add("focus"),n.appendChild(o),n.appendChild(i),n}static listItem_2(e=null){let t=document.createElement("li");t.classList.add("deletable"),t.classList.add("list-item");const n=document.createElement("div");return n.classList.add("focusable"),n.classList.add("editable"),n.classList.add("focus"),n.contentEditable="true",n.classList.add("key-trigger"),n.setAttribute("data-placeholder","Item"),t.appendChild(n),n.innerText=e||"",t}static blockParagraph(e=null){let t=document.createElement("div");t.id=`b-${H.generateUniqueId()}`;let n=O.paragraph(e);return t.appendChild(n),t.classList.add("block"),t.classList.add("deletable"),t}static dragHandleButton(){const e=document.createElement("div");e.classList.add("drag-handler-wrapper",l.EditorOnly);let t=document.createElement("button");return t.innerHTML='<svg width="1.375rem" height="1.375rem" fill="currentColor"><use href="#icon-material-drag"></use></svg>',t.classList.add(l.EditorOnly,"drag-handler","button-reset"),t.draggable=!0,e.appendChild(t),e}static createIcon(e){let t=document.createElement("div");return t.classList.add("icon-wrapper"),t.innerHTML=`<svg width="1.375rem" height="1.375rem" fill="currentColor"><use href="#${e}"></use></svg>`,t}}!function(e){e.ColorChangeRequest="ColorChangeRequest",e.ShowHideActiveButton="ShowHideActiveButton",e.ResetActiveButtons="ResetActiveButtons",e.CloseElement="HideComponent",e.ShowElement="ShowElement",e.ChangeBlockToolbarLanguage="ChangeBlockToolbarLanguage"}(s||(s={}));class R{id;_canHide;classList=[];props;htmlElement;parent;constructor(e){this.props=e,this.htmlElement=this.init(),this._canHide=!0}get display(){return"block"}setId(e){this.id=e,this.htmlElement.id=e}addCssClass(...e){this.classList.push(...e),this.htmlElement.classList.add(...e)}appendTo(e){this.parent=e,e.htmlElement.appendChild(this.htmlElement)}get isVisible(){let e=this.htmlElement;if("none"===e.style.display||"hidden"===e.style.visibility||!document.contains(e))return!1;for(;e;){const t=window.getComputedStyle(e);if("none"===t.display||"hidden"===t.visibility)return!1;if(!e.parentElement)break;e=e.parentElement}return!0}show(){this.htmlElement.style.display=this.display}hide(){this.htmlElement.style.display="none"}lockHide(){this._canHide=!1}unlockHide(){this._canHide=!0}get canHide(){return this._canHide&&this.isVisible}set canHide(e){this._canHide=e}focus(){this.htmlElement.focus()}changeColor(e){this.htmlElement.style.color=e}removeColor(){this.htmlElement.style.color="inherit"}changeVisibilityToVisible(){this.htmlElement.style.visibility="visible"}changeVisibilityToHidden(){this.htmlElement.style.visibility="hidden"}get doesElementOverflowScreen(){const e=this.htmlElement.style.display,t=this.htmlElement.style.visibility,n=this.htmlElement.style.position;"none"===e&&(this.htmlElement.style.display="block",this.htmlElement.style.visibility="hidden",this.htmlElement.style.position="absolute");const o=this.htmlElement.getBoundingClientRect(),i=window.innerWidth;return"none"===e&&(this.htmlElement.style.display=e,this.htmlElement.style.visibility=t,this.htmlElement.style.position=n),o.right>i||o.left<0}ensureVisible(){this.htmlElement.closest("select, ul")?this.htmlElement.scrollIntoView({behavior:"smooth",block:"nearest",inline:"start"}):console.warn("Attempted to make a non-relevant item visible")}handleCloseElementEvent(e){const t=e.detail;this.id&&this.id==t.targetId&&(e.stopImmediatePropagation(),this.hide())}handleShowElementEvent(e){e.detail.targetId==this.id&&(e.stopImmediatePropagation(),this.show())}attachUIEvent(){document.addEventListener(s.CloseElement,this.handleCloseElementEvent.bind(this)),document.addEventListener(s.ShowElement,this.handleShowElementEvent.bind(this))}}class D{static instance=new D;dependencies={};constructor(){}static get Instance(){return D.instance}register(e,t){this.dependencies[e]=t}resolve(e){if(!this.dependencies[e])throw new Error(`Dependency ${e} not found.`);return this.dependencies[e]()}}!function(e){e.Load="load",e.Mouseenter="mouseenter",e.Mouseleave="mouseleave",e.Mousedown="mousedown",e.Mousemove="mousemove",e.Mouseup="mouseup",e.Mouseover="mouseover",e.Keyup="keyup",e.Keydown="keydown",e.Blur="blur",e.SelectStart="selectstart",e.SelectionChange="selectionchange",e.Click="click",e.Focusin="focusin",e.Focusout="focusout",e.DOMContentLoaded="DOMContentLoaded",e.Input="input",e.BblClick="dblclick"}(a||(a={}));class P{static isSelectionInTableCell(){let e=window.getSelection();if(!e?.rangeCount)return!1;let t=e.anchorNode;for(;t;){if(t.nodeType===Node.ELEMENT_NODE&&("TD"===t.tagName||"TH"===t.tagName))return!0;t=t.parentNode}return!1}static getSelectionTextInfo(e){let t,n,o=!1,i=!1;if(""==e.textContent)return o=!0,i=!0,{atStart:o,atEnd:i};const r=window.getSelection();return r&&r.rangeCount>0&&(t=r.getRangeAt(0),n=document.createRange(),n.selectNodeContents(e),n.setEnd(t.startContainer,t.startOffset),o=""===n.toString(),n.selectNodeContents(e),n.setStart(t.endContainer,t.endOffset),i=""===n.toString()),{atStart:o,atEnd:i}}static insertAfter(e,t){t.parentNode&&t.parentNode.insertBefore(e,t.nextSibling)}static hasTextContent(e){return""!==e.textContent?.trim()||e.hasChildNodes()&&Array.from(e.childNodes).some((e=>this.hasTextContent(e)))}static cloneAndInsertAfter(e){const t=e.cloneNode(!0),n=e.parentNode;if(!n)return null;if(n.insertBefore(t,e.nextSibling),t.id){const e=t.id.match(/^(.+?)-/);if(e){const n=e[1];t.id=n+"-"+H.generateUniqueId()}else t.id=H.generateUniqueId()}return t}static findClosestAncestorOfActiveElementByClass(e){const t=document.activeElement;if(!t)return null;let n=t;for(;n;){if(n.nodeType===Node.ELEMENT_NODE&&n.classList.contains(e))return n;n=n.parentNode}return null}static findClosestAncestorOfSelectionByClass(e){const t=window.getSelection();if(!t||0===t.rangeCount)return null;let n=t.getRangeAt(0).commonAncestorContainer;for(n&&n.nodeType===Node.TEXT_NODE&&(n=n.parentNode);n;){if(n.nodeType===Node.ELEMENT_NODE&&n.classList.contains(e))return n;n=n.parentNode}return null}static rearrangeContentAfterSplit(e,t){const n=P.getCursorPosition(e),o=this.splitContentAtCursorSelection(e);if(document.getSelection()?.removeAllRanges(),document.getSelection()?.addRange(o[1]),document.getSelection()?.deleteFromDocument(),t&&n){this.setCursorPosition(t,n);const e=this.splitContentAtCursorSelection(t);document.getSelection()?.removeAllRanges(),document.getSelection()?.addRange(e[0]),document.getSelection()?.deleteFromDocument()}}static getCursorPosition(e){const t=window.getSelection();if(!t||!e)return null;const n=t.getRangeAt(0);if(!n.intersectsNode(e))return null;const o=document.createTreeWalker(e,NodeFilter.SHOW_TEXT,{acceptNode:e=>NodeFilter.FILTER_ACCEPT});let i=0,r=o.firstChild();for(;r;){if(r===n.startContainer){i+=n.startOffset;break}i+=r.textContent?.length||0,r=o.nextNode()}return i}static setCursorPosition(e,t){const n=window.getSelection();if(!n)return;n.removeAllRanges();const o=document.createRange(),i=document.createTreeWalker(e,NodeFilter.SHOW_TEXT,{acceptNode:()=>NodeFilter.FILTER_ACCEPT});let r=i.nextNode(),l=0;for(;r;){const e=r.textContent?.length||0;if(l+e>=t){o.setStart(r,t-l),o.collapse(!0);break}l+=e,r=i.nextNode()}n.addRange(o)}static getContentTypeFromActiveElement(){const e=P.getCurrentActiveBlock(),t=e?.querySelector(".johannes-content-element");return t&&t.getAttribute("data-content-type")||null}static splitContentAtCursorSelection(e){const t=[],n=window.getSelection();if(!n||0===n.rangeCount)return t;const o=n.getRangeAt(0),i=document.createRange();i.selectNodeContents(e),i.setEnd(o.startContainer,o.startOffset);const r=document.createRange();return r.selectNodeContents(e),r.setStart(o.endContainer,o.endOffset),e.lastChild&&r.setEndAfter(e.lastChild),t.push(i),t.push(r),t}static placeCursorAtStartOfEditableElement(e){setTimeout((()=>{if(e.isContentEditable){e.focus();const t=document.createRange();t.selectNodeContents(e),t.collapse(!0);const n=window.getSelection();n?.removeAllRanges(),n?.addRange(t)}else console.warn("The element is not editable.")}))}static placeCursorAtEndOfEditableElement(e){e.isContentEditable?requestAnimationFrame((()=>{e.focus();const t=document.createRange(),n=window.getSelection();t.selectNodeContents(e);let o=e;for(;o.lastChild;)o=o.lastChild;t.setEnd(o,o.nodeType===Node.TEXT_NODE?o.textContent.length:0),t.collapse(!1),n?.removeAllRanges(),n?.addRange(t)})):console.warn("The element is not editable.")}static getCurrentActiveBlock(){let e=document.activeElement;return e?e.closest(".block"):null}static isSelectedTextDescendantOf(e){const t=document.getSelection();if(!t)return!1;if(!t.rangeCount)return!1;let n=t.getRangeAt(0).startContainer;return n.nodeType===Node.TEXT_NODE&&(n=n.parentNode),!!n&&null!==n.closest(e)}static removeFilterText(){let e=null;const t=window.getSelection();if(t&&t.rangeCount>0){const n=t.getRangeAt(0),o=n.commonAncestorContainer;if(o.nodeType===Node.TEXT_NODE&&o.parentElement?.isContentEditable){let i=o,r=n.startOffset;for(;i&&r>0;){if(e=(i.textContent?.substring(0,r)||"").lastIndexOf("/"),-1!==e){n.setStart(i,e),n.deleteContents();break}r=i.parentNode?.textContent?.lastIndexOf("/")||-1,i=i.parentNode}t.removeAllRanges(),t.addRange(n)}else console.warn("The cursor is not within a contentEditable element or a text node.")}else console.warn("No active selection.");return e}static findClickedElementOrAncestorByDataContentType(e,t){let n=e.target;if(n.nodeType===Node.TEXT_NODE&&(n=n.parentElement),n.dataset.contentType===t)return n;let o=n.parentElement;for(;o;){if(o.dataset.contentType===t)return o;o=o.parentElement}return null}static findClickedElementOrAncestorById(e,t){let n=e.target;if(n.nodeType===Node.TEXT_NODE&&(n=n.parentElement),n.id===t)return n;let o=n.parentElement;for(;o;){if(o.id===t)return o;o=o.parentElement}return null}static findClickedElementOrAncestorByClass(e,t){let n=e.target;if(n.nodeType===Node.TEXT_NODE&&(n=n.parentElement),n.classList.contains(t))return n;let o=n.parentElement;for(;o;){if(o.classList.contains(t))return o;o=o.parentElement}return null}static isEventTargetDescendantOf(e,t){let n=e.target;if(!(e.target instanceof Element))return!1;for(;n&&n!==document.documentElement;){if(n.matches(t))return!0;n=n.parentElement}return!1}static getParentTargetBySelector(e,t){let n=e.target instanceof Element?e.target:e.target instanceof Node?e.target.parentElement:null;if(!n)return null;for(;n&&n!==document.documentElement;){if(n.matches(t))return n;n=n.parentElement}return null}static getParentFromSelection(e){const t=window.getSelection();if(!t||0===t.rangeCount)return null;let n=t.getRangeAt(0).commonAncestorContainer;if(n instanceof Element&&n.matches(e))return n;let o=n instanceof Element?n:n.parentElement;for(;o&&o!==document.documentElement;){if(o.matches(e))return o;o=o.parentElement}return null}static removeClassesWithPrefix(e,t){Array.from(e.classList).filter((e=>e.startsWith(t))).forEach((t=>e.classList.remove(t)))}static isTargetDescendantOfSelector(e,t){let n=null;return e.target instanceof HTMLElement?n=e.target:e.target instanceof Text&&(n=e.target.parentElement),!!n&&null!==n.closest(t)}static querySelectorIncludingSelf(e,t){return e.matches(t)?e:e.querySelector(t)}static sanitizeContentEditable(e){const t=e.innerHTML,n=window.getSelection();if(!n)return;let o=!1,i=0;if(n.rangeCount>0){const r=n.getRangeAt(0);r.endOffset===e.innerText.length&&t.endsWith("<br>")&&(o=!0,i=r.endOffset)}if(t.endsWith("<br>")){const t=e.lastChild;t&&"BR"===t.nodeName&&e.removeChild(t)}if(o){const t=new Range,o=this.getTextNodesIn(e);let r=0;for(const e of o){const n=e.length;if(r+n>=i){t.setStart(e,i-r),t.setEnd(e,i-r);break}r+=n}n.removeAllRanges(),n.addRange(t)}}static getTextNodesIn(e){let t=[];if(e.nodeType===Node.TEXT_NODE)t.push(e);else{const n=e.childNodes;for(let e=0;e<n.length;e++)t=t.concat(this.getTextNodesIn(n[e]))}return t}static getPreviousContentEditable(e){const t=Array.from(document.querySelectorAll('[contenteditable="true"]')),n=t.indexOf(e);return n>0?t[n-1]:null}static getNextContentEditable(e){const t=Array.from(document.querySelectorAll('[contenteditable="true"]')),n=t.indexOf(e);return n<t.length-1?t[n+1]:null}static getActiveContentEditable(){const e=document.activeElement;if(!e)return null;if(e instanceof HTMLElement&&e.isContentEditable)return e;let t=e.parentElement;for(;t;){if(t.isContentEditable)return t;t=t.parentElement}return P.findContentEditableInDescendants(e)}static findContentEditableInDescendants(e){if(e.isContentEditable)return e;for(let t=0;t<e.children.length;t++){const n=e.children[t],o=P.findContentEditableInDescendants(n);if(o)return o}return null}static saveCaretPosition2d(e){const t=window.getSelection();if(t&&t.rangeCount>0){const n=t.getRangeAt(0).getBoundingClientRect();return{charIndex:Array.from(e.textContent||"").slice(0,t.anchorOffset).length,horizontalPos:n.left}}return{charIndex:0,horizontalPos:0}}static restoreCaretPosition2d(e,t){setTimeout((()=>{const n=window.getSelection();if(!n)return;const o=document.createRange(),i=document.createTreeWalker(e,NodeFilter.SHOW_TEXT);let r=i.nextNode(),l=r,s=0,a=1/0;for(;r;)if(r.nodeValue){for(let e=0;e<=r.nodeValue.length;e++){o.setStart(r,e),o.collapse(!0);const n=o.getBoundingClientRect(),i=Math.abs(n.left-t.horizontalPos);if(i<a&&(a=i,l=r,s=e,i<5))break}r=i.nextNode()}l&&(o.setStart(l,s),o.collapse(!0),n.removeAllRanges(),n.addRange(o))}))}static saveCaretPosition3d(e){const t=window.getSelection();if(t&&t.rangeCount>0){const n=t.getRangeAt(0).getBoundingClientRect();return{charIndex:Array.from(e.textContent||"").slice(0,t.anchorOffset).length,horizontalPos:n.left,verticalPos:n.top}}return{charIndex:0,horizontalPos:0,verticalPos:0}}static restoreCaretPosition3d(e,t){setTimeout((()=>{const n=window.getSelection();if(!n)return;const o=document.createRange(),i=document.createTreeWalker(e,NodeFilter.SHOW_TEXT);let r=i.nextNode(),l=r,s=0,a=1/0;for(;r;)if(r.nodeValue){for(let e=0;e<=r.nodeValue.length;e++){o.setStart(r,e),o.collapse(!0);const n=o.getBoundingClientRect(),i=Math.abs(n.left-t.horizontalPos),c=Math.abs(n.top-t.verticalPos),d=Math.sqrt(i**2+c**2);if(d<a&&(a=d,l=r,s=e,d<5))break}r=i.nextNode()}l&&(o.setStart(l,s),o.collapse(!0),n.removeAllRanges(),n.addRange(o))}))}static mergeInlineElements(e){e.normalize();const t=e.childNodes;for(let n=0;n<t.length;n++)if(t[n].nodeType===Node.ELEMENT_NODE){const o=t[n];if(["SPAN","CODE","EM","STRONG","B","I"].includes(o.nodeName)){for(;n<t.length-1&&o.nextSibling&&o.nextSibling.nodeType===Node.ELEMENT_NODE&&o.nodeName===o.nextSibling.nodeName;){for(;o.nextSibling.childNodes.length>0;)o.appendChild(o.nextSibling.firstChild);e.removeChild(o.nextSibling)}P.mergeInlineElements(o)}}}}!function(e){e.floatingToolbarDisplayed="floatingToolbarDisplayed",e.anchorButtonClicked="anchorButtonClicked",e.boldButtonClicked="boldButtonClicked",e.italicButtonClicked="italicButtonClicked",e.underlineButtonClicked="underlineButtonClicked",e.inlineCodeButtonClicked="inlineCodeButtonClicked",e.strikeThroughButtonClicked="strikeThroughButtonClicked",e.hiliteColorButtonClicked="hiliteColorButtonClicked",e.foreColorButtonClicked="foreColorButtonClicked",e.buttonGroupItemClicked="buttonGroupItemClicked",e.focusOnFirstRequested="focusOnFirstRequested",e.pressedEnterOnTitle="pressedEnterOnTitle",e.transformBlockRequested="transformBlockRequested",e.duplicateBlockRequested="duplicateBlockRequested",e.anchor="anchor",e.bold="bold",e.italic="italic",e.underline="underline",e.inlineCode="inlineCode",e.strikeThrough="strikeThrough",e.hiliteColor="hiliteColor",e.foreColor="foreColor",e.textFormatChanged="textFormatChanged",e.emittedCommand="emittedCommand",e.blockTypeChanged="blockTypeChanged",e.blockDeleted="blockDeleted",e.blockCloned="blockCloned",e.tableCellChanged="tableCellChanged"}(c||(c={})),function(e){e.LowImportance="100",e.SlightlyImportant="200",e.Neutral="300",e.ModeratelyImportant="400",e.VeryImportant="500",e.ExtremelyImportant="600"}(d||(d={}));class F extends R{dropdowns;separators;currentSelectionRange;htmlFocusedElementBeforeOpenQuickMenu;constructor(e){super({id:e}),this.dropdowns=[],this.separators=[],this.currentSelectionRange=null,this.htmlFocusedElementBeforeOpenQuickMenu=null}init(){const e=document.createElement("div");e.id=this.props.id,e.style.display="none",e.classList.add("floating-toolbar","select-wrapper","soft-box-shadow"),e.style.zIndex=d.SlightlyImportant;const t=document.createElement("div");return e.appendChild(t),e}get display(){return"flex"}hide(){this.canHide&&(this.anyDropdownVisible()&&this.hideAllDropdownVisible(),this.currentSelectionRange=null,super.hide())}appendDropdown(e){this.dropdowns.push(e),this.htmlElement.appendChild(e.htmlElement)}appendButtonGroup(e){this.htmlElement.appendChild(e.htmlElement)}appendSeparator(e){this.separators.push(e),this.htmlElement.appendChild(e.htmlElement)}appendTextToolbar(e){this.htmlElement.appendChild(e.htmlElement)}anyDropdownVisible(){for(const e of this.dropdowns)if(e.dropdownList.isVisible)return!0;return!1}hideAllDropdownVisible(){for(const e of this.dropdowns)e.dropdownList.canHide&&e.dropdownList.hide();return!1}attachEvents(){this.htmlElement.addEventListener(a.Click,(e=>{e.preventDefault()})),this.htmlElement.addEventListener(a.Mousedown,(e=>{e.preventDefault()})),document.addEventListener("showInputLinkBoxRequested",(()=>{this.canHide=!1})),document.addEventListener("showInputLinkBoxFinished",(()=>{this.canHide=!0,this.restoreRangeSelection()})),document.addEventListener(c.blockDeleted,(()=>{this.hide()})),document.addEventListener(c.blockTypeChanged,(()=>{this.hide()}))}isSelectionEmpty(){const e=document.getSelection();return!e||0===e.rangeCount||""===e.toString().trim()}restoreRangeSelection(){document.getSelection()?.removeAllRanges(),document.getSelection()?.addRange(this.currentSelectionRange)}}!function(e){e.HiliteColorRed="#FDDEDE",e.HiliteColorGreen="#D7F7DC",e.HiliteColorBlue="#D9EDF6",e.HiliteColorYellow="#FAF4D1",e.HiliteColorGrey="#E1E0E0",e.HiliteColorNone="transparent",e.ForeColorRed="#D44C47",e.ForeColorGreen="#448361",e.ForeColorBlue="#337EA9",e.ForeColorYellow="#CB912F",e.ForeColorGrey="#787774",e.ForeColorInitial="initial",e.BackgroundColorRed="#FDDEDE",e.BackgroundColorGreen="#D7F7DC",e.BackgroundColorBlue="#D9EDF6",e.BackgroundColorYellow="#FAF4D1",e.BackgroundColorGrey="#E1E0E0",e.BackgroundColorNone="transparent",e.IconActiveBlue="#2382e2",e.IconDefaultBlack="rgba(55, 53, 47, 0.85)",e.Red="red",e.Tomato="#EB5757",e.OriginalTableColor="#84888d"}(u||(u={})),function(e){e.CalloutBackgroundRed="callout-background-red",e.CalloutBackgroundGreen="callout-background-green",e.CalloutBackgroundBlue="callout-background-blue",e.CalloutBackgroundYellow="callout-background-yellow",e.CalloutBackgroundGrey="callout-background-grey",e.CalloutBackgroundNone="callout-background-none"}(m||(m={})),function(e){e.toggleBold="bold",e.toggleItalic="italic",e.toggleHiliteColor="hiliteColor",e.changeCalloutBackgroundColor="changeCalloutBackgroundColor",e.toggleForeColor="foreColor",e.toggleInlineCode="inlineCode",e.toggleLink="createLink",e.linkReadyToInsert="linkReadyToInsert",e.toggleUnderline="underline",e.toggleStrikeThrough="strikeThrough",e.removeFormat="removeFormat",e.copySelected="copySelected",e.cutSelected="cutSelected",e.past="past",e.transformBlock="transformBlock",e.duplicateBlock="duplicateBlock",e.deleteBlock="deleteBlock",e.createDefaultBlock="createDefaultBlock",e.focusOnNextBlock="focusOnNextBlock",e.focusOnPreviousBlock="focusOnPreviousBlock",e.mergeWithPreviousBlock="mergeWithPreviousBlock",e.mergeWithNextBlock="mergeWithNextBlock",e.focusOnFirstBlock="focusOnFirstBlock",e.deleteBlockAndFocusOnPrevious="deleteBlockAndFocusOnPrevious",e.deleteBlockAndFocusOnNext="deleteBlockAndFocusOnNext",e.JustifyLeft="justifyLeft",e.JustifyCenter="justifyCenter",e.JustifyRight="justifyRight",e.insertNew="insertNew",e.insertTableRowAbove="insertTableRowAbove",e.insertTableRowBelow="insertTableRowBelow",e.insertTableColumnLeft="insertTableColumnLeft",e.insertTableColumnRight="insertTableColumnRight",e.showInsertTableColumnElement="showInsertTableColumnElement",e.showInsertTableRowElement="showInsertTableRowElement",e.hideInsertTableColumnElement="hideInsertTableColumnElement",e.hideInsertTableRowElement="hideInsertTableRowElement",e.toggleCellHiliteColor="toggleCellHiliteColor",e.removeColumn="removeColumn",e.removeRow="removeRow",e.changeTableBorderColor="changeTableBorderColor",e.changeCodeBlockLanguage="changeCodeBlockLanguage"}(h||(h={}));class V{color;constructor(e){this.color=e}}class _{classKey;value;intention;constructor(e,t,n){this.classKey=e,this.value=t,this.intention=n}}class j{classKey;constructor(e){this.classKey=e}}class z{}class Y{}class U{language;blockId;constructor(e,t){this.blockId=e,this.language=t}}class G{static emitCodeBlockLanguageChangedEvent(e,t,n){const o=new CustomEvent(s.ChangeBlockToolbarLanguage,{detail:{targetClass:e,action:new U(t,n)}});document.dispatchEvent(o)}static emitShowElementEvent(e){const t=new CustomEvent(s.ShowElement,{detail:{targetId:e,action:new Y}});document.dispatchEvent(t)}static emitCloseElementEvent(e){const t=new CustomEvent(s.CloseElement,{detail:{targetId:e,action:new z}});document.dispatchEvent(t)}static emitChangeComponentColorEvent(e,t){const n=new CustomEvent(s.ColorChangeRequest,{detail:{targetId:e,action:new V(t)}});document.dispatchEvent(n)}static emitShowHideActiveElementEvent(e,t,n){"hiliteColor"==e&&t==u.HiliteColorNone&&(n="hide"),"foreColor"==e&&t==u.ForeColorInitial&&(n="hide"),"backgroundColor"==e&&t==u.BackgroundColorNone&&(n="hide");const o=new CustomEvent(s.ShowHideActiveButton,{detail:{targetClass:e,action:new _(e,t,n)}});document.dispatchEvent(o)}static emitResetActiveButtonsElementEvent(e){const t=new CustomEvent(s.ResetActiveButtons,{detail:{targetClass:e,action:new j(e)}});document.dispatchEvent(t)}static emitChangeTableBorderColorEvent(e,t){const n=new CustomEvent(c.emittedCommand,{detail:{command:h.changeTableBorderColor,value:t,scope:e}});document.dispatchEvent(n)}}!function(e){e.Link="linkButton",e.Bold="boldButton",e.Italic="italicButton",e.Underline="underlineButton",e.InlineCode="inlineCodeButton",e.Strikethrough="strikethroughButton",e.AlignLeft="alignLeft",e.AlignCenter="alignCenter",e.AlignRight="alignRight"}(p||(p={})),function(e){e.Shift="Shift",e.Enter="Enter",e.Escape="Escape",e.Backspace="Backspace",e.Control="Control",e.Space=" ",e.Delete="Delete"}(A||(A={}));class K extends F{static id="textFloatingToolbar";static instance;textOperationsService;initialRect=null;lockedHide=!1;debounceTimer=null;constructor(e){if(K.instance)throw new Error("Use TextContextFloatingToolbar.getInstance() to get instance.");super(K.id),this.htmlElement.style.zIndex=d.VeryImportant,this.textOperationsService=e,this.attachEvents()}static getInstance(){const e=D.Instance.resolve("ITextOperationsService");return K.instance||(K.instance=new K(e)),K.instance}processSelectionChangeEffects(){setTimeout((()=>{G.emitResetActiveButtonsElementEvent("hiliteColor"),G.emitResetActiveButtonsElementEvent("foreColor");const e=this.textOperationsService.queryCommandState("createLink"),t=this.textOperationsService.queryCommandState("bold"),n=this.textOperationsService.queryCommandState("italic"),o=this.textOperationsService.queryCommandState("underline"),i=this.textOperationsService.queryCommandState("inlineCode"),r=this.textOperationsService.queryCommandState("strikeThrough"),l={};l[u.HiliteColorRed]=this.textOperationsService.queryHiliteColor(u.HiliteColorRed),l[u.HiliteColorGreen]=this.textOperationsService.queryHiliteColor(u.HiliteColorGreen),l[u.HiliteColorBlue]=this.textOperationsService.queryHiliteColor(u.HiliteColorBlue),l[u.HiliteColorYellow]=this.textOperationsService.queryHiliteColor(u.HiliteColorYellow),l[u.HiliteColorGrey]=this.textOperationsService.queryHiliteColor(u.HiliteColorGrey);const s={};s[u.ForeColorRed]=this.textOperationsService.queryForeColor(u.ForeColorRed),s[u.ForeColorGreen]=this.textOperationsService.queryForeColor(u.ForeColorGreen),s[u.ForeColorBlue]=this.textOperationsService.queryForeColor(u.ForeColorBlue),s[u.ForeColorYellow]=this.textOperationsService.queryForeColor(u.ForeColorYellow),s[u.ForeColorGrey]=this.textOperationsService.queryForeColor(u.ForeColorGrey),Object.entries(l).forEach((([e,t])=>{t&&G.emitShowHideActiveElementEvent("hiliteColor",e,"show")})),Object.entries(s).forEach((([e,t])=>{t&&G.emitShowHideActiveElementEvent("foreColor",e,"show")})),this.emitChangeComponentColorEvent(e,p.Link),this.emitChangeComponentColorEvent(t,p.Bold),this.emitChangeComponentColorEvent(n,p.Italic),this.emitChangeComponentColorEvent(i,p.InlineCode),this.emitChangeComponentColorEvent(o,p.Underline),this.emitChangeComponentColorEvent(r,p.Strikethrough)}),20)}emitChangeComponentColorEvent(e,t){e?G.emitChangeComponentColorEvent(t,u.IconActiveBlue):G.emitChangeComponentColorEvent(t,u.IconDefaultBlack)}logSelectionChange(e){const t=document.getSelection();t&&!t.isCollapsed&&(this.processSelectionChangeEffects(),console.log("passou no log selection"))}attachEvents(){let e,t=!1;this.htmlElement.addEventListener(a.Mouseup,(e=>{e.preventDefault()})),document.addEventListener(a.Mouseup,this.logSelectionChange.bind(this)),document.addEventListener(a.BblClick,this.logSelectionChange.bind(this)),document.addEventListener(a.SelectionChange,this.logSelectionChange.bind(this)),document.addEventListener(a.Keydown,(e=>{e.shiftKey&&(t=!0)})),document.addEventListener(a.Keyup,(e=>{e.key===A.Shift&&(t=!1,this.showHide(e,t))})),document.addEventListener(a.Mousedown,(()=>{t=!0})),document.addEventListener(a.Mouseup,(n=>{t=!1,this.showHide(n,t),clearTimeout(e),e=setTimeout((()=>{t=!1,this.showHide(n,t)}),100)})),document.addEventListener(a.SelectionChange,(e=>{this.showHide(e,t)})),document.addEventListener(a.Keydown,(e=>{setTimeout((()=>{this.canHide&&e.key===A.Escape&&!this.lockedHide&&(this.anyDropdownVisible()?this.hideAllDropdownVisible():this.hide())}),10)})),super.attachEvents()}shouldUpdatePosition(){const e=window.getSelection();if(!e||0===e.rangeCount)return!1;const t=e.getRangeAt(0).getBoundingClientRect();return!this.initialRect||(Math.abs(t.left-this.initialRect.left)>10||Math.abs(t.top-this.initialRect.top)>10)}showHide(e,t){const n=this.hasSelection();if(!n){if(this.lockedHide)return;return this.hide(),void(this.initialRect=null)}if(n&&!t)if(this.isVisible){if(this.shouldUpdatePosition()&&(P.isSelectedTextDescendantOf(".gist")||P.isSelectedTextDescendantOf(".gist")))return}else{if(P.isSelectedTextDescendantOf(".ignore-text-floating-toolbar")||P.isSelectedTextDescendantOf(".gist"))return;this.show()}}hasSelection(){const e=window.getSelection();return!!(e&&e.rangeCount>0&&""!==e.toString().trim())}changeToolbarPositionToBeClosedToSelection(){const e=window.getSelection();if(!e||0===e.rangeCount)return void console.error("No selection found");this.currentSelectionRange=e.getRangeAt(0);const t=this.currentSelectionRange.getClientRects();if(0===t.length)return void console.error("No rects found");const n=t[0],o=n.left,i=n.top,r=n.bottom;this.htmlElement.style.display="flex";const l=this.htmlElement.offsetWidth;let s=o+window.scrollX-50;s+l>window.innerWidth&&(s=window.innerWidth-l-20);const a=this.htmlElement.offsetHeight;let c=i+window.scrollY-a-10;c<0&&(c=r+window.scrollY+10),this.htmlElement.style.left=`${s}px`,this.htmlElement.style.top=`${c}px`}show(){const e=window.getSelection();e&&0!==e.rangeCount?P.findClosestAncestorOfActiveElementByClass("title")||(this.changeToolbarPositionToBeClosedToSelection(),this.hideTurnIntoDropdownIfInCell()):console.error("No selection found")}hideTurnIntoDropdownIfInCell(){const e=P.isSelectionInTableCell();this.dropdowns.forEach((t=>{"turnIntoMenu"==t.id&&(t.htmlElement.style.display=e?"none":this.display)})),this.separators.forEach((t=>{"turnIntoSeparator"==t.id&&(t.htmlElement.style.display=e?"none":this.display)}))}updatePosition(){const e=window.getSelection();if(e&&e.rangeCount>0){const t=e.getRangeAt(0).getBoundingClientRect();this.setPosition(t)}}setPosition(e){const t=this.htmlElement.offsetWidth;let n=e.left+window.scrollX-50;n+t>window.innerWidth&&(n=window.innerWidth-t-20);const o=this.htmlElement.offsetHeight;let i=e.top+window.scrollY-o-10;i<0&&(i=e.bottom+window.scrollY+10),this.htmlElement.style.left=`${n}px`,this.htmlElement.style.top=`${i}px`}hide(){this.canHide&&(this.currentSelectionRange=null,super.hide())}lockHide(){this.lockedHide=!0}unlockHide(){this.lockedHide=!1}}class Z extends R{parentWrapper;constructor(){super({})}init(){const e=document.createElement("input");return e.id="linkBoxInput",e.type="url",e.placeholder="Paste or type a link...",e.style.position="relative",e}setParentWrapper(e){this.parentWrapper=e}}class W extends R{inputLinkBox;highlights=[];button;textContextFloatingToolbar;constructor(){const e=new Z,t=document.createElement("button");super({inputLinkBox:e,button:t}),this.id="linkBox",this.inputLinkBox=e,this.button=t,e.setParentWrapper(this),this.textContextFloatingToolbar=K.getInstance(),this.attachEvent()}init(){const e=document.createElement("div");e.id="linkBox",e.style.display="none",e.classList.add("dependent-box","soft-box-shadow"),e.style.position="absolute";const t=document.createElement("div");t.classList.add("header"),t.innerText="Link";const n=document.createElement("div");return n.appendChild(this.props.inputLinkBox.htmlElement),n.classList.add("link-box-shell"),this.props.button.classList.add("blue-button"),this.props.button.innerHTML="Embed",n.appendChild(this.props.button),e.appendChild(t),e.appendChild(n),e}attachEvent(){document.addEventListener(a.Keydown,(e=>{this.canHide&&"Escape"===e.key&&(e.stopImmediatePropagation(),this.hide())}),!0),document.addEventListener(a.Keydown,(function(e){e.key===A.Control&&document.body.classList.add("ctrl-active")})),document.addEventListener(a.Keyup,(function(e){e.key===A.Control&&document.body.classList.remove("ctrl-active")})),this.inputLinkBox.htmlElement.addEventListener(a.Keydown,(e=>{e.key==A.Enter&&this.insertLink(e)})),document.addEventListener(a.Click,(e=>{if(e.ctrlKey){const t=e.target;if("A"===t.tagName&&t.getAttribute("href")){const e=t.getAttribute("href");return void window.open(e,"_blank")}}!this.canHide||e.target.closest("#linkBox")||e.target.closest("#textFloatingToolbar")||this.hide()})),this.button.addEventListener(a.Click,this.insertLink.bind(this)),super.attachUIEvent()}handleShowElementEvent(e){const t=e.detail;t.targetId!=this.id||this.isVisible?t.targetId==this.id&&this.isVisible&&(e.stopImmediatePropagation(),this.hide()):(e.stopImmediatePropagation(),this.show())}insertLink(e){e.preventDefault(),e.stopImmediatePropagation();const t=this.inputLinkBox.htmlElement.value,n=t.startsWith("http://")||t.startsWith("https://")?t:`https://${t}`;if(this.isValidUrl(n))this.hide(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.linkReadyToInsert,value:n}}));else{const e=this.inputLinkBox.htmlElement;e.style.backgroundColor="rgb(253, 222, 222)",e.classList.add("shake-animation"),setTimeout((()=>{e.classList.remove("shake-animation")}),1e3)}}show(){this.inputLinkBox.htmlElement.style.backgroundColor="white",this.textContextFloatingToolbar.lockHide();const e=document.getSelection()?.getRangeAt(0);e&&(this.positionLinkComponentBelowSelection(e),this.highlightSelectedText(e),super.show())}positionLinkComponentBelowSelection(e){const t=e.getClientRects();if(0===t.length)return void console.error("No rects found");const n=t[0],o=n.left,i=n.top,r=n.bottom;this.htmlElement.style.display="flex";const l=this.htmlElement.offsetWidth;let s=o+window.scrollX-50;s+l>window.innerWidth&&(s=window.innerWidth-l-20),this.htmlElement.offsetHeight;let a=i+window.scrollY+40;a<0&&(a=r+window.scrollY+10),this.htmlElement.style.left=`${s}px`,this.htmlElement.style.top=`${a}px`}hide(){this.textContextFloatingToolbar.unlockHide(),super.hide(),this.removeHighlights(),this.inputLinkBox.htmlElement.value="";const e=this.textContextFloatingToolbar.currentSelectionRange;e&&(document.getSelection()?.removeAllRanges(),document.getSelection()?.addRange(e))}highlightSelectedText(e){const t=e.getClientRects();for(let e=0;e<t.length;e++){const n=t[e],o=document.createElement("div");o.style.position="absolute",o.style.width=`${n.width}px`,o.style.height=`${n.height}px`,o.style.backgroundColor="#c2c2c2",o.style.opacity="0.3",document.body.appendChild(o),this.highlights.push(o),o.style.backgroundColor="rgba(0, 120, 215, 0.3)",o.style.pointerEvents="none",o.style.zIndex="1000",o.style.left=`${n.left+window.scrollX}px`,o.style.top=`${n.top+window.scrollY}px`}}removeHighlights(){this.highlights.forEach((e=>{document.body.removeChild(e)})),this.highlights=[]}isValidUrl(e){return!!new RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*)?$","i").test(e)}}class $ extends R{elementFactoryService;static editorId="johannesEditor";static instance;memento;title;content;addBlock;textFloatingToolbar;quickMenu;tableContextToolbar;mediaInputter;inputLinkBoxWrapper;constructor(e,t,n,o,i,r,l,s,a,c,d){if(super({elementFactoryService:e,blockOperationsService:t,title:o,content:i,addBlock:r,floatingToolbar:l,quickMenu:s,tableToolbar:a,mediaInputter:c,inputLinkBoxWrapper:d}),$.instance)throw new Error("Use BlockOperationsService.getInstance() to get instance.");this.inputLinkBoxWrapper=d,this.elementFactoryService=e,this.memento=n,this.addBlock=r,this.textFloatingToolbar=l,this.quickMenu=s,this.tableContextToolbar=a,this.mediaInputter=c,this.attachEvents(),$.instance=this,this.memento.saveState()}init(){const e=document.getElementById($.editorId)||document.createElement("div");e.classList.add("johannes-editor");const t=document.createElement("div");return t.classList.add("content-wrapper"),window.editorConfig,t.appendChild(this.props.title.htmlElement),t.appendChild(this.props.content.htmlElement),e.appendChild(t),window.editorConfig,e.appendChild(this.props.addBlock.htmlElement),window.editorConfig,e.appendChild(this.props.floatingToolbar.htmlElement),window.editorConfig,e.appendChild(this.props.quickMenu.htmlElement),e.appendChild(this.props.tableToolbar.htmlElement),e.appendChild(this.props.mediaInputter.htmlElement),e.appendChild(this.props.inputLinkBoxWrapper.htmlElement),e}static getInstance(e,t,n,o,i,r,l){const s=D.Instance.resolve("IElementFactoryService"),a=D.Instance.resolve("IBlockOperationsService"),c=D.Instance.resolve("IMemento"),d=new W;return $.instance||($.instance=new $(s,a,c,e,t,n,o,i,r,l,d)),$.instance}attachEvents(){const e=document.getElementById($.editorId);if(e?.addEventListener("mouseover",(e=>{const t=e.target;if(t instanceof Node){let e=t;if(e.nodeType===Node.TEXT_NODE&&(e=e.parentElement),e instanceof Element){const t=e.closest(".block");t&&this.appendDragHandler(t)}else console.error("Event target is not an HTMLElement and cannot handle HTMLElement specific methods:",e)}else console.error("Event target is not a Node:",t)})),"loading"===document.readyState)document.addEventListener("DOMContentLoaded",(()=>{const e=document.querySelector("#johannesEditor > .content .block p");e&&e.focus()}));else{const e=document.querySelector("#johannesEditor > .content .block p");e&&e.focus()}document.addEventListener("paste",(function(e){if("true"===e.target.getAttribute("contenteditable")){e.preventDefault();const t=e.clipboardData;if(t){const e=t.getData("text/plain");$.insertTextAtCursor(e)}}}),!0),this.attachDragHandler()}static insertTextAtCursor(e){const t=window.getSelection();if(t&&t.rangeCount>0){const n=t.getRangeAt(0);n.deleteContents();const o=document.createTextNode(e);n.insertNode(o),n.setStartAfter(o),n.setEndAfter(o),t.removeAllRanges(),t.addRange(n)}}appendDragHandler(e){if(e.nodeType===Node.TEXT_NODE&&(e=e.parentNode),!(e instanceof HTMLElement))return void console.error("Provided element is not an HTMLElement:",e);const t=e.closest(".block");let n=t?.querySelector(".drag-handler");!n&&t&&(n=this.elementFactoryService.create(O.ELEMENT_TYPES.DRAG_HANDLE_BUTTON),t.prepend(n))}removeDragHandler(e){if(e.nodeType===Node.TEXT_NODE&&(e=e.parentNode),!(e instanceof HTMLElement))return void console.error("Provided element is not an HTMLElement:",e);const t=e.closest(".block");if(t){const e=t.querySelector(".drag-handler");e?.remove()}}extractContent(){throw new Error("Not implemented Exception")}attachDragHandler(){let e=null,t=document.createElement("div");t.classList.add("drop-line"),t.style.height="2px",t.style.display="none",this.htmlElement.addEventListener("dragstart",(t=>{t.target?.classList?.contains("drag-handler")&&(e=t.target?.closest(".block"),e.setAttribute("draggable","true"),setTimeout((()=>{e.style.opacity="0.5"}),0))})),this.htmlElement.addEventListener("dragend",(()=>{setTimeout((()=>{e&&(e.style.opacity="",e.removeAttribute("draggable"),e=null),t.remove()}),0)})),this.htmlElement.addEventListener("dragover",(n=>{n.preventDefault();let o=n.target?.closest(".block");if(o&&o!==e){let e=o.getBoundingClientRect(),i=e.y+e.height/2;n.clientY>i?o.nextElementSibling!==t&&o.insertAdjacentElement("afterend",t):o.previousElementSibling!==t&&o.insertAdjacentElement("beforebegin",t)}t.style.display="block"})),this.htmlElement.addEventListener("drop",(n=>{n.preventDefault(),e&&t&&t.parentElement&&(t.parentElement.insertBefore(e,t),t.remove())}))}}class Q extends R{blockOperationsService;icon;constructor(e,t){super({icon:t}),this.blockOperationsService=e,this.icon=t,this.attachEvents()}init(){const e=document.createElement("button");return e.title="Add a new block",e.classList.add("add-block","block-operation","pointer"),e.appendChild(this.props.icon.htmlElement),e}attachEvents(){this.htmlElement.addEventListener("click",(()=>{this.blockOperationsService.execCommand(h.createDefaultBlock,!1)}))}static create(e){const t=D.Instance.resolve("IBlockOperationsService");return new Q(t,e)}}class X extends R{button;constructor(e){super({button:e}),this.button=e}init(){const e=document.createElement("div");return e.classList.add("add-block-wrapper"),e.appendChild(this.props.button.htmlElement),e}static create(e){return new X(e)}}class J{static medium="1rem";static large="1.25rem"}class ee extends R{useElement;constructor(e,t){super({iconId:e,size:t}),this.useElement=this.htmlElement.querySelector("use")}init(){const e=document.createElementNS("http://www.w3.org/2000/svg","svg");e.style.color="red !important";let t=document.createElementNS("http://www.w3.org/2000/svg","use");return t.setAttributeNS("http://www.w3.org/1999/xlink","href",`#${this.props.iconId}`),t.style.color="red !important",e.appendChild(t),e.setAttribute("width",this.props.size),e.setAttribute("height",this.props.size),e.setAttribute("fill","currentColor"),e}clone(){return new ee(this.props.iconId,this.props.sizes)}setUseTo(e){this.useElement.setAttributeNS("http://www.w3.org/1999/xlink","href",`#${e}`)}static create(e,t){return new ee(e,t)}}class te{static build(){return X.create(Q.create(ee.create(i.Plus,J.medium)))}}class ne extends R{id;dropdownButton;dropdownList;constructor(e,t,n){super({id:e}),this.id=e,this.dropdownButton=t,this.dropdownList=n,t.appendTo(this),n.appendTo(this)}init(){const e=document.createElement("div");return e.id=this.props.id,e.classList.add("select-wrapper"),e}get display(){return"block"}static create(e,t,n,o=[]){const i=new ne(e+H.generateUniqueId(),t,n);return i.addCssClass(...o),i}}class oe{head=null;tail=null;length=0;getFirst(){return this.head}getLast(){return this.tail}*[Symbol.iterator](){let e=this.head;if(e)do{yield e,e=e.nextNode}while(e&&e!==this.head)}forEach(e){let t=0;for(let n of this)e(n.value,t,this),t++}any(e){let t=this.head;for(;t;){if(e(t.value))return!0;if(t=t.nextNode,t===this.head)break}return!1}findFirst(e){if(!this.head)return null;let t=this.head;do{if(e(t.value))return t;t=t.nextNode}while(t&&t!==this.head);return null}findLast(e){if(!this.tail)return null;let t=this.tail;do{if(e(t.value))return t;t=t.previousNode}while(t&&t!==this.tail);return null}find(e){let t=this.head;for(;t;){if(t.value==e)return t;if(t=t.nextNode,t===this.head)break}return null}}class ie{parentList;previousNode;nextNode;value;constructor(e,t){this.previousNode=null,this.nextNode=null,this.value=e,this.parentList=t}setNext(e){this.nextNode=e}setPrevious(e){this.previousNode=e}getNextSatisfying(e){let t=this.nextNode;const n=this;for(;t;){if(e(t.value))return t;if(t=t.nextNode,t===n)break}return null}getPreviousSatisfying(e){let t=this.previousNode;const n=this;for(;t&&t!==n;){if(e(t.value))return t;if(t=t.previousNode,t===this)break}return null}}class re extends oe{constructor(){super()}append(e){const t=new ie(e,this);this.head&&this.tail?(t.setPrevious(this.tail),t.setNext(this.head),this.tail.setNext(t),this.head.setPrevious(t),this.tail=t):(this.head=t,this.tail=t,this.head.setNext(this.tail),this.head.setPrevious(this.tail)),this.length++}}class le extends R{id;command;value;activeIcon;leftIcon;title;onFocusFunctionList=[];onLoseFocusFunctionList=[];parentDropdownMenuList;constructor(e,t,n,o,i,r,l=null){const s=["list-item","option","option-hover","block-operation","no-list-style","no-selection"],a=new ee("icon-material-small-check",J.medium);a.htmlElement.style.visibility="hidden",o&&i&&(i.style.color=o),super({id:e,classList:s,leftIcon:i,title:r,icon:a,shortcut:l}),this.id=e,this.classList=s,this.leftIcon=i,this.command=n,this.value=o,this.title=r,this.parentDropdownMenuList=t,this.activeIcon=a,this.attachEvents()}addClass(e){this.classList.push(e),this.htmlElement.classList.add(e)}attachOnFocus(e,...t){this.onFocusFunctionList.push((()=>e(...t)))}attachOnLoseFocus(e,...t){this.onLoseFocusFunctionList.push((()=>e(...t)))}get display(){return"flex"}focus(){this.htmlElement.classList.add("option-focused"),this.onFocusFunctionList.forEach((e=>e()))}removeFocus(){this.htmlElement.classList.remove("option-focused"),this.onLoseFocusFunctionList.forEach((e=>e()))}init(){const e=document.createElement("li");e.id=this.props.id;const t=this.props.classList;e.classList.add("pointer",...t),e.tabIndex=2,e.style.color="#37352F";const n=document.createElement("div");n.classList.add("text-option"),this.props.leftIcon&&n.appendChild(this.props.leftIcon);const o=document.createElement("span");if(o.innerText=this.props.title,n.appendChild(o),e.appendChild(n),e.appendChild(this.props.icon.htmlElement),this.props.shortcut){const t=document.createElement("span");t.innerText=this.props.shortcut,t.style.color="rgba(55, 53, 47, 0.5)",e.appendChild(t)}return e}emitCommandEvent(e){const t=new CustomEvent(c.emittedCommand,{detail:{command:this.command,value:this.value,block:P.getParentFromSelection(".block")||P.getParentTargetBySelector(e,".block")}});document.dispatchEvent(t)}attachEvents(){this.attachUIEvent(),this.htmlElement.addEventListener(a.Click,(e=>{e.preventDefault()})),this.htmlElement.addEventListener(a.Mousedown,(e=>{e.preventDefault()})),this.htmlElement.addEventListener(a.Mousemove,(async()=>{const e=this.parentDropdownMenuList.dropdownItems.find(this);this.parentDropdownMenuList.switchVisualFocus(e)})),this.htmlElement.addEventListener(a.Click,(e=>{e.preventDefault(),e.stopImmediatePropagation(),this.emitCommandEvent(e)})),document.addEventListener(s.ChangeBlockToolbarLanguage,this.handleChangeBlockToolbarLanguageEvent.bind(this))}handleChangeBlockToolbarLanguageEvent(e){const t=e.detail;if(t.targetClass&&t.targetClass.includes("code-block-language-menu")){const e=t.action;this.htmlElement.closest(`#${e.blockId}`)&&(this.value==e.language?this.activeIcon?.changeVisibilityToVisible():this.activeIcon?.changeVisibilityToHidden())}}attachUIEvent(){document.addEventListener(s.ShowHideActiveButton,this.handleShowHideActiveButtonEvent.bind(this)),document.addEventListener(s.ResetActiveButtons,this.handleResetActiveButtonsEvent.bind(this))}handleShowHideActiveButtonEvent(e){const t=e.detail;if(this.classList?.includes(t.targetClass)){const e=t.action,n=e.value;this.value?.toLowerCase()==n.toLowerCase()&&"show"==e.intention&&this.activeIcon?.changeVisibilityToVisible()}}handleResetActiveButtonsEvent(e){const t=e.detail;this.classList?.includes(t.targetClass)&&this.activeIcon?.changeVisibilityToHidden()}}class se extends R{parentDropdownParentButton;dropdownItems;currentFocusedMenuItem;filter="";constructor(e){super({id:e}),this.id=e,this.dropdownItems=new re,this.currentFocusedMenuItem=null,this.attachEvents()}get display(){return"flex"}init(){const e=document.createElement("ul");return e.id=this.props.id,e.setAttribute("name","block-type"),e.style.display="none",e.classList.add("soft-box-shadow","dependent-box","checkable-items"),e.style.position="absolute",e.style.maxHeight="25vmax",e.style.overflowY="auto",e.style.zIndex=d.ExtremelyImportant,e}append(e){this.dropdownItems.append(e),this.htmlElement.appendChild(e.htmlElement)}setParentDropdownMenuButton(e){this.parentDropdownParentButton=e}attachEvents(){document.addEventListener(a.Keydown,(e=>{this.isVisible&&this.currentFocusedMenuItem&&"Enter"===e.key&&(e.stopImmediatePropagation(),e.preventDefault(),this.currentFocusedMenuItem.value.emitCommandEvent(e))}),!0),document.addEventListener(a.Click,(e=>{this.clickedOutsideTheDropdownWhileDropdownIsVisible(e)&&this.hide()})),document.addEventListener(a.Keydown,(e=>{this.keyPressedOutsideTheDropdownWhileDropdownIsVisible(e)&&("ArrowDown"==e.key&&(e.preventDefault(),this.focusNextVisibleItem()),"ArrowUp"==e.key&&(e.preventDefault(),this.focusPreviousVisibleItem()),e.key!=A.Escape||this.htmlElement.closest(".floating-toolbar")||(e.stopImmediatePropagation(),e.preventDefault(),this.hide()))})),document.addEventListener(a.Keydown,this.handlerKeyDownEvent.bind(this)),document.addEventListener(c.blockCloned,(()=>{this.hide()})),this.attachUIEvent()}handlerKeyDownEvent(e){this.isVisible&&/^[a-zA-Z]$/.test(e.key)?(this.filter+=e.key,this.applyFilter()):this.isVisible&&e.key===A.Backspace&&(this.filter=this.filter.slice(0,-1),this.applyFilter())}applyFilter(){this.dropdownItems.forEach((e=>{""==e.value||e.value?.toLocaleLowerCase().includes(this.filter.toLocaleLowerCase())||e.title?.toLocaleLowerCase().includes(this.filter.toLocaleLowerCase())?e.show():e.hide()}))}show(){this.filter="",this.htmlElement.style.left="0",this.htmlElement.style.right="auto",this.doesElementOverflowScreen&&(this.htmlElement.style.left="auto",this.htmlElement.style.right="0"),this.parentDropdownParentButton?.svgIcon?.setUseTo("icon-wordpress-chevron-up"),this.applyFilter(),super.show()}hide(){this.parentDropdownParentButton?.svgIcon?.setUseTo("icon-wordpress-chevron-down"),this.currentFocusedMenuItem?.value.removeFocus(),this.currentFocusedMenuItem=null,super.hide()}switchVisualFocus(e){this.currentFocusedMenuItem!=e&&(this.currentFocusedMenuItem&&this.currentFocusedMenuItem.value.removeFocus(),this.currentFocusedMenuItem=e,this.currentFocusedMenuItem.value.focus())}focusNextVisibleItem(){let e;e=this.currentFocusedMenuItem?this.currentFocusedMenuItem.getNextSatisfying((e=>e instanceof le&&e.isVisible)):this.dropdownItems.findFirst((e=>e instanceof le)),this.switchVisualFocus(e),e?.value.ensureVisible()}focusPreviousVisibleItem(){let e;e=this.currentFocusedMenuItem?this.currentFocusedMenuItem.getPreviousSatisfying((e=>e instanceof le&&e.isVisible)):this.dropdownItems.findFirst((e=>e instanceof le)),this.switchVisualFocus(e),e?.value.ensureVisible()}clickedOutsideTheDropdownWhileDropdownIsVisible(e){return this.canHide&&!e.target.closest(`#${this.htmlElement.id}`)&&!e.target.closest(`#${this.parentDropdownParentButton?.htmlElement.id}`)}keyPressedOutsideTheDropdownWhileDropdownIsVisible(e){return this.canHide&&!e.target.closest(`#${this.htmlElement.id}`)}static create(e,t=[]){const n=new se(e+H.generateUniqueId());return n.addCssClass(...t),n}}class ae extends R{id;constructor(e){super({id:e}),this.id=e}init(){const e=document.createElement("div");return e.id=this.props.id,e.style.height="24px",e.style.width="1px",e.style.borderRight="1px solid #d0d0d0",e.style.margin="auto 6px",e}}class ce extends R{constructor(){super({})}init(){const e=document.createElement("div");return e.classList.add("item"),e}}class de extends R{command;showUI;icon;constructor(e,t,n){super({title:t,icon:n}),this.command=e,this.showUI=e==h.toggleLink,this.icon=n,this.attachEvents()}init(){const e=document.createElement("button");return e.classList.add("entry","button-reset","text-formatting-operation","option-hover"),e.title=this.props.title,e.tabIndex=1,e.appendChild(this.props.icon.htmlElement),e}attachEvents(){this.htmlElement.addEventListener(a.Click,(async e=>{const t=P.findClickedElementOrAncestorByClass(e,"block");document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:this.command,showUI:this.showUI,block:t}}))})),document.addEventListener(s.ColorChangeRequest,(e=>{const t=e.detail;this.id==t.targetId&&this.icon.changeColor(t.action.color)}))}static create(e,t,n){return new de(e,t,n)}}class ue extends R{constructor(e){super({color:e})}init(){const e=document.createElement("div");return e.style.width="1.25rem",e.style.height="1.25rem",e.style.borderRadius="50%",e.style.backgroundColor=this.props.color,e.style.border="1px solid #d0d0d0",e.style.boxSizing="border-box",e}}class me extends R{parentDropdownMenuList;constructor(e,t){super({title:t}),this.parentDropdownMenuList=e}title="";activeIcon;value="";changeActiveIconToVisible(){}getLeftIconBackgroundColor(){return null}resetActiveIcon(){}attachOnLoseFocus(e){throw new Error("Method not implemented.")}attachOnFocus(e){throw new Error("Method not implemented.")}emitCommandEvent(){throw new Error("Method not implemented.")}removeFocus(){throw new Error("Method not implemented.")}focus(){throw new Error("Method not implemented.")}init(){const e=document.createElement("li");e.classList.add("no-list-style");const t=document.createElement("h3");return t.innerText=this.props.title,t.classList.add("no-selection"),e.appendChild(t),e}}!function(e){e.BackgroundOptionRed="BackgroundOptionRed",e.BackgroundOptionGreen="BackgroundOptionRed",e.BackgroundOptionBlue="BackgroundOptionRed",e.BackgroundOptionYellow="BackgroundOptionRed",e.BackgroundOptionGrey="BackgroundOptionRed",e.BackgroundOptionNone="BackgroundOptionRed"}(C||(C={}));class he{static alignTool(){const e=new ce;return de.create(h.JustifyLeft,"Left",ee.create(i.JustifyStart,J.large)).appendTo(e),de.create(h.JustifyCenter,"Center",ee.create(i.JustifyCenter,J.large)).appendTo(e),de.create(h.JustifyRight,"Right",ee.create(i.JustifyEnd,J.large)).appendTo(e),e}static colorTool(){const e=new se("colorInteractiveOptionSelect"+H.generateUniqueId()),t=new Ae("colorInteractiveButton"+H.generateUniqueId(),new ue("#FAF4D1").htmlElement,e);t.addCssClass("color-interactive-button");const n=new ne("colorInteractionOptionsMenu"+H.generateUniqueId(),t,e);e.append(new me(e,"Background"));const o=new le(C.BackgroundOptionRed+H.generateUniqueId(),e,h.changeCalloutBackgroundColor,m.CalloutBackgroundRed,new ue(u.HiliteColorRed).htmlElement,"Red"),i=new le(C.BackgroundOptionGreen+H.generateUniqueId(),e,h.changeCalloutBackgroundColor,m.CalloutBackgroundGreen,new ue(u.HiliteColorGreen).htmlElement,"Green"),r=new le(C.BackgroundOptionBlue+H.generateUniqueId(),e,h.changeCalloutBackgroundColor,m.CalloutBackgroundBlue,new ue(u.HiliteColorBlue).htmlElement,"Blue"),l=new le(C.BackgroundOptionYellow+H.generateUniqueId(),e,h.changeCalloutBackgroundColor,m.CalloutBackgroundYellow,new ue(u.HiliteColorYellow).htmlElement,"Yellow"),s=new le(C.BackgroundOptionGrey+H.generateUniqueId(),e,h.changeCalloutBackgroundColor,m.CalloutBackgroundGrey,new ue(u.HiliteColorGrey).htmlElement,"Grey"),a=new le(C.BackgroundOptionNone+H.generateUniqueId(),e,h.changeCalloutBackgroundColor,m.CalloutBackgroundNone,new ue(u.HiliteColorNone).htmlElement,"None");return e.append(o),e.append(i),e.append(r),e.append(l),e.append(s),e.append(a),n}static languageSelectionTool(){const e=se.create("languageSelectionInteractiveOptionSelect"),t=Ae.create("languageSelectionInteractiveButton","Plain Text",e,!0,["code-block-language-menu","color-interactive-button"]),n=ne.create("languageSelectionInteractionOptionsMenu",t,e);return e.append(new me(e,"Language")),Object.entries(pe.languageMap).sort(((e,t)=>e[1].localeCompare(t[1]))).forEach((([t,n])=>{const o=new le("languageSelectionItem-"+H.generateUniqueId(),e,h.changeCodeBlockLanguage,t,null,n);"plaintext"==o.value&&o.activeIcon?.changeVisibilityToVisible(),e.append(o)})),n}static extraOptions(){const e=new ee("icon-material-more",J.large),t=se.create("moreInteractiveOptionSelect",["media-more-option-select"]),n=Ae.create("moreInteractiveOptionButton",e.htmlElement,t,!1,["moreMediaOptionsButton"]),o=ne.create("moreInteractiveOptionsMenu",n,t);t.append(new me(t,"More options")),t.append(new le("duplicateOption"+H.generateUniqueId(),t,h.duplicateBlock,null,ee.create(i.Duplicate,J.large).htmlElement,"Clone","Ctrl+D"));const r=new le("deleteOption"+H.generateUniqueId(),t,h.deleteBlock,null,ee.create(i.Trash,J.large).htmlElement,"Delete","Shift+Del");return r.addCssClass("danger-option"),t.append(r),o}}!function(e){e.TD="td",e.TABLE="table"}(g||(g={}));class pe{static instance;static languageMap={ada:"Ada",apache:"Apache Config",applescript:"AppleScript",arduino:"Arduino",asciidoc:"AsciiDoc",bash:"Bash",basic:"BASIC",c:"C",csharp:"C#",cpp:"C++",css:"CSS",coffeescript:"CoffeeScript",dart:"Dart",go:"Go",html:"HTML",java:"Java",javascript:"JavaScript",json:"JSON",markdown:"Markdown",perl:"Perl",php:"PHP",plaintext:"Plain Text",python:"Python",ruby:"Ruby",scss:"SCSS",shell:"Shell",sql:"SQL",typescript:"TypeScript",xml:"XML",yaml:"YAML"};constructor(){if(pe.instance)throw new Error("Use BlockToolbox.getInstance() to get instance.");this.attachEvents()}static getInstance(){return pe.instance||(pe.instance=new pe),pe.instance}listen(){console.log("Listening block toolboxes...")}attachEvents(){document.addEventListener(a.Mouseover,this.insertToolboxIntoBlockOnce.bind(this)),document.addEventListener(a.Focusin,this.handleTableBehaviorFocusIn.bind(this)),document.addEventListener(a.Focusout,this.handleTableBehaviorFocusOut.bind(this)),document.addEventListener(a.Click,this.handleClickEvent.bind(this))}handleClickEvent(e){const t=e.target;t.closest(g.TABLE)&&this.toolboxVisibilityController(t,!1)}handleTableBehaviorFocusIn(e){const t=e.target;t.closest(g.TABLE)&&this.toolboxVisibilityController(t,!0)}handleTableBehaviorFocusOut(e){const t=e.target;t.closest(g.TABLE)&&this.toolboxVisibilityController(t,!1)}toolboxVisibilityController(e,t){const n=e.closest(".block");if(n){const e=n.querySelector(".block-toolbar");e&&(t?e.classList.add("hidden"):e.classList.remove("hidden"))}}insertToolboxIntoBlockOnce(e){const t=e.target.closest(`.${r.IncludeBlockToolbarClass}`);if(!t)return;const n=t.closest(".block");if(n&&null===n.querySelector(".block-toolbar-wrapper")){const e=t.classList.contains(r.LanguageSelectionToolClass),o=t.classList.contains(r.AlignToolClass),i=t.classList.contains(r.ColorToolClass),l=t.classList.contains(r.ExtraOptionsClass),s=pe.createToolbox(e,o,i,l);n&&(n.appendChild(s),n.addEventListener(a.Mouseenter,(e=>this.resetToolbox(e,n))),n.addEventListener(a.Mousemove,(e=>{const t=s.firstChild?.id,o=document.getElementById(t);o&&(n.contains(e.target)?o.style.display="flex":this.hideBlockToolbox(s))})),n.addEventListener(a.Mouseleave,(()=>this.hideBlockToolbox(s))),document.addEventListener(a.Click,(e=>{P.isTargetDescendantOfSelector(e,`#${n.id}`)||this.hideBlockToolbox(s)})),n.querySelectorAll("iframe").forEach((e=>{e.addEventListener(a.Mouseenter,(()=>{const e=s.firstChild?.id,t=document.getElementById(e);t&&(t.style.display="flex",this.changeToolbarColor(n))})),e.addEventListener(a.Mouseleave,(()=>this.hideBlockToolbox(s)))})))}}changeToolbarColor(e){const t=e.querySelector(".color-interactive-button div"),n=e.querySelector(".callout-wrapper");if(t&&n){var o=window.getComputedStyle(n);t.style.backgroundColor=o.backgroundColor,t.style.borderColor=o.borderColor,t.style.borderColor="#ccc"}}hideBlockToolbox(e){const t=e.firstChild?.id,n=document.getElementById(t);n&&(pe.isAnyDependentBoxVisible(n)||(n.style.display="none"))}static isAnyDependentBoxVisible(e){const t=e.querySelectorAll(".dependent-box");for(const e of t){const t=window.getComputedStyle(e);if("none"!==t.display&&"hidden"!==t.visibility)return!0}return!1}resetToolbox(e,t){const n=t.querySelector(".block-toolbar");if(!n)return void console.log("block-toolbar not found");const o=n.querySelector(".media-more-option-select");o&&(o.style.display="none");const i=n.querySelector(".color-interactive-select");i&&(i.style.display="none"),this.changeToolbarColor(t)}static createToolbox(e=!1,t=!1,n=!1,o=!1){const i=document.createElement("div");i.classList.add("block-toolbar-wrapper","exclude-from-clone",l.EditorOnly),i.style.position="relative";const r=document.createElement("div");return r.classList.add("block-toolbar","soft-box-shadow"),r.id=`btb-${H.generateUniqueId()}`,i.appendChild(r),e&&r.appendChild(he.languageSelectionTool().htmlElement),t&&r.appendChild(he.alignTool().htmlElement),n&&r.appendChild(he.colorTool().htmlElement),o&&r.appendChild(he.extraOptions().htmlElement),i}}class Ae extends R{dropdownList;svgIcon;constructor(e,t,n,o=!0){const i=new ee("icon-wordpress-chevron-down",J.medium);super({id:e,title:t,dropdownList:n,svgIcon:o?i:null}),this.dropdownList=n,this.svgIcon=i,this.attachEvents(),n.setParentDropdownMenuButton(this)}init(){const e=document.createElement("button");if(e.id=this.props.id,e.role="button",e.classList.add("button-reset","text-formatting-select-button","text-formatting-operation","option-hover","pointer"),e.tabIndex=1,e.style.position="relative",e.setAttribute("aria-controls",this.props.dropdownList.htmlElement.id),"string"==typeof this.props.title){const t=document.createElement("span");t.classList.add("no-selection"),t.textContent=this.props.title,e.appendChild(t)}else e.appendChild(this.props.title);return this.props.svgIcon&&e.appendChild(this.props.svgIcon.htmlElement),e}attachEvents(){this.htmlElement.addEventListener("click",(()=>{this.dropdownList.isVisible?this.dropdownList.hide():this.dropdownList.show()})),document.addEventListener(s.ChangeBlockToolbarLanguage,this.handleChangeBlockToolbarLanguageEvent.bind(this))}handleChangeBlockToolbarLanguageEvent(e){const t=e.detail;if(t.targetClass&&this.classList.includes(t.targetClass)){const e=t.action;this.htmlElement.closest(`#${e.blockId}`)&&(this.changeTitle(pe.languageMap[e.language]),this.dropdownList.hide())}}get display(){return"block"}changeTitle(e){const t=this.htmlElement.querySelector("span");t&&(t.textContent=e)}static create(e,t,n,o,i=[]){const r=new Ae(e+H.generateUniqueId(),t,n,o);return r.addCssClass(...i),r}}!function(e){e.ColorTextOptionSelect="colorTextOptionSelect"}(b||(b={})),function(e){e.ColorTextOptionsMenu="colorTextOptionsMenu"}(E||(E={}));class Ce{static build(){const e=K.getInstance();return e.appendDropdown(Ce.turnIntoDropdown()),e.appendSeparator(Ce.separator("turnIntoSeparator")),e.appendButtonGroup(Ce.buttonGroup()),e.appendDropdown(Ce.colorDropdown()),e.appendSeparator(Ce.separator("textOperationsSeparator")),e.appendDropdown(Ce.moreOptionsDropdown()),e}static turnIntoDropdown(){const e=new se("turnIntoSelect"),t=new Ae("turnIntoButton","Text",e),n=new ne("turnIntoMenu",t,e);return e.append(new me(e,"Turn into")),e.append(new le("turnIntoOptionText",e,h.transformBlock,O.ELEMENT_TYPES.PARAGRAPH,ge.paragraph.htmlElement,"Text","Ctrl+Shift+Enter")),e.append(new le("turnIntoOptionTodoList",e,h.transformBlock,O.ELEMENT_TYPES.CHECK_LIST,ge.todo_list.htmlElement,"Todo list","Ctrl+1")),e.append(new le("turnIntoOptionBulletedList",e,h.transformBlock,O.ELEMENT_TYPES.BULLETED_LIST,ge.b_list.htmlElement,"Bulleted list","Ctrl+.")),e.append(new le("turnIntoOptionNumberedList",e,h.transformBlock,O.ELEMENT_TYPES.NUMBERED_LIST,ge.n_list.htmlElement,"Numbered list","Ctrl+/")),e.append(new le("turnIntoOptionBlockCode",e,h.transformBlock,O.ELEMENT_TYPES.CODE,ge.code.htmlElement,"Block code")),e.append(new le("turnIntoOptionQuote",e,h.transformBlock,O.ELEMENT_TYPES.QUOTE,ge.quote.htmlElement,"Quote")),e.append(new le("turnIntoOptionHeading2",e,h.transformBlock,O.ELEMENT_TYPES.HEADER_2,ge.head2.htmlElement,"Heading 2","Ctrl+Alt+2")),e.append(new le("turnIntoOptionHeading3",e,h.transformBlock,O.ELEMENT_TYPES.HEADER_3,ge.head3.htmlElement,"Heading 3","Ctrl+Alt+3")),e.append(new le("turnIntoOptionHeading4",e,h.transformBlock,O.ELEMENT_TYPES.HEADER_4,ge.head4.htmlElement,"Heading 4","Ctrl+Alt+4")),n}static separator(e){return new ae(e)}static buttonGroup(){const e=new ce,t=de.create(h.toggleLink,"Link",ee.create(i.Link,J.large));t.setId(p.Link),t.appendTo(e);const n=de.create(h.toggleBold,"Bold",ee.create(i.Bold,J.large));n.setId(p.Bold),n.appendTo(e);const o=de.create(h.toggleItalic,"Italic",ee.create(i.Italic,J.large));o.setId(p.Italic),o.appendTo(e);const r=de.create(h.toggleUnderline,"Underline",ee.create(i.Underline,J.large));r.setId(p.Underline),r.appendTo(e);const l=de.create(h.toggleInlineCode,"Code",ee.create(i.InlineCode,J.large));l.setId(p.InlineCode),l.appendTo(e);const s=de.create(h.toggleStrikeThrough,"Strike-through",ee.create(i.StrikeThrough,J.large));return s.setId(p.Strikethrough),s.appendTo(e),e}static colorDropdown(){const e=new se(b.ColorTextOptionSelect),t=new Ae("colorTextButton",new ue("#FAF4D1").htmlElement,e),n=new ne(E.ColorTextOptionsMenu,t,e);e.append(new me(e,"Highlight"));const o=new le(C.BackgroundOptionRed,e,h.toggleHiliteColor,u.HiliteColorRed,new ue(u.HiliteColorRed).htmlElement,"Red");o.addClass("hiliteColor");const i=new le(C.BackgroundOptionGreen,e,h.toggleHiliteColor,u.HiliteColorGreen,new ue(u.HiliteColorGreen).htmlElement,"Green");i.addClass("hiliteColor");const r=new le(C.BackgroundOptionBlue,e,h.toggleHiliteColor,u.HiliteColorBlue,new ue(u.HiliteColorBlue).htmlElement,"Blue");r.addClass("hiliteColor");const l=new le(C.BackgroundOptionYellow,e,h.toggleHiliteColor,u.HiliteColorYellow,new ue(u.HiliteColorYellow).htmlElement,"Yellow");l.addClass("hiliteColor");const s=new le(C.BackgroundOptionGrey,e,h.toggleHiliteColor,u.HiliteColorGrey,new ue(u.HiliteColorGrey).htmlElement,"Grey");s.addClass("hiliteColor");const a=new le(C.BackgroundOptionNone,e,h.toggleHiliteColor,u.HiliteColorNone,new ue(u.HiliteColorNone).htmlElement,"None");a.addClass("hiliteColor"),e.append(o),e.append(i),e.append(r),e.append(l),e.append(s),e.append(a),e.append(new me(e,"Text"));const c=new le("colorOptionRed",e,h.toggleForeColor,u.ForeColorRed,new ee("icon-material-format",J.large).htmlElement,"Red");c.addClass("foreColor");const d=new le("colorOptionGreen",e,h.toggleForeColor,u.ForeColorGreen,new ee("icon-material-format",J.large).htmlElement,"Green");d.addClass("foreColor");const m=new le("colorOptionBlue",e,h.toggleForeColor,u.ForeColorBlue,new ee("icon-material-format",J.large).htmlElement,"Blue");m.addClass("foreColor");const p=new le("colorOptionYellow",e,h.toggleForeColor,u.ForeColorYellow,new ee("icon-material-format",J.large).htmlElement,"Yellow");p.addClass("foreColor");const A=new le("colorOptionGrey",e,h.toggleForeColor,u.ForeColorGrey,new ee("icon-material-format",J.large).htmlElement,"Grey");A.addClass("foreColor");const g=new le("colorOptionNone",e,h.toggleForeColor,u.ForeColorInitial,new ee("icon-material-format",J.large).htmlElement,"None");return g.addClass("foreColor"),e.append(c),e.append(d),e.append(m),e.append(p),e.append(A),e.append(g),n}static moreOptionsDropdown(){const e=new ee("icon-material-more",J.large),t=new se("moreTextOptionSelect"),n=new Ae("moreTextOptionButton",e.htmlElement,t,!1),o=new ne("moreTextOptionsMenu",n,t);t.append(new me(t,"More options")),t.append(new le("copyOption",t,h.copySelected,null,ge.copy.htmlElement,"Copy","Ctrl+C")),t.append(new le("cutOption",t,h.cutSelected,null,ge.cut.htmlElement,"Cut","Ctrl+X")),t.append(new le("pasteOption",t,h.past,null,ge.paste.htmlElement,"Replace","Ctrl+V")),t.append(new le("duplicateOption",t,h.duplicateBlock,null,ge.duplicate.htmlElement,"Clone","Ctrl+D")),t.append(new le("resetOption",t,h.removeFormat,null,ge.eraser.htmlElement,"Reset Style","Ctrl+\\"));const i=new le("deleteOption",t,h.deleteBlock,null,ge.delete.htmlElement,"Delete","Shift+Del");return i.addCssClass("danger-option"),t.append(i),o}}const ge={paragraph:new ee("icon-material-format","1.25rem"),todo_list:new ee("icon-material-check-list-2",J.large),b_list:new ee("icon-wordpress-bulleted-list",J.large),n_list:new ee("icon-wordpress-numbered-list",J.large),code:new ee("icon-wordpress-code-mark",J.large),quote:new ee("icon-wordpress-quote",J.large),head1:new ee("icon-julia-head-1",J.large),head2:new ee("icon-julia-head-2",J.large),head3:new ee("icon-julia-head-3",J.large),head4:new ee("icon-julia-head-4",J.large),head5:new ee("icon-julia-head-5",J.large),head6:new ee("icon-julia-head-6",J.large),duplicate:new ee("icon-material-duplicate",J.large),delete:new ee("icon-material-trash",J.large),eraser:new ee("icon-material-clear",J.large),copy:new ee("icon-material-copy",J.large),cut:new ee("icon-material-cut",J.large),paste:new ee("icon-material-paste",J.large)};class be extends R{constructor(){super({})}init(){const e=document.createElement("span");return e.innerText="No results",e.classList.add("empty-block-options"),e.style.padding="10px",e.style.color="rgba(55, 53, 47, 0.65)",e.style.display="none",e}}class Ee extends R{static id="quickMenu";blockOperationsService;currentFocusedMenuItem;menuSections;quickMenuEmpty;filterInput;static instance;focusStack;constructor(e,t){super({}),this.currentFocusedMenuItem=null,this.menuSections=new re,this.quickMenuEmpty=new be,this.blockOperationsService=e,this.focusStack=t,this.attachEvents(),this.filterInput=""}init(){const e=document.createElement("div");e.id=Ee.id,e.style.zIndex=d.SlightlyImportant,e.classList.add("block-options-wrapper","soft-box-shadow"),e.style.display="none";const t=document.createElement("div");return t.classList.add("block-options"),t.style.position="relative",e.appendChild(t),e}append(e){this.menuSections.append(e),this.htmlElement.querySelector(".block-options").appendChild(e.htmlElement)}static getInstance(){const e=D.Instance.resolve("IBlockOperationsService"),t=D.Instance.resolve("IFocusStack");return Ee.instance||(Ee.instance=new Ee(e,t)),Ee.instance}switchVisualFocus(e){this.currentFocusedMenuItem!=e&&(this.currentFocusedMenuItem&&this.currentFocusedMenuItem.value.removeFocus(),this.currentFocusedMenuItem=e,this.currentFocusedMenuItem.value.focus(),this.focusStack.peek()?.focus())}focusOnTheFirstVisibleItem(){const e=this.menuSections.getFirst();let t=e;for(;t;){const n=t.value.menuItems.findFirst((e=>e.isVisible));if(n)return void this.switchVisualFocus(n);if(t=t.nextNode,t==e)return}}focusPreviousVisibleItem(){let e;if(this.currentFocusedMenuItem){if(e=this.currentFocusedMenuItem.getPreviousSatisfying((e=>e.isVisible)),!e){let t=this.menuSections.find(this.currentFocusedMenuItem.value.immediateParent).getPreviousSatisfying((e=>e.isVisible));if(!t)return;e=t.value.menuItems.findLast((e=>e.isVisible))}}else{let t=this.menuSections.findLast((e=>e.isVisible));if(!t)return;e=t.value.menuItems.findLast((e=>e.isVisible))}this.switchVisualFocus(e)}focusNextVisibleItem(){let e;if(this.currentFocusedMenuItem){if(e=this.currentFocusedMenuItem.getNextSatisfying((e=>e.isVisible)),!e){let t=this.menuSections.find(this.currentFocusedMenuItem.value.immediateParent).getNextSatisfying((e=>e.isVisible));if(!t)return;e=t.value.menuItems.findFirst((e=>e.isVisible))}}else{let t=this.menuSections.findFirst((e=>e.isVisible));if(!t)return;e=t.value.menuItems.findFirst((e=>e.isVisible))}this.switchVisualFocus(e)}filterItems(){this.menuSections.forEach((e=>{e.filterSection(this.filterInput)})),this.menuSections.any((e=>e.isVisible))?this.quickMenuEmpty.hide():this.quickMenuEmpty.show(),this.focusOnTheFirstVisibleItem()}show(){setTimeout((()=>{const e=document.activeElement;if(!e)return void console.error("Failed to display the quickMenu: no active element found. Please ensure an element is focused before attempting to display the quickMenu.");this.focusStack.push(e);const t=window.getSelection();if(!t||0===t.rangeCount)throw new Error("Nenhuma seleção encontrada");const n=t.getRangeAt(0).getBoundingClientRect();this.htmlElement.style.display="flex";const o=this.htmlElement.offsetWidth;let i=n.left+window.scrollX;i+o>window.innerWidth&&(i=window.innerWidth-o-20),this.htmlElement.offsetHeight;let r=n.bottom+window.scrollY+10;this.htmlElement.style.left=`${i}px`,this.htmlElement.style.top=`${r}px`,super.show(),this.focusOnTheFirstVisibleItem(),this.focusStack.peek()?.focus()}),10)}restore(){this.filterInput="",this.menuSections.forEach((e=>{e.restore()}))}hide(){this.restore(),this.focusStack.peek()?.focus(),super.hide()}attachEvents(){document.addEventListener(c.emittedCommand,(e=>{const{command:t}=e.detail;t==h.transformBlock&&this.hide()})),document.addEventListener("keydown",(e=>{const t=P.findClosestAncestorOfActiveElementByClass("block");if(this.isVisible||"/"!==e.key||e.ctrlKey||e.shiftKey||e.altKey||!t)(!this.isVisible||"ArrowLeft"!==e.key||e.ctrlKey||e.shiftKey||e.altKey)&&(!this.isVisible||"ArrowRight"!==e.key||e.ctrlKey||e.shiftKey||e.altKey)?!this.isVisible||"ArrowDown"!==e.key||e.ctrlKey||e.shiftKey||e.altKey?!this.isVisible||"ArrowUp"!==e.key||e.ctrlKey||e.shiftKey||e.altKey?!this.isVisible||!/^[a-z0-9 ]$/i.test(e.key)||e.ctrlKey||e.shiftKey||e.altKey?this.isVisible&&"Backspace"===e.key?""==this.filterInput?this.hide():(this.removeLastFilterInputCharacter(),this.filterItems()):!this.isVisible||"Escape"!==e.key||e.ctrlKey||e.shiftKey||e.altKey||this.hide():(this.concatFilterInput(e.key),this.filterItems()):(e.preventDefault(),this.focusPreviousVisibleItem()):(e.preventDefault(),this.focusNextVisibleItem()):(e.preventDefault(),e.stopPropagation());else{if(e.target.closest(".ignore-quick-menu"))return;this.show()}})),document.addEventListener("click",(e=>{this.isVisible&&!e.target.closest(`#${this.htmlElement.id}`)&&this.hide()})),document.addEventListener("keydown",(e=>{if(this.isVisible&&"Enter"===e.key&&!e.ctrlKey&&!e.shiftKey&&!e.altKey){e.preventDefault(),e.stopPropagation();const t=this.currentFocusedMenuItem?.value.blockType;t&&this.transformHtmlFocusedElementBeforeOpenQuickMenu(t)}})),document.addEventListener(c.blockTypeChanged,(e=>{this.hide()}))}emitCommandEvent(e){const t=new CustomEvent(c.emittedCommand,{detail:{command:h.transformBlock,value:e}});document.dispatchEvent(t)}transformHtmlFocusedElementBeforeOpenQuickMenu(e){e&&this.emitCommandEvent(e)}concatFilterInput(e){this.filterInput+=e.toLowerCase()}removeLastFilterInputCharacter(){this.filterInput.length>0&&(this.filterInput=this.filterInput.slice(0,-1))}}class fe extends oe{constructor(){super()}append(e){const t=new ie(e,this);this.head&&this.tail?(this.tail.setNext(t),t.setPrevious(this.tail),this.tail=t):(this.head=t,this.tail=t),this.length++}}class Be extends R{immediateParent;menuItems=new fe;constructor(e){super({title:e.title,classList:e.classList}),this.immediateParent=e.quickMenuInstance}init(){const e=document.createElement("section");e.classList.add(this.props.classList);const t=document.createElement("h2");return t.textContent=this.props.title,t.classList.add("no-selection"),e.appendChild(t),e}appendQuickMenuItems(e){e.forEach((e=>{this.appendQuickMenuItem(e)}))}appendQuickMenuItem(e){this.menuItems.append(e),this.htmlElement.appendChild(e.htmlElement)}filterSection(e){this.restore(),""!==e&&(this.menuItems.forEach((t=>{t.filterValue.toLocaleLowerCase().includes(e)||t.hide()})),this.menuItems.any((t=>t.filterValue.toLocaleLowerCase().includes(e)))||this.hide())}restore(){this.show(),this.menuItems.forEach((e=>{e.show()}))}}class ve extends R{_blockType;_filterValue;_immediateParent;constructor(e,t,n,o,i,r){super({title:t,description:n,iconId:o}),this._blockType=i,this._filterValue=r,this._immediateParent=e,this.attachEvents()}init(){const e=document.createElement("div");e.classList.add("option","option-hover","block-operation","pointer","no-selection"),e.setAttribute("data-block-operation","apply-selected-block-type"),e.setAttribute("tabindex","0"),e.setAttribute("role","option");const t=document.createElement("div");t.classList.add("option-image");const n=new ee(this.props.iconId,"100%");t.appendChild(n.htmlElement),e.appendChild(t);const o=document.createElement("div");o.classList.add("option-text");const i=document.createElement("p");i.classList.add("block-title"),i.innerText=this.props.title,o.appendChild(i);const r=document.createElement("p");return r.classList.add("block-description"),r.innerText=this.props.description,o.appendChild(r),e.appendChild(o),e}get display(){return"flex"}get filterValue(){return this._filterValue}get immediateParent(){return this._immediateParent}get blockType(){return this._blockType}focus(){this.htmlElement.classList.add("option-focused"),this.htmlElement.focus()}removeFocus(){this.htmlElement.classList.remove("option-focused")}emitCommandEvent(){const e=new CustomEvent(c.emittedCommand,{detail:{command:h.transformBlock,value:this.blockType}});document.dispatchEvent(e)}attachEvents(){this.htmlElement.addEventListener("mousemove",(()=>{const e=this._immediateParent.menuItems.find(this);this._immediateParent.immediateParent.switchVisualFocus(e)})),this.htmlElement.addEventListener("click",(e=>{e.preventDefault(),e.stopPropagation(),this.emitCommandEvent()}))}}class we{static build(){const e=Ee.getInstance(),t=new Be({quickMenuInstance:e,title:"Basic",classList:"basic-section"});t.appendQuickMenuItems([new ve(t,"Text","Start writing in plain text.","icon-material-format",O.ELEMENT_TYPES.PARAGRAPH,"paragraph text p"),new ve(t,"Bulleted list","Organize items with bullet points.","icon-wordpress-bulleted-list",O.ELEMENT_TYPES.BULLETED_LIST,"bulleted list unordered list ul"),new ve(t,"Numbered list","List items in a numbered format.","icon-wordpress-numbered-list",O.ELEMENT_TYPES.NUMBERED_LIST,"numbered list number list sequential list ol enumerated list ordered list"),new ve(t,"Table","Organize data in rows and columns.","icon-material-table",O.ELEMENT_TYPES.TABLE,"table tr th"),new ve(t,"Callout","Emphasize key points with a callout box.",i.Callout,O.ELEMENT_TYPES.CALLOUT,"callout note spotlight"),new ve(t,"Code","Include a code snippet.","icon-wordpress-code-mark",O.ELEMENT_TYPES.CODE,"code script source markup"),new ve(t,"Quote","Highlight text as a quote.","icon-wordpress-quote",O.ELEMENT_TYPES.QUOTE,"quote blockquote citation quotation cite"),new ve(t,"Heading 2","Medium header for sections.","icon-julia-head-2",O.ELEMENT_TYPES.HEADER_2,"header 2 heading 2 h2"),new ve(t,"Heading 3","Small header for subsections.","icon-julia-head-2",O.ELEMENT_TYPES.HEADER_3,"header 3 heading 3 h3"),new ve(t,"Separator","Visually divide blocks.","icon-wordpress-separator",O.ELEMENT_TYPES.SEPARATOR,"separator divider rule line hr")]),e.append(t);const n=new Be({quickMenuInstance:e,title:"Media",classList:"media-section"});n.appendQuickMenuItems([new ve(n,"Image","Upload or embed an image.",i.Image2,O.ELEMENT_TYPES.IMAGE,"image figure photo illustration picture media upload"),new ve(n,"YouTube","Embed a YouTube video.",i.YouTube,"video","video embed youtube clip film movie tape")]),e.append(n);const o=new Be({quickMenuInstance:e,title:"Heading",classList:"heading-section"});o.appendQuickMenuItems([new ve(o,"Heading 1","Large header for main topics.","icon-julia-head-1",O.ELEMENT_TYPES.HEADER_1,"header 1 heading 1 h1"),new ve(o,"Heading 2","Medium header for sections.","icon-julia-head-2",O.ELEMENT_TYPES.HEADER_2,"header 2 heading 2 h2"),new ve(o,"Heading 3","Small header for subsections.","icon-julia-head-3",O.ELEMENT_TYPES.HEADER_3,"header 3 heading 3 h3"),new ve(o,"Heading 4","Detailed header for subtopics.","icon-julia-head-4",O.ELEMENT_TYPES.HEADER_4,"header 4 heading 4 h4"),new ve(o,"Heading 5","Minor header for specifics.","icon-julia-head-5",O.ELEMENT_TYPES.HEADER_5,"header 5 heading 5 h5"),new ve(o,"Heading 6","Smallest header for fine details.","icon-julia-head-6",O.ELEMENT_TYPES.HEADER_6,"header 6 heading 6 h6")]),e.append(o);const r=new Be({quickMenuInstance:e,title:"List",classList:"list-section"});r.appendQuickMenuItems([new ve(r,"Todo list","Track tasks with checkboxes.","icon-material-check-list-2",O.ELEMENT_TYPES.CHECK_LIST,"todo list task list checklist"),new ve(r,"Bulleted list","Organize items with bullet points.","icon-wordpress-bulleted-list",O.ELEMENT_TYPES.BULLETED_LIST,"bulleted list unordered list ul"),new ve(r,"Numbered list","List items in a numbered format.","icon-wordpress-numbered-list",O.ELEMENT_TYPES.NUMBERED_LIST,"numbered list number list sequential list ol enumerated list ordered list")]),e.append(r);const l=new Be({quickMenuInstance:e,title:"Embed",classList:"embed-section"});return l.appendQuickMenuItems([new ve(l,"GitHub Gist","Embed a GitHub Gist.",i.GitHub,"github-gist","code gist github snippet git"),new ve(l,"CodePen","Embed a CodePen web demo.",i.CodePen,"codepen","code codepen"),new ve(l,"Spotify","Embed a Spotify audio track.",i.Spotify,"spotify","mp3 sound audio music spotify track")]),e.append(l),e}}class ke extends R{constructor(e){super({value:e})}init(){const e=document.createElement("div");e.classList.add("title");const t=document.createElement("h1");return t.setAttribute("contentEditable","true"),t.setAttribute("data-placeholder","Untitled"),this.props.value&&(t.textContent=this.props.value),e.appendChild(t),e}static create(e){return new ke(e)}}class Ie{static build(){return ke.create(window.editorConfig?.title)}}var ye,xe,Te,Se,Le,Me;!function(e){e.ArrowUp="ArrowUp",e.ArrowDown="ArrowDown",e.ArrowLeft="ArrowLeft",e.ArrowRight="ArrowRight"}(ye||(ye={})),function(e){e.Column="Column",e.Row="Row",e.Cell="Cell",e.SelectedCells="SelectedCells"}(xe||(xe={}));class Ne{static addRow(e,t=null){const n=null!==t&&t>=0&&t<=e.rows.length?t:e.rows.length,o=e.insertRow(n),i=Array.from(e.rows).reduce(((e,t)=>Math.max(e,t.cells.length)),0);let r=[];for(let e=0;e<i;e++){const e=o.insertCell();e.contentEditable="true",e.setAttribute("data-placeholder","Enter text"),r.push(e)}setTimeout((()=>{r.forEach((e=>e.classList.remove("temporary-shadow")))}),700)}static addColumn(e,t=null){const n=null!==t?t:void 0;let o=[];for(let t=0;t<e.rows.length;t++){const i=e.rows[t].insertCell(n);i.contentEditable="true",i.setAttribute("data-placeholder","cell"),o.push(i)}setTimeout((()=>{o.forEach((e=>e.classList.remove("temporary-shadow")))}),700)}static isLastColumn(e,t){if(!e.contains(t))return!1;const n=t.parentElement;return t===n.cells[n.cells.length-1]}static isLastRow(e,t){return!!e.contains(t)&&t.parentElement===e.rows[e.rows.length-1]}static removeColumnByCell(e){if("td"!==e.tagName.toLowerCase()&&"th"!==e.tagName.toLowerCase())throw new Error("The provided element is not a table cell.");const t=e.parentElement.parentElement,n=e.cellIndex;for(let e=0;e<t.rows.length;e++)n<t.rows[e].cells.length&&t.rows[e].deleteCell(n)}static removeRowByCell(e){if("td"!==e.tagName.toLowerCase()&&"th"!==e.tagName.toLowerCase())throw new Error("The provided element is not a table cell.");const t=e.parentElement;t.parentElement.deleteRow(t.rowIndex)}static getActiveTableCell(){const e=document.activeElement;return"td"===e?.tagName.toLowerCase()?e:e?.closest("td")||null}static getLastTableCell(e){for(let t=e.rows.length-1;t>=0;t--){const n=e.rows[t];for(let e=n.cells.length-1;e>=0;e--){const t=n.cells[e];if(t.isContentEditable)return t}}return null}static getFirstTableCell(e){for(let t=0;t<e.rows.length;t++){const n=e.rows[t];for(let e=0;e<n.cells.length;e++){const t=n.cells[e];if(t.isContentEditable)return t}}return null}static getNeighborCell(e,t,n){if(!t.parentElement)return null;const o=t.parentElement.rowIndex,i=t.cellIndex;switch(n){case ye.ArrowRight:return t.parentElement.cells[i+1]??null;case ye.ArrowLeft:return t.parentElement.cells[i-1]??null;case ye.ArrowUp:return e.rows[o-1]?.cells[i]??null;case ye.ArrowDown:return e.rows[o+1]?.cells[i]??null}return null}static changeCellBorderColor(e,t,n){let o=null;switch(t){case xe.Column:const t=e.querySelector("td.selected")?.cellIndex;void 0!==t&&(o=e.querySelectorAll(`td:nth-child(${t+1})`));break;case xe.Row:const n=e.querySelector("td.selected");n&&(o=n.parentElement.cells);break;case xe.Cell:case xe.SelectedCells:o=e.querySelectorAll("td.selected");break;default:throw new Error("Invalid scope.")}o&&Array.from(o).forEach((e=>{e.style.border=`1px double ${n}`}))}static moveFocusToBelowCell(e,t){const n=t.parentElement?.nextElementSibling;if(!n)return!1;const o=t.cellIndex,i=n.cells[o];return!(!i||!i.isContentEditable||(i.focus(),0))}}class qe extends R{constructor(){super({}),this.attachEvent()}init(){const e=document.createElement("div");return e.classList.add("content"),window.editorConfig,e.append(O.blockParagraph()),e}clearSelectionOnDrag(){document.addEventListener(a.Mousedown,(e=>{const t=e.target;let n;t&&(n=t.nodeType==Node.TEXT_NODE?t.parentElement:t,n&&n.closest(".drag-handler")&&window.getSelection()?.removeAllRanges())}))}attachEvent(){this.clearSelectionOnDrag(),this.reRenderPlaceholder(),document.addEventListener(a.Click,(e=>{document.querySelectorAll(".separator-selected").forEach((e=>{e.classList.remove("separator-selected"),e.removeAttribute("tabindex")}));let t=e.target;if(t&&t.closest(".separator-wrapper")){e.stopImmediatePropagation(),e.preventDefault();let n=t.closest(".separator-wrapper");n&&(n.classList.add("separator-selected"),n.setAttribute("tabindex","-1"),setTimeout((()=>{n.focus()}),50))}})),document.addEventListener(a.Blur,(e=>{const t=e.target;if(t instanceof HTMLElement&&t.closest(".separator-selected")){e.stopImmediatePropagation();const n=t.closest(".separator-selected");n.classList.remove("separator-selected"),n.removeAttribute("tabindex")}}),!0),document.addEventListener("copiedText",(()=>{const e=document.querySelector("#copyOption .text-option span");e&&(e.textContent="Copied!",setTimeout((()=>{e.textContent="Copy"}),1500))})),document.addEventListener(a.DOMContentLoaded,(function(){const e=document.querySelector(".johannes-editor");if(e){let t=e.querySelectorAll(".block");if(1==t.length){const e=t[0].querySelector(".johannes-content-element");""==e.innerText&&e.focus()}}})),document.addEventListener(a.Keydown,(e=>{"Enter"===e.key&&!e.shiftKey&&P.isEventTargetDescendantOf(e,"#johannesEditor .content-wrapper .title")&&(e.preventDefault(),document.dispatchEvent(new CustomEvent(c.pressedEnterOnTitle,{})))}),!0),document.addEventListener(a.Keydown,(async e=>{if(P.isEventTargetDescendantOf(e,".ignore-events")&&"Tab"!==e.key)return;const t=D.Instance.resolve("IQuickMenu"),n=D.Instance.resolve("ITableContextFloatingToolbar");if(!(e.ctrlKey||e.shiftKey||e.altKey))if(e.key!==A.Enter||e.shiftKey||t.isVisible||n.isVisible){if(e.key===A.Backspace){const t=e.target;if(t.classList.contains("separator-wrapper"))e.stopImmediatePropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.deleteBlockAndFocusOnPrevious}}));else if(t.closest(".johannes-content-element")&&""===t.textContent?.trim())e.stopImmediatePropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.deleteBlockAndFocusOnPrevious}}));else if(t.closest(".johannes-content-element")&&""!==t.textContent?.trim()){const{atStart:n,atEnd:o}=P.getSelectionTextInfo(t),i=document.getSelection()?.toString();n&&0==i?.length&&(e.preventDefault(),e.stopImmediatePropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.mergeWithPreviousBlock}})))}}else if(e.key===A.Delete){const t=e.target;if(t.classList.contains("separator-wrapper"))e.stopImmediatePropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.deleteBlockAndFocusOnNext}}));else if(t.classList.contains("johannes-content-element")&&""===t.textContent?.trim())e.stopImmediatePropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.deleteBlockAndFocusOnNext}}));else if(t.closest(".johannes-content-element")&&""!==t.textContent?.trim()){const{atStart:n,atEnd:o}=P.getSelectionTextInfo(t),i=document.getSelection()?.toString();o&&0==i?.length&&(e.preventDefault(),e.stopImmediatePropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.mergeWithNextBlock}})))}}else if("ArrowRight"===e.key&&qe.isCursorAtEnd(e.target));else if("ArrowLeft"===e.key&&qe.isCursorAtStart(e.target));else if("ArrowDown"===e.key&&qe.isCursorOnLastLine());else if("ArrowUp"===e.key&&qe.isCursorOnFirstLine());else if("Tab"===e.key&&P.isEventTargetDescendantOf(e,".johannes-code")){e.preventDefault();const t="    ";document.execCommand("insertText",!1,t)}}else{e.preventDefault();const t=e.target.closest(".table-controller");if(t){const n=e.target.closest("td, th"),o=t.querySelector("table");return void(n&&(Ne.moveFocusToBelowCell(o,n)||document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.focusOnNextBlock}}))))}if(e.target.closest(".johannes-code"))return;e.preventDefault(),e.stopImmediatePropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.insertNew}}))}})),document.addEventListener(a.Blur,(e=>this.sanitizeElementEventHandler(e)),!0)}sanitizeElementEventHandler(e){const t=e.target;t instanceof HTMLElement&&"true"===t.contentEditable&&(console.log("lipou"),P.sanitizeContentEditable(t))}reRenderPlaceholder(){document.addEventListener(a.Input,(function(e){if(e.target instanceof HTMLElement){const t=e.target;if(t.isContentEditable&&t.hasAttribute("data-placeholder")){const e=t.getAttribute("data-placeholder");""===t.textContent?.trim()&&(t.setAttribute("data-placeholder",e||""),t.textContent="")}}}))}static isCursorAtEnd(e){const t=e.closest(".focusable");if(!t)return!1;const n=window.getSelection();if(!n.rangeCount)return!1;const o=n.getRangeAt(0);let i=o.endContainer;return i.nodeType===Node.TEXT_NODE&&(i=i.parentNode),o.collapsed&&i===t&&o.endOffset===(o.endContainer.textContent||"").length}static isCursorAtStart(e){const t=e.closest(".focusable");if(!t)return!1;const n=window.getSelection();if(!n.rangeCount)return!1;const o=n.getRangeAt(0);let i=o.startContainer;return i.nodeType===Node.TEXT_NODE&&(i=i.parentNode),o.collapsed&&i===t&&0===o.startOffset}static isAtFirstVisibleLine(e){const t=window.getSelection();if(!t.rangeCount)return!1;const n=t.getRangeAt(0).cloneRange();return n.collapse(!0),n.setStart(e,0),n.getBoundingClientRect().top===e.getBoundingClientRect().top}static isAtLastVisibleLine(e){const t=window.getSelection();if(!t.rangeCount)return!1;const n=t.getRangeAt(0).cloneRange();return n.collapse(!1),n.setEnd(e,e.childNodes.length),n.getBoundingClientRect().bottom===e.getBoundingClientRect().bottom}static didCursorMove(e){const t=window.getSelection();if(!t.rangeCount)return Promise.resolve(!1);const n=t.getRangeAt(0).cloneRange().getBoundingClientRect();return new Promise((o=>{setTimeout((()=>{const i=t.getRangeAt(0).cloneRange().getBoundingClientRect(),r=!(n.top===i.top&&n.left===i.left);r||e.preventDefault(),o(r)}),0)}))}static isCursorOnFirstLine(){const e=window.getSelection();if(!e||!e.rangeCount)return!1;const t=e.getRangeAt(0);return 0===t.startOffset&&t.startContainer===t.commonAncestorContainer}static isCursorOnLastLine(){const e=window.getSelection();if(!e||!e.rangeCount)return!1;const t=e.getRangeAt(0);return t.endOffset===t.endContainer.textContent?.length&&t.endContainer===t.commonAncestorContainer}static getInstance(){return D.Instance.resolve("IShortcutListeners"),D.Instance.resolve("ITableListeners"),new qe}}class He{static build(){return qe.getInstance()}}!function(e){e.Text="Text",e.Cell="Cell",e.Block="Block"}(Te||(Te={}));class Oe extends F{static id="tableFloatingToolbar";static instance;focusStack;selectedCells=[];actualFocusedCell=null;tableOperationsService;controller;selectionMode=Te.Text;selectionFlag=!1;selectedText="";constructor(e,t){if(Oe.instance)throw new Error("Use TableContextFloatingToolbar.getInstance() to get instance.");super(Oe.id),this.clearAndHide=this.clearAndHide.bind(this),this.htmlElement.style.zIndex=d.ModeratelyImportant,this.controller=new AbortController,this.focusStack=e,this.tableOperationsService=t,this.attachEvents()}attachEvents(){document.addEventListener(a.Mousedown,this.handleMouseDown.bind(this)),document.addEventListener(a.Mousemove,this.handleMouseMove.bind(this)),document.addEventListener(a.Mouseup,this.handleMouseUp.bind(this)),document.addEventListener(a.Keydown,this.handleStartSelectionInCellKeyDown.bind(this)),document.addEventListener(a.Keydown,this.handleCellSelectionContinuationOnKeyDown.bind(this)),document.addEventListener(a.Keydown,this.handleKeyDown.bind(this)),document.addEventListener(a.Keyup,this.handleKeyUp.bind(this)),this.attachUIEvent(),super.attachEvents()}handleMouseDown(e){const t=e.target.closest(g.TD);t&&!t.matches(".figure-embed-container td")&&(console.log("MouseDown event on: ",e.target),e.stopImmediatePropagation(),this.controller.abort(),t!=this.actualFocusedCell&&this.hide(),this.clearAll(),this.addSelectedCell(t),this.selectionFlag=!0,this.selectionMode=Te.Text)}handleMouseMove(e){if(this.selectionFlag){const t=e.target.closest(g.TD);t&&(this.updateSelectionModeByMouseEvent(e),this.selectionMode==Te.Cell&&(e.stopImmediatePropagation(),e.preventDefault(),this.canHide&&this.hide(),this.addSelectedCell(t),document.getSelection()?.removeAllRanges()))}}handleMouseUp(e){this.selectedCells.length>0&&this.selectionFlag&&(this.resetSelectionState(),this.show())}handleKeyDown(e){const t=e.target.closest(g.TD);t&&!t.matches(".gist td")&&(e.key!=A.Enter||e.shiftKey||e.ctrlKey||e.metaKey||e.altKey?e.key==A.Escape&&this.canHide&&!K.getInstance().isVisible&&setTimeout((()=>{this.canHide&&(e.stopImmediatePropagation(),this.clearAll(),this.hide())}),10):e.stopImmediatePropagation())}handleStartSelectionInCellKeyDown(e){const t=e.target.closest(g.TD);t&&!t.matches(".gist td")&&(e.repeat||e.key!==A.Shift||(e.stopImmediatePropagation(),this.controller.abort(),this.selectionFlag=!0,this.selectionMode=Te.Text,this.addSelectedCell(t)))}handleCellSelectionContinuationOnKeyDown(e){if(this.selectionFlag){const t=e.target.closest(g.TD);if(t&&!t.matches(".gist td")&&this.selectionMode==Te.Cell&&e.shiftKey&&e.key.startsWith("Arrow")&&!e.repeat){e.stopImmediatePropagation(),e.preventDefault();const n=t.closest(g.TABLE),o=Ne.getNeighborCell(n,t,e.key);this.addSelectedCell(t),o&&this.addSelectedCell(o)}}}normalizeText(e){return e.replace(/\s+/g," ").trim()}updateTheSelectionModeByCurrentSelectionState(e){if(this.selectionFlag){const t=document.getSelection();if(t){const n=this.normalizeText(t.toString().trim()),o=e.target.closest(g.TD);if(o.matches(".gist td"))return;const i=this.normalizeText((o.textContent||"").trim()),{atStart:r,atEnd:l}=P.getSelectionTextInfo(o);""===i||n===this.selectedText.trim()&&(r||l)?(this.selectionMode=Te.Cell,this.selectedText="",this.canHide&&this.hide()):n&&(this.selectedText=n)}}}updateSelectionModeByMouseEvent(e){if(this.selectionFlag&&this.actualFocusedCell){const t=this.actualFocusedCell.getBoundingClientRect(),n=e.clientX,o=e.clientY;n>=t.left&&n<=t.right&&o>=t.top&&o<=t.bottom||(this.selectionMode=Te.Cell,this.canHide&&this.hide())}}handleKeyUp(e){e.target.closest(g.TD)&&(e.stopImmediatePropagation(),this.updateTheSelectionModeByCurrentSelectionState(e),e.key===A.Shift&&(this.resetSelectionState(),this.selectedCells.length>0&&this.show()))}addSelectedCell(e){if(0===this.selectedCells.length)return this.selectedCells.push(e),e.classList.add("selected"),this.actualFocusedCell=e,void e.focus();this.selectedCells[this.selectedCells.length-1].closest("table")===e.closest("table")&&(-1===this.selectedCells.indexOf(e)?(this.selectedCells.push(e),e.classList.add("selected"),this.actualFocusedCell=e,e.focus()):(this.actualFocusedCell=e,e.focus()))}attachUIEvent(){document.addEventListener(s.CloseElement,this.handleCloseElementEvent.bind(this))}handleCloseElementEvent(e){const t=e.detail;Oe.id==t.targetId&&this.clearAndHide()}show(){this.actualFocusedCell?(this.resetAbortController(),this.focusStack.push(this.actualFocusedCell),this.changeToolbarPositionToBeClosedTo(this.actualFocusedCell),this.processSelectionChangeEffects(),super.show(),this.actualFocusedCell.addEventListener(a.Blur,this.clearAndHide,{signal:this.controller.signal})):console.error("No focused cell found")}processSelectionChangeEffects(){G.emitResetActiveButtonsElementEvent("backgroundColor");const e={};e[u.BackgroundColorRed]=this.tableOperationsService.queryAllStateCellBackgroundColor(this.selectedCells,u.BackgroundColorRed),e[u.BackgroundColorGreen]=this.tableOperationsService.queryAllStateCellBackgroundColor(this.selectedCells,u.BackgroundColorGreen),e[u.BackgroundColorBlue]=this.tableOperationsService.queryAllStateCellBackgroundColor(this.selectedCells,u.BackgroundColorBlue),e[u.BackgroundColorYellow]=this.tableOperationsService.queryAllStateCellBackgroundColor(this.selectedCells,u.BackgroundColorYellow),e[u.BackgroundColorGrey]=this.tableOperationsService.queryAllStateCellBackgroundColor(this.selectedCells,u.BackgroundColorGrey),Object.entries(e).forEach((([e,t])=>{t&&G.emitShowHideActiveElementEvent("backgroundColor",e,"show")}))}changeToolbarPositionToBeClosedTo(e){const t=e.getBoundingClientRect();this.htmlElement.style.display="flex";const n=this.htmlElement.offsetWidth;let o=t.left+window.scrollX+0;o+n>window.innerWidth&&(o=window.innerWidth-n-20);const i=this.htmlElement.offsetHeight;let r=t.top+window.scrollY-i-10;r<0&&(r=t.bottom+window.scrollY+10),this.htmlElement.style.left=`${o}px`,this.htmlElement.style.top=`${r}px`}resetSelectionState(){this.selectionMode=Te.Text,this.selectionFlag=!1,this.selectedText=""}clearAll(){this.actualFocusedCell=null,document.querySelectorAll("td").forEach((e=>e.classList.remove("selected"))),this.selectedCells=[]}hide(){this.canHide&&super.hide()}clearAndHide(){this.clearAll(),this.hide()}resetAbortController(){this.controller=new AbortController}static getInstance(){const e=D.Instance.resolve("IFocusStack"),t=D.Instance.resolve("ITableOperationsService");return new Oe(e,t)}}class Re{static build(){const e=D.Instance.resolve("ITableOperationsService"),t=Oe.getInstance();return t.appendDropdown(Re.tableOptions(e)),t.appendSeparator(Re.separator("tableOperationsSeparator")),t.appendDropdown(Re.tableColorDropdown()),t}static tableOptions(e){const t=new se("tableOptionsSelect"),n=new Ae("tableOptions","Options",t),o=new ne("tableOptionsMenu",n,t);t.append(new me(t,"Insert Column")),t.append(new le("turnIntoOptionText",t,h.insertTableColumnLeft,O.ELEMENT_TYPES.PARAGRAPH,ee.create(i.ColumnLeft,J.medium).htmlElement,"Left")),t.append(new le("turnIntoOptionText",t,h.insertTableColumnRight,O.ELEMENT_TYPES.PARAGRAPH,ee.create(i.ColumnRight,J.medium).htmlElement,"Right")),t.append(new me(t,"Insert Row")),t.append(new le("turnIntoOptionTodoList",t,h.insertTableRowAbove,O.ELEMENT_TYPES.CHECK_LIST,ee.create(i.RowAbove,J.medium).htmlElement,"Above")),t.append(new le("turnIntoOptionTodoList",t,h.insertTableRowBelow,O.ELEMENT_TYPES.CHECK_LIST,ee.create(i.RowBelow,J.medium).htmlElement,"Below")),t.append(new me(t,"Remove"));const r=new le("turnIntoOptionText",t,h.removeColumn,O.ELEMENT_TYPES.PARAGRAPH,ee.create(i.deleteSweep,J.medium).htmlElement,"Column");r.addCssClass("danger-option"),t.append(r);const l=new le("turnIntoOptionTodoList",t,h.removeRow,O.ELEMENT_TYPES.CHECK_LIST,ee.create(i.deleteSweep,J.medium).htmlElement,"Row");return l.addCssClass("danger-option"),t.append(l),o}static tableColorDropdown(){const e=new se("colorTableOptionSelect"),t=new Ae("colorTableButton",new ue("#FAF4D1").htmlElement,e),n=new ne("tableColorOptionsMenu",t,e);e.append(new me(e,"Background"));const o=new le("backgroundOptionRed",e,h.toggleCellHiliteColor,u.HiliteColorRed,new ue(u.HiliteColorRed).htmlElement,"Red");o.addClass("backgroundColor");const i=new le("backgroundOptionGreen",e,h.toggleCellHiliteColor,u.HiliteColorGreen,new ue(u.HiliteColorGreen).htmlElement,"Green");i.addClass("backgroundColor");const r=new le("backgroundOptionBlue",e,h.toggleCellHiliteColor,u.HiliteColorBlue,new ue(u.HiliteColorBlue).htmlElement,"Blue");r.addClass("backgroundColor");const l=new le("backgroundOptionYellow",e,h.toggleCellHiliteColor,u.HiliteColorYellow,new ue(u.HiliteColorYellow).htmlElement,"Yellow");l.addClass("backgroundColor");const s=new le("backgroundOptionGrey",e,h.toggleCellHiliteColor,u.HiliteColorGrey,new ue(u.HiliteColorGrey).htmlElement,"Grey");s.addClass("backgroundColor");const a=new le("backgroundOptionNone",e,h.toggleCellHiliteColor,u.HiliteColorNone,new ue(u.HiliteColorNone).htmlElement,"None");return a.addClass("backgroundColor"),e.append(o),e.append(i),e.append(r),e.append(l),e.append(s),e.append(a),n}static separator(e){return new ae(e)}}class De{static embedImage(e,t){if(!this.isValidImageURL(e))throw new Error("invalid image");const n=this.createEmbedContainer(),o=document.createElement("img");o.src=e,o.alt="Embedded Image",o.style.maxWidth="100%",o.style.width="auto",o.style.height="auto",n.appendChild(o),n.classList.add(r.AlignToolClass),De.finalizeEmbed(n,[r.AlignToolClass,"fit-content","x-resizable"],t)}static isValidImageURL(e){return/\.(jpe?g|png|gif|bmp|tif?f|webp)$/i.test(e)}static embedGoogleSheet(e,t){const n=e.pathname.split("/")[3],o=De.createEmbedContainer(["embed-container"]),i=document.createElement("iframe"),r=encodeURIComponent(n);i.src=`https://docs.google.com/spreadsheets/d/e/${r}/pubhtml?widget=true&amp;headers=false`,i.style.width="100%",i.style.height="450px",i.frameBorder="0",i.allowFullscreen=!0,o.appendChild(i),De.finalizeEmbed(o,["x-resizable"],t)}static embedYouTubeVideoAsIframe(e,t){const n=e.searchParams.get("v");if(n){const e=this.createEmbedContainer(["embed-container"]),o=document.createElement("iframe"),i=encodeURIComponent(n);o.src=`https://www.youtube.com/embed/${i}`,o.frameBorder="0",o.allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",o.allowFullscreen=!0,e.appendChild(o),e.classList.add(r.AlignToolClass),this.finalizeEmbed(e,["x-resizable",r.AlignToolClass],t)}else console.error("Invalid YouTube video URL")}static embedYouTubeShortAsIframe(e,t){const n=e.pathname.split("/"),o=n[n.length-1];if(o){const e=De.createEmbedContainer(["embed-container"]),n=document.createElement("iframe"),i=encodeURIComponent(o);n.src=`https://www.youtube.com/embed/${i}`,n.frameBorder="0",n.allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",n.allowFullscreen=!0,e.appendChild(n),De.finalizeEmbed(e,["x-resizable",r.AlignToolClass],t)}else console.error("Invalid YouTube Shorts URL")}static isYouTubeDomain(e,t){return e.endsWith("youtube.com")||e.endsWith("youtu.be")}static embedYouTubePlaylistAsIframe(e,t){const n=e.searchParams.get("list");if(n){const e=De.createEmbedContainer(["embed-container"]),o=encodeURIComponent(n),i=document.createElement("iframe");i.src=`https://www.youtube.com/embed/videoseries?list=${o}`,i.setAttribute("allowfullscreen","true"),e.appendChild(i),De.finalizeEmbed(e,["x-resizable",r.AlignToolClass],t)}else console.error("Invalid YouTube playlist URL")}static embedSpotifyContent(e,t,n){const o=e.pathname.split("/").pop(),i=this.createEmbedContainer(["embed-container"]);if(i.classList.add("spotify-embed",r.AlignToolClass),!o)return void console.error("contentId is empty");const l=encodeURIComponent(o),s=document.createElement("iframe");switch(s.classList.add("spotify-embed"),s.src=`https://open.spotify.com/embed/${n}/${l}`,s.frameBorder="0",s.setAttribute("scrolling","no"),n){case Se.SpotifyTrack:s.style.height="80px";break;case Se.SpotifyPlaylist:case Se.SpotifyShow:case Se.SpotifyEpisode:case Se.SpotifyArtist:s.style.height="380px";break;default:s.style.height="300px"}i.appendChild(s),this.finalizeEmbed(i,["x-resizable",r.AlignToolClass],t)}static async embedGistAsScript(e,t){const n=e.pathname.split("/").pop();if(!n)return void console.error("Invalid Gist ID");const o=document.createElement("div");o.classList.add("shadow-element");const i=De.createEmbedContainer(["gist-embed-container","figure-embed-container","ignore-text-floating-toolbar"]);i.style.minHeight="100px",i.style.width="100%",t.appendChild(i),i.appendChild(o);const r=o.attachShadow({mode:"open"}),l=`https://gist.github.com/${encodeURIComponent(n)}.js`,s=document.createElement("script");s.type="text/javascript",s.src=l,s.async=!0;const a=document.write;let c="";document.write=e=>{c+=e},s.onload=()=>{document.write=a;const e=document.createElement("div");e.innerHTML=c,Array.from(e.childNodes).forEach((e=>{r.appendChild(e)})),console.log("Gist loaded successfully")},s.onerror=()=>{document.write=a,console.error("Failed to load the Gist")},r.appendChild(s),De.finalizeEmbed(i,[],t)}static embedCodepenAsIframe(e,t){const n=e.pathname.split("/");if(n.length<4||""===n[1]||""===n[3])return void console.error("Invalid URL: Expected format /user/{username}/pen/{penId}");const o=n[1],i=n[3],r=encodeURIComponent(o),l=encodeURIComponent(i),s=De.createEmbedContainer(["embed-container"]),a=document.createElement("iframe");a.src=`https://codepen.io/${r}/embed/${l}?height=265&theme-id=light&default-tab=js,result`,a.style.border="none",a.style.height="100%",a.style.width="100%",a.style.overflow="visible",a.setAttribute("sandbox","allow-scripts allow-same-origin"),s.appendChild(a),De.finalizeEmbed(s,["y-resizable"],t);const c=new ResizeObserver((e=>{for(let t of e){const{height:e}=t.contentRect;a.style.height=`${e}px`}})),d=s.closest(".johannes-content-element");d&&(d.classList.add("overflow-hidden"),c.observe(d))}static createEmbedContainer(e=[]){const t=document.createElement("figure");return t.classList.add(...e),t}static finalizeEmbed(e,t=[],n){const o=n.closest(`.${l.ContentElement}`);if(o){for(o.classList.add(...t);o.firstChild;)o.removeChild(o.firstChild);o.appendChild(e);const n=o.closest(".block"),i=n?.querySelector(".block-toolbar-wrapper");i?.remove()}}static determineEmbedType(e){const t=new URL(e),n=t.hostname.toLowerCase(),o=t.pathname.toLowerCase();if(/^(?:.*\.)?spotify\.com$/.test(n)){if(o.includes("/track"))return Se.SpotifyTrack;if(o.includes("/playlist"))return Se.SpotifyPlaylist;if(o.includes("/artist"))return Se.SpotifyArtist;if(o.includes("/episode"))return Se.SpotifyEpisode;if(o.includes("/show"))return Se.SpotifyShow}else if(/^(?:.*\.)?(youtube\.com|youtu\.be)$/.test(n)){if(o.includes("/watch"))return t.searchParams.has("list")?Se.YouTubePlaylist:Se.YouTubeVideo;if(o.includes("/playlist"))return Se.YouTubePlaylist;if(o.includes("/shorts"))return Se.YouTubeShort}else{if("vimeo.com"===n)return Se.VimeoVideo;if("docs.google.com"===n&&o.includes("/spreadsheets"))return Se.GoogleSheet;if("twitter.com"===n)return Se.Tweet;if("google.com"===n&&o.includes("/maps"))return Se.GoogleMap;if("gist.github.com"===n)return Se.GitHubGist;if("gitlab.com"===n&&o.includes("/snippets"))return Se.GitLabSnippet;if("codepen.io"===n)return Se.CodePen}return null}}!function(e){e.SpotifyTrack="track",e.SpotifyPlaylist="playlist",e.SpotifyArtist="artist",e.SpotifyEpisode="episode",e.SpotifyShow="show",e.YouTubeVideo="video",e.YouTubePlaylist="playlist",e.YouTubeShort="short",e.VimeoVideo="video",e.GoogleSheet="sheet",e.Tweet="tweet",e.GoogleMap="map",e.GitHubGist="gist",e.GitLabSnippet="snippet",e.CodePen="pen"}(Se||(Se={}));class Pe extends R{id;focusStack;constructor(){const e="mediaInputter";super({id:e}),this.id=e,this.focusStack=D.Instance.resolve("IFocusStack"),this.attachEvents()}init(){const e=document.createElement("div");e.id=this.props.id,e.classList.add("tab-container","soft-box-shadow"),e.style.display="none",e.style.zIndex=d.ExtremelyImportant;const t=document.createElement("ul");t.classList.add("nav","nav-underline");const n=this.createNavItem("uploadTab","Upload",!0),o=this.createNavItem("embedTab","Embed");t.appendChild(n),t.appendChild(o);const i=document.createElement("div");i.classList.add("tab-content");const r=this.createUploadContent(),l=this.createEmbedContent();return i.appendChild(r),i.appendChild(l),e.appendChild(t),e.appendChild(i),e}createNavItem(e,t,n=!1){const o=document.createElement("li");o.classList.add("nav-item"),o.id=e;const i=document.createElement("a");return i.classList.add("nav-link"),i.innerText=t,o.appendChild(i),o}createUploadContent(){const e=document.createElement("div");e.id="uploadContent",e.classList.add("upload-content","content-data");const t=document.createElement("label");t.classList.add("blue-button"),t.innerText="Upload file";const n=document.createElement("div");return n.classList.add("text-info"),n.innerText="Maximum file size: 5MB",e.appendChild(t),e.appendChild(n),e}createEmbedContent(){const e=document.createElement("div");e.id="embedContent",e.classList.add("content-data","embed-content");const t=document.createElement("input");t.type="text";const n=document.createElement("button");return n.classList.add("blue-button"),n.innerText="Embed",e.appendChild(t),e.appendChild(n),n.addEventListener(a.Click,(()=>this.embedGeneric(t))),t.addEventListener(a.Keydown,(e=>{e.key==A.Enter&&this.embedGeneric(t)})),t.addEventListener(a.Focusin,(()=>this.resetInputBgColor(t))),e}resetInputBgColor(e){e.style.backgroundColor=""}embedGeneric(e){const t=e.value,n=this.focusStack.peek(),i=n?.closest(`.${l.ContentElement}`)?.getAttribute("data-content-type");try{const e=new URL(t);if(!n)return void console.error("not element found");if(i==o.Image)De.embedImage(t,n);else if(i==o.Iframe){const o=De.determineEmbedType(t);switch(o){case Se.YouTubeVideo:De.embedYouTubeVideoAsIframe(e,n);break;case Se.YouTubePlaylist:De.embedYouTubePlaylistAsIframe(e,n);break;case Se.YouTubeShort:De.embedYouTubeShortAsIframe(e,n);break;case Se.SpotifyTrack:case Se.SpotifyPlaylist:case Se.SpotifyArtist:case Se.SpotifyEpisode:case Se.SpotifyShow:case Se.SpotifyPlaylist:De.embedSpotifyContent(e,n,o);break;case Se.GitHubGist:De.embedGistAsScript(e,n);break;case Se.CodePen:De.embedCodepenAsIframe(e,n);break;default:throw new Error("Unsupported")}}this.hide()}catch(e){const t=document.querySelector("#embedContent input");t&&(t.style.backgroundColor="rgb(253, 222, 222)",t.classList.add("shake-animation"),setTimeout((()=>{t.classList.remove("shake-animation")}),1e3))}}set inputValue(e){const t=this.htmlElement.querySelector("input");t&&(t.value=e)}get display(){return"flex"}attachEvents(){const e=this.htmlElement.querySelector("#uploadTab");e?.addEventListener("click",(()=>{this.setActiveTab("uploadTab","uploadContent")}));const t=this.htmlElement.querySelector("#embedTab");t?.addEventListener("click",(()=>{this.setActiveTab("embedTab","embedContent")})),document.addEventListener(a.Keydown,this.handlerKeydownEvents.bind(this)),document.addEventListener(a.Click,this.handlerClickEvents.bind(this)),super.attachUIEvent()}handlerKeydownEvents(e){e.key==A.Escape&&this.canHide&&this.hide()}handlerClickEvents(e){this.hideMediaInputterOnExternalClick(e),this.showMediaInputterOnMediaInputterElementClick(e)}hideMediaInputterOnExternalClick(e){const t=P.findClickedElementOrAncestorById(e,this.id),n=P.findClickedElementOrAncestorByClass(e,l.ShowMediaInputOnClick);if(!t&&!n&&this.isVisible)return e.stopImmediatePropagation(),void this.hide()}showMediaInputterOnMediaInputterElementClick(e){const t=P.findClickedElementOrAncestorByClass(e,l.ShowMediaInputOnClick);if(t)return e.stopImmediatePropagation(),e.preventDefault(),this.focusStack.push(t),void(this.isVisible?this.hide():this.show())}findClassWithSuffix(e,t){const n=new RegExp(`.*${t}$`);for(let t of e.classList)if(n.test(t))return t;return null}getTab(e){return document.getElementById(e)}getContent(e){return document.getElementById(e)}setActiveTab(e,t){document.querySelectorAll(".nav-item").forEach((e=>{e.classList.remove("active")})),document.querySelectorAll(".content-data").forEach((e=>{e.classList.remove("active")})),this.getTab(e)?.classList.add("active"),this.getContent(t)?.classList.add("active")}show(){const e=this.focusStack.peek(),t=e?.querySelector(`.${l.ShowMediaInputOnClick}`)||e?.closest(`.${l.ShowMediaInputOnClick}`);if(t){const e=this.findClassWithSuffix(t,"-embed-placeholder-text");e&&this.setInputPlaceholder(e)}if(e){const t=e.querySelector(`.${l.ShowMediaInputUpload}`)||e.closest(`.${l.ShowMediaInputUpload}`),n=this.htmlElement.querySelector("#uploadTab"),o=this.htmlElement.querySelector("#embedTab"),i=this.htmlElement.querySelector("#uploadContent"),r=this.htmlElement.querySelector("#embedContent");t&&n&&i?(n.style.display="inline",n.classList.add("active"),i.classList.add("active"),r.classList.remove("active"),o.classList.remove("active")):(n.style.display="none",n.classList.remove("active"),i.classList.remove("active"),r.classList.add("active"),o.classList.add("active"))}this.htmlElement.style.visibility="visible",e&&this.changeToolbarPositionToBeClosedTo(e),super.show();const n=document.querySelector("#embedContent input");n&&this.isElementVisible(n)&&(n.style.backgroundColor="white",setTimeout((()=>{n.focus()}),100))}setInputPlaceholder(e){const t=document.querySelector("#embedContent input");"image-embed-placeholder-text"!=e?"youtube-embed-placeholder-text"!=e?"spotify-embed-placeholder-text"!=e?"github-gist-embed-placeholder-text"!=e?"codepen-embed-placeholder-text"!=e?t.setAttribute("placeholder","Paste URL here..."):t.setAttribute("placeholder","https://codepen.io/..."):t.setAttribute("placeholder","https://gist.github.com/..."):t.setAttribute("placeholder","https://open.spotify.com/..."):t.setAttribute("placeholder","https://www.youtube.com/..."):t.setAttribute("placeholder","https://example.com/image.jpg")}isElementVisible(e){if(null===e.offsetParent)return!1;const t=e.getBoundingClientRect();return t.width>0&&t.height>0}hide(){this.inputValue="",super.hide()}changeToolbarPositionToBeClosedTo(e){const t=e.getBoundingClientRect();this.htmlElement.style.display="flex";let n=t.left+window.scrollX+t.width/2-this.htmlElement.offsetWidth/2,o=t.bottom+window.scrollY+10;this.htmlElement.style.left=`${n}px`,this.htmlElement.style.top=`${o}px`}}class Fe{static build(){return new Pe}}class Ve{static build(){return $.getInstance(Ie.build(),He.build(),te.build(),Ce.build(),we.build(),Re.build(),Fe.build())}}class _e{static instance;editor;constructor(e){if(_e.instance)throw new Error;this.editor=e,_e.instance=this}static build(){return _e.instance?_e.instance:new _e(Ve.build())}start(){return this.insertIcons(),this.editor}insertIcons(){if(!document.querySelector(".svg-icons-container")){const e=document.createElement("div");e.innerHTML='<svg shape-rendering="geometricPrecision">\r\n\r\n    <symbol id="icon-plus" viewBox="0 0 24 24" aria-hidden="true">\r\n        <path d="M11 12.5V17.5H12.5V12.5H17.5V11H12.5V6H11V11H6V12.5H11Z" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-drag" viewBox="0 -960 960 960" aria-hidden="true">\r\n        <path d="M360-160q-33 0-56.5-23.5T280-240q0-33 23.5-56.5T360-320q33 0 56.5 23.5T440-240q0 33-23.5 56.5T360-160Zm240 0q-33 0-56.5-23.5T520-240q0-33 23.5-56.5T600-320q33 0 56.5 23.5T680-240q0 33-23.5 56.5T600-160ZM360-400q-33 0-56.5-23.5T280-480q0-33 23.5-56.5T360-560q33 0 56.5 23.5T440-480q0 33-23.5 56.5T360-400Zm240 0q-33 0-56.5-23.5T520-480q0-33 23.5-56.5T600-560q33 0 56.5 23.5T680-480q0 33-23.5 56.5T600-400ZM360-640q-33 0-56.5-23.5T280-720q0-33 23.5-56.5T360-800q33 0 56.5 23.5T440-720q0 33-23.5 56.5T360-640Zm240 0q-33 0-56.5-23.5T520-720q0-33 23.5-56.5T600-800q33 0 56.5 23.5T680-720q0 33-23.5 56.5T600-640Z" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-paragraph" viewBox="0 -960 960 960" aria-hidden="true">\r\n        <path d="M360-160v-240q-83 0-141.5-58.5T160-600q0-83 58.5-141.5T360-800h360v80h-80v560h-80v-560H440v560h-80Z" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-wordpress-paragraph" viewBox="0 0 24 24">\r\n        <path d="m9.99609 14v-.2251l.00391.0001v6.225h1.5v-14.5h2.5v14.5h1.5v-14.5h3v-1.5h-8.50391c-2.76142 0-5 2.23858-5 5 0 2.7614 2.23858 5 5 5z" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-wordpress-list" viewBox="0 0 24 24">\r\n        <path d="M4 4v1.5h16V4H4zm8 8.5h8V11h-8v1.5zM4 20h16v-1.5H4V20zm4-8c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2z" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-wordpress-numbered-list" viewBox="0 -960 960 960">\r\n        <path d="M163.85-100q-10.34 0-17.09-6.75-6.76-6.75-6.76-17.08 0-10.32 6.76-17.09 6.75-6.77 17.09-6.77H240V-190h-36.15q-10.34 0-17.09-6.75-6.76-6.75-6.76-17.08 0-10.32 6.76-17.09 6.75-6.77 17.09-6.77H240V-280h-76.15q-10.34 0-17.09-6.75-6.76-6.75-6.76-17.08 0-10.32 6.76-17.09 6.75-6.77 17.09-6.77h90q14.38 0 24.11 9.73 9.73 9.73 9.73 24.11v47.7q0 14.38-9.73 24.11-9.73 9.73-24.11 9.73 14.38 0 24.11 9.73 9.73 9.73 9.73 24.12v44.61q0 14.39-9.73 24.12T253.85-100h-90Zm3.46-266.15q-11.46 0-19.39-7.93Q140-382 140-393.46V-470q0-14.38 9.73-24.12 9.73-9.73 24.12-9.73H240v-42.3h-76.15q-10.34 0-17.09-6.76-6.76-6.75-6.76-17.07 0-10.33 6.76-17.1 6.75-6.77 17.09-6.77h90q14.38 0 24.11 9.73 9.73 9.74 9.73 24.12v70q0 14.38-9.73 24.12-9.73 9.73-24.11 9.73h-66.16v42.3h76.16q10.33 0 17.09 6.76 6.75 6.75 6.75 17.07 0 10.33-6.75 17.1-6.76 6.77-17.09 6.77h-96.54Zm56.56-266.16q-10.33 0-17.1-6.75-6.77-6.76-6.77-17.09v-156.16h-36.15q-10.34 0-17.09-6.75-6.76-6.75-6.76-17.07 0-10.33 6.76-17.1 6.75-6.77 17.09-6.77h56.92q11.46 0 19.19 7.73t7.73 19.19v176.93q0 10.33-6.75 17.09-6.75 6.75-17.07 6.75ZM402.31-210q-12.75 0-21.38-8.63-8.62-8.63-8.62-21.38 0-12.76 8.62-21.37 8.63-8.62 21.38-8.62H790q12.75 0 21.37 8.63 8.63 8.63 8.63 21.38 0 12.76-8.63 21.37Q802.75-210 790-210H402.31Zm0-240q-12.75 0-21.38-8.63-8.62-8.63-8.62-21.38 0-12.76 8.62-21.37 8.63-8.62 21.38-8.62H790q12.75 0 21.37 8.63 8.63 8.63 8.63 21.38 0 12.76-8.63 21.37Q802.75-450 790-450H402.31Zm0-240q-12.75 0-21.38-8.63-8.62-8.63-8.62-21.38 0-12.76 8.62-21.37 8.63-8.62 21.38-8.62H790q12.75 0 21.37 8.63 8.63 8.63 8.63 21.38 0 12.76-8.63 21.37Q802.75-690 790-690H402.31Z" />\r\n\r\n    </symbol>\r\n\r\n    <symbol id="icon-wordpress-bulleted-list" viewBox="0 0 512 512">\r\n        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M160 144h288M160 256h288M160 368h288" />\r\n        <circle cx="80" cy="144" r="16" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />\r\n        <circle cx="80" cy="256" r="16" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />\r\n        <circle cx="80" cy="368" r="16" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-wordpress-separator" viewBox="0 0 24 24">\r\n        <path d="M4.5 12.5v4H3V7h1.5v3.987h15V7H21v9.5h-1.5v-4h-15Z" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-wordpress-quote" viewBox="0 0 24 24">\r\n        <path d="M13 6v6h5.2v4c0 .8-.2 1.4-.5 1.7-.6.6-1.6.6-2.5.5h-.3v1.5h.5c1 0 2.3-.1 3.3-1 .6-.6 1-1.6 1-2.8V6H13zm-9 6h5.2v4c0 .8-.2 1.4-.5 1.7-.6.6-1.6.6-2.5.5h-.3v1.5h.5c1 0 2.3-.1 3.3-1 .6-.6 1-1.6 1-2.8V6H4v6z" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-wordpress-twitter" viewBox="0 0 24 24">\r\n        <path d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-julia-head-1" viewBox="0 0 1080 1080">\r\n        <path d="M507.001 527.171V546H332.471V527.171L372.301 522.826C380.026 521.86 384.613 519.929 386.061 517.032C387.509 514.136 388.233 504.238 388.233 487.341V309.19H169.528V487.341C169.528 504.238 170.252 514.136 171.701 517.032C173.149 519.929 177.736 521.86 185.46 522.826L225.291 527.171V546H50.7611V527.171L90.5915 522.826C98.3162 521.86 102.903 519.929 104.351 517.032C105.8 514.136 106.524 504.238 106.524 487.341V112.21C106.524 95.3127 105.8 85.4154 104.351 82.5186C102.903 79.6219 98.3162 77.6907 90.5915 76.7252L50.7611 73.1042V53.5511H225.291V73.1042L185.46 76.7252C177.736 77.6907 173.149 79.6219 171.701 82.5186C170.252 85.4154 169.528 95.3127 169.528 112.21V286.016H388.233V112.21C388.233 95.3127 387.509 85.4154 386.061 82.5186C384.613 79.6219 380.026 77.6907 372.301 76.7252L332.471 73.1042V53.5511H507.001V73.1042L467.17 76.7252C459.445 77.6907 454.859 79.6219 453.411 82.5186C451.962 85.4154 451.238 95.3127 451.238 112.21V487.341C451.238 504.238 451.962 514.136 453.411 517.032C454.859 519.929 459.445 521.86 467.17 522.826L507.001 527.171ZM563.187 113.659L658.781 53.5511H710.198V487.341C710.198 504.238 710.922 514.136 712.371 517.032C713.819 519.929 718.405 521.86 726.13 522.826L765.961 527.171V546H576.947V527.171L631.261 522.826C638.986 522.343 643.573 520.653 645.021 517.757C646.469 514.377 647.193 504.238 647.193 487.341V88.3122L575.499 133.212L563.187 113.659Z" fill="#343434" />\r\n        <line x1="49.7258" y1="721.29" x2="1035" y2="721.29" stroke="#7E7B7B" stroke-width="54.2021" />\r\n        <line x1="49.7258" y1="865.829" x2="737.402" y2="865.829" stroke="#7E7B7B" stroke-width="54.2021" />\r\n        <line x1="49.7258" y1="1010.37" x2="980.46" y2="1010.37" stroke="#7E7B7B" stroke-width="54.2021" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-julia-head-2" viewBox="0 0 1080 1080">\r\n        <path d="M507.001 527.171V546H332.471V527.171L372.301 522.826C380.026 521.86 384.613 519.929 386.061 517.032C387.509 514.136 388.233 504.238 388.233 487.341V309.19H169.528V487.341C169.528 504.238 170.252 514.136 171.701 517.032C173.149 519.929 177.736 521.86 185.46 522.826L225.291 527.171V546H50.7611V527.171L90.5915 522.826C98.3162 521.86 102.903 519.929 104.351 517.032C105.8 514.136 106.524 504.238 106.524 487.341V112.21C106.524 95.3127 105.8 85.4154 104.351 82.5186C102.903 79.6219 98.3162 77.6907 90.5915 76.7252L50.7611 73.1042V53.5511H225.291V73.1042L185.46 76.7252C177.736 77.6907 173.149 79.6219 171.701 82.5186C170.252 85.4154 169.528 95.3127 169.528 112.21V286.016H388.233V112.21C388.233 95.3127 387.509 85.4154 386.061 82.5186C384.613 79.6219 380.026 77.6907 372.301 76.7252L332.471 73.1042V53.5511H507.001V73.1042L467.17 76.7252C459.445 77.6907 454.859 79.6219 453.411 82.5186C451.962 85.4154 451.238 95.3127 451.238 112.21V487.341C451.238 504.238 451.962 514.136 453.411 517.032C454.859 519.929 459.445 521.86 467.17 522.826L507.001 527.171ZM857.208 402.61H876.037V546H585.637V507.618C585.637 474.305 591.189 446.545 602.294 424.336C613.398 402.128 627.64 383.299 645.021 367.849C662.884 351.917 681.955 337.433 702.232 324.398C719.612 312.811 736.51 300.983 752.925 288.913C769.34 276.843 782.858 262.118 793.48 244.737C804.584 226.874 810.136 204.665 810.136 178.112C810.136 141.419 802.894 114.142 788.41 96.2782C774.409 78.4149 754.615 69.4832 729.027 69.4832C695.714 69.4832 672.54 81.5531 659.505 105.693C646.952 129.35 643.09 163.386 647.918 207.803L584.913 196.216C580.085 170.146 582.016 145.765 590.707 123.073C599.88 100.382 616.053 82.0359 639.227 68.0349C662.401 53.5511 692.576 46.3092 729.751 46.3092C765.478 46.3092 794.445 52.5855 816.654 65.1381C838.862 77.6907 855.036 94.1057 865.175 114.383C875.313 134.66 880.383 156.386 880.383 179.56C880.383 206.114 875.313 228.322 865.175 246.185C855.036 264.049 841.759 278.774 825.344 290.361C808.929 301.948 791.066 312.328 771.754 321.501C752.442 330.191 733.613 339.365 715.267 349.02C697.404 358.193 680.989 369.056 666.022 381.609C651.539 394.162 639.469 409.37 629.813 427.233C620.64 444.613 615.088 466.098 613.157 491.686H799.997C816.895 491.686 827.034 490.72 830.413 488.789C834.276 486.375 837.173 481.064 839.104 472.857L857.208 402.61Z" fill="#343434" />\r\n        <line x1="49.7258" y1="721.29" x2="1035" y2="721.29" stroke="#7E7B7B" stroke-width="54.2021" />\r\n        <line x1="49.7258" y1="865.829" x2="737.402" y2="865.829" stroke="#7E7B7B" stroke-width="54.2021" />\r\n        <line x1="49.7258" y1="1010.37" x2="980.46" y2="1010.37" stroke="#7E7B7B" stroke-width="54.2021" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-julia-head-3" viewBox="0 0 1080 1080">\r\n        <path d="M507.001 527.171V546H332.471V527.171L372.301 522.826C380.026 521.86 384.613 519.929 386.061 517.032C387.509 514.136 388.233 504.238 388.233 487.341V309.19H169.528V487.341C169.528 504.238 170.252 514.136 171.701 517.032C173.149 519.929 177.736 521.86 185.46 522.826L225.291 527.171V546H50.7611V527.171L90.5915 522.826C98.3162 521.86 102.903 519.929 104.351 517.032C105.8 514.136 106.524 504.238 106.524 487.341V112.21C106.524 95.3127 105.8 85.4154 104.351 82.5186C102.903 79.6219 98.3162 77.6907 90.5915 76.7252L50.7611 73.1042V53.5511H225.291V73.1042L185.46 76.7252C177.736 77.6907 173.149 79.6219 171.701 82.5186C170.252 85.4154 169.528 95.3127 169.528 112.21V286.016H388.233V112.21C388.233 95.3127 387.509 85.4154 386.061 82.5186C384.613 79.6219 380.026 77.6907 372.301 76.7252L332.471 73.1042V53.5511H507.001V73.1042L467.17 76.7252C459.445 77.6907 454.859 79.6219 453.411 82.5186C451.962 85.4154 451.238 95.3127 451.238 112.21V487.341C451.238 504.238 451.962 514.136 453.411 517.032C454.859 519.929 459.445 521.86 467.17 522.826L507.001 527.171ZM693.542 304.121H673.988V280.947H693.542C733.613 280.947 761.615 270.808 777.548 250.531C793.963 230.253 802.17 204.183 802.17 172.318C802.17 138.523 795.17 112.935 781.169 95.5541C767.168 78.1735 747.373 69.4832 721.785 69.4832C688.472 69.4832 665.298 81.5531 652.263 105.693C639.71 129.35 635.848 163.386 640.676 207.803L577.671 196.216C573.326 170.146 575.499 145.765 584.189 123.073C593.362 100.382 609.294 82.0359 631.985 68.0349C655.16 53.5511 685.334 46.3092 722.509 46.3092C758.236 46.3092 786.962 52.3441 808.688 64.4139C830.896 76.0009 847.07 91.4503 857.208 110.762C867.347 129.591 872.416 150.11 872.416 172.318C872.416 206.114 862.036 232.909 841.276 252.703C820.999 272.498 791.549 285.775 752.925 292.534C793.963 298.81 825.344 312.811 847.07 334.537C869.278 356.262 880.383 385.713 880.383 422.888C880.383 446.545 874.589 468.27 863.002 488.065C851.898 507.859 834.517 523.792 810.86 535.861C787.686 547.448 757.512 553.242 720.337 553.242C685.093 553.242 654.194 545.034 627.64 528.619C601.57 512.204 582.982 482.754 571.878 440.268L617.502 427.233C621.364 453.787 628.123 474.547 637.779 489.513C647.918 504.48 659.746 515.101 673.264 521.378C687.265 527.171 701.99 530.068 717.44 530.068C779.237 530.068 810.136 494.341 810.136 422.888C810.136 388.127 801.446 359.642 784.065 337.433C766.685 315.225 736.51 304.121 693.542 304.121Z" fill="#343434" />\r\n        <line x1="49.7257" y1="721.29" x2="1035" y2="721.29" stroke="#7E7B7B" stroke-width="54.2021" />\r\n        <line x1="49.7257" y1="865.829" x2="737.402" y2="865.829" stroke="#7E7B7B" stroke-width="54.2021" />\r\n        <line x1="49.7257" y1="1010.37" x2="980.46" y2="1010.37" stroke="#7E7B7B" stroke-width="54.2021" />\r\n\r\n    </symbol>\r\n\r\n    <symbol id="icon-julia-head-4" viewBox="0 0 1080 1080">\r\n        <path d="M507.001 527.171V546H332.471V527.171L372.301 522.826C380.026 521.86 384.613 519.929 386.061 517.032C387.509 514.136 388.233 504.238 388.233 487.341V309.19H169.528V487.341C169.528 504.238 170.252 514.136 171.701 517.032C173.149 519.929 177.736 521.86 185.46 522.826L225.291 527.171V546H50.7611V527.171L90.5915 522.826C98.3162 521.86 102.903 519.929 104.351 517.032C105.8 514.136 106.524 504.238 106.524 487.341V112.21C106.524 95.3127 105.8 85.4154 104.351 82.5186C102.903 79.6219 98.3162 77.6907 90.5915 76.7252L50.7611 73.1042V53.5511H225.291V73.1042L185.46 76.7252C177.736 77.6907 173.149 79.6219 171.701 82.5186C170.252 85.4154 169.528 95.3127 169.528 112.21V286.016H388.233V112.21C388.233 95.3127 387.509 85.4154 386.061 82.5186C384.613 79.6219 380.026 77.6907 372.301 76.7252L332.471 73.1042V53.5511H507.001V73.1042L467.17 76.7252C459.445 77.6907 454.859 79.6219 453.411 82.5186C451.962 85.4154 451.238 95.3127 451.238 112.21V487.341C451.238 504.238 451.962 514.136 453.411 517.032C454.859 519.929 459.445 521.86 467.17 522.826L507.001 527.171ZM762.34 487.341V418.543H553.049V395.369C577.671 369.298 598.914 343.951 616.778 319.329C634.641 294.223 650.09 268.394 663.126 241.84C676.161 215.287 687.507 186.802 697.163 156.386C707.301 125.487 716.474 91.2089 724.682 53.5511H801.446C782.134 121.625 753.891 182.698 716.716 236.771C679.541 290.844 635.124 343.71 583.465 395.369H762.34V281.671L825.344 271.532V395.369H881.107V418.543H825.344V487.341C825.344 504.238 826.068 514.136 827.517 517.032C828.965 519.929 833.552 521.86 841.276 522.826L881.107 527.171V546H692.093V527.171L746.407 522.826C754.132 522.343 758.719 520.653 760.167 517.757C761.615 514.377 762.34 504.238 762.34 487.341Z" fill="#343434" />\r\n        <line x1="49.7258" y1="721.29" x2="1035" y2="721.29" stroke="#7E7B7B" stroke-width="54.2021" />\r\n        <line x1="49.7258" y1="865.829" x2="737.402" y2="865.829" stroke="#7E7B7B" stroke-width="54.2021" />\r\n        <line x1="49.7258" y1="1010.37" x2="980.46" y2="1010.37" stroke="#7E7B7B" stroke-width="54.2021" />\r\n\r\n    </symbol>\r\n\r\n    <symbol id="icon-julia-head-5" viewBox="0 0 1080 1080">\r\n        <path d="M507.001 527.171V546H332.471V527.171L372.301 522.826C380.026 521.86 384.613 519.929 386.061 517.032C387.509 514.136 388.233 504.238 388.233 487.341V309.19H169.528V487.341C169.528 504.238 170.252 514.136 171.701 517.032C173.149 519.929 177.736 521.86 185.46 522.826L225.291 527.171V546H50.7611V527.171L90.5915 522.826C98.3162 521.86 102.903 519.929 104.351 517.032C105.8 514.136 106.524 504.238 106.524 487.341V112.21C106.524 95.3127 105.8 85.4154 104.351 82.5186C102.903 79.6219 98.3162 77.6907 90.5915 76.7252L50.7611 73.1042V53.5511H225.291V73.1042L185.46 76.7252C177.736 77.6907 173.149 79.6219 171.701 82.5186C170.252 85.4154 169.528 95.3127 169.528 112.21V286.016H388.233V112.21C388.233 95.3127 387.509 85.4154 386.061 82.5186C384.613 79.6219 380.026 77.6907 372.301 76.7252L332.471 73.1042V53.5511H507.001V73.1042L467.17 76.7252C459.445 77.6907 454.859 79.6219 453.411 82.5186C451.962 85.4154 451.238 95.3127 451.238 112.21V487.341C451.238 504.238 451.962 514.136 453.411 517.032C454.859 519.929 459.445 521.86 467.17 522.826L507.001 527.171ZM834.759 -5.83247H853.588V109.314H630.537L621.847 264.29C635.848 254.634 651.056 247.392 667.471 242.565C684.369 237.737 701.749 235.323 719.612 235.323C767.409 235.323 805.308 250.048 833.31 279.498C861.312 308.466 875.313 347.331 875.313 396.093C875.313 423.612 870.002 449.441 859.381 473.581C848.76 497.238 831.62 516.55 807.964 531.516C784.79 546 754.374 553.242 716.716 553.242C683.403 553.242 654.435 545.034 629.813 528.619C605.19 511.722 587.327 482.271 576.223 440.268L621.847 427.233C627.64 466.822 638.986 493.858 655.884 508.342C672.782 522.826 691.852 530.068 713.095 530.068C743.028 530.068 765.719 519.205 781.169 497.479C797.101 475.271 805.067 441.475 805.067 396.093C805.067 356.021 798.066 323.432 784.065 298.327C770.547 272.739 746.407 259.945 711.646 259.945C695.231 259.945 678.334 263.083 660.953 269.36C643.573 275.153 626.433 285.533 609.536 300.5L595.052 293.982L608.811 53.5511H788.41C805.791 53.5511 816.171 52.8269 819.551 51.3785C823.413 49.4473 826.068 43.8952 827.517 34.7221L834.759 -5.83247Z" fill="#343434" />\r\n        <line x1="49.7256" y1="721.29" x2="1035" y2="721.29" stroke="#7E7B7B" stroke-width="54.2021" />\r\n        <line x1="49.7256" y1="865.829" x2="737.402" y2="865.829" stroke="#7E7B7B" stroke-width="54.2021" />\r\n        <line x1="49.7256" y1="1010.37" x2="980.46" y2="1010.37" stroke="#7E7B7B" stroke-width="54.2021" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-julia-head-6" viewBox="0 0 1080 1080">\r\n        <path d="M507.001 527.171V546H332.471V527.171L372.301 522.826C380.026 521.86 384.613 519.929 386.061 517.032C387.509 514.136 388.233 504.238 388.233 487.341V309.19H169.528V487.341C169.528 504.238 170.252 514.136 171.701 517.032C173.149 519.929 177.736 521.86 185.46 522.826L225.291 527.171V546H50.7611V527.171L90.5915 522.826C98.3162 521.86 102.903 519.929 104.351 517.032C105.8 514.136 106.524 504.238 106.524 487.341V112.21C106.524 95.3127 105.8 85.4154 104.351 82.5186C102.903 79.6219 98.3162 77.6907 90.5915 76.7252L50.7611 73.1042V53.5511H225.291V73.1042L185.46 76.7252C177.736 77.6907 173.149 79.6219 171.701 82.5186C170.252 85.4154 169.528 95.3127 169.528 112.21V286.016H388.233V112.21C388.233 95.3127 387.509 85.4154 386.061 82.5186C384.613 79.6219 380.026 77.6907 372.301 76.7252L332.471 73.1042V53.5511H507.001V73.1042L467.17 76.7252C459.445 77.6907 454.859 79.6219 453.411 82.5186C451.962 85.4154 451.238 95.3127 451.238 112.21V487.341C451.238 504.238 451.962 514.136 453.411 517.032C454.859 519.929 459.445 521.86 467.17 522.826L507.001 527.171ZM915.868 407.68C915.868 437.13 909.35 462.96 896.315 485.168C883.279 506.894 865.175 523.792 842 535.861C818.826 547.448 791.79 553.242 760.891 553.242C708.267 553.242 667.471 533.93 638.503 495.307C610.018 456.683 595.776 399.955 595.776 325.122V279.498C595.776 199.837 610.501 141.178 639.952 103.52C669.402 65.3795 708.991 46.3092 758.719 46.3092C791.066 46.3092 818.585 52.8269 841.276 65.8623C864.45 78.8977 881.59 96.0369 892.694 117.28C904.281 138.523 908.626 161.697 905.729 186.802L843.449 197.665C847.311 156.145 842 124.522 827.517 102.796C813.033 80.5875 789.859 69.4832 757.994 69.4832C740.614 69.4832 724.682 74.0698 710.198 83.2428C696.197 91.9331 685.093 108.348 676.885 132.488C668.678 156.627 664.574 191.388 664.574 236.771V307.017C678.575 289.154 694.749 276.36 713.095 268.635C731.924 260.428 751.96 256.324 773.202 256.324C816.171 256.324 850.691 269.36 876.762 295.43C902.832 321.501 915.868 356.504 915.868 400.438V407.68ZM664.574 367.849C664.574 408.887 668.195 441.234 675.437 464.891C683.162 488.548 694.266 505.445 708.75 515.584C723.716 525.24 741.58 530.068 762.34 530.068C788.41 530.068 809.171 521.136 824.62 503.273C840.552 484.927 848.518 453.545 848.518 409.128V401.886C848.518 364.711 841.518 335.744 827.517 314.984C813.516 293.741 791.79 283.119 762.34 283.119C744.959 283.119 727.337 287.706 709.474 296.879C692.093 306.052 677.127 321.501 664.574 343.227V367.849Z" fill="#343434" />\r\n        <line x1="49.7256" y1="721.29" x2="1035" y2="721.29" stroke="#7E7B7B" stroke-width="54.2021" />\r\n        <line x1="49.7256" y1="865.829" x2="737.402" y2="865.829" stroke="#7E7B7B" stroke-width="54.2021" />\r\n        <line x1="49.7256" y1="1010.37" x2="980.46" y2="1010.37" stroke="#7E7B7B" stroke-width="54.2021" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-check-list" viewBox="0 0 512 512">\r\n        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M352 176L217.6 336 160 272" />\r\n        <rect x="64" y="64" width="384" height="384" rx="48" ry="48" fill="none" stroke="currentColor" stroke-linejoin="round" stroke-width="32" />\r\n    </symbol>\r\n\r\n\r\n    \x3c!-- tags --\x3e\r\n\r\n    <symbol id="icon-wordpress-bold" viewBox="0 0 24 24">\r\n        <path d="M14.7 11.3c1-.6 1.5-1.6 1.5-3 0-2.3-1.3-3.4-4-3.4H7v14h5.8c1.4 0 2.5-.3 3.3-1 .8-.7 1.2-1.7 1.2-2.9.1-1.9-.8-3.1-2.6-3.7zm-5.1-4h2.3c.6 0 1.1.1 1.4.4.3.3.5.7.5 1.2s-.2 1-.5 1.2c-.3.3-.8.4-1.4.4H9.6V7.3zm4.6 9c-.4.3-1 .4-1.7.4H9.6v-3.9h2.9c.7 0 1.3.2 1.7.5.4.3.6.8.6 1.5s-.2 1.2-.6 1.5z">\r\n        </path>\r\n    </symbol>\r\n    <symbol id="icon-wordpress-italic" viewBox="0 0 24 24">\r\n        <path d="M12.5 5L10 19h1.9l2.5-14z"></path>\r\n    </symbol>\r\n    <symbol id="icon-wordpress-anchor" viewBox="0 0 24 24">\r\n        <path d="M10 17.389H8.444A5.194 5.194 0 1 1 8.444 7H10v1.5H8.444a3.694 3.694 0 0 0 0 7.389H10v1.5ZM14 7h1.556a5.194 5.194 0 0 1 0 10.39H14v-1.5h1.556a3.694 3.694 0 0 0 0-7.39H14V7Zm-4.5 6h5v-1.5h-5V13Z">\r\n        </path>\r\n    </symbol>\r\n\r\n    <symbol id="icon-wordpress-underline" viewBox="0 0 24 24">\r\n\r\n    </symbol>\r\n\r\n\r\n    <symbol id="icon-wordpress-strike-through" viewBox="0 0 24 24">\r\n        <path d="M9.1 9v-.5c0-.6.2-1.1.7-1.4.5-.3 1.2-.5 2-.5.7 0 1.4.1 2.1.3.7.2 1.4.5 2.1.9l.2-1.9c-.6-.3-1.2-.5-1.9-.7-.8-.1-1.6-.2-2.4-.2-1.5 0-2.7.3-3.6 1-.8.7-1.2 1.5-1.2 2.6V9h2zM20 12H4v1h8.3c.3.1.6.2.8.3.5.2.9.5 1.1.8.3.3.4.7.4 1.2 0 .7-.2 1.1-.8 1.5-.5.3-1.2.5-2.1.5-.8 0-1.6-.1-2.4-.3-.8-.2-1.5-.5-2.2-.8L7 18.1c.5.2 1.2.4 2 .6.8.2 1.6.3 2.4.3 1.7 0 3-.3 3.9-1 .9-.7 1.3-1.6 1.3-2.8 0-.9-.2-1.7-.7-2.2H20v-1z">\r\n        </path>\r\n    </symbol>\r\n\r\n    <symbol id="icon-wordpress-code-mark" viewBox="0 0 512 512">\r\n        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M160 368L32 256l128-112M352 368l128-112-128-112M304 96l-96 320" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-wordpress-equation-mark" viewBox="0 0 24 24">\r\n        <path d="M16.9 10.3l.8-1.3c.4-.6.7-1.2.9-1.6.2-.4.3-.8.3-1.2 0-.3-.1-.7-.2-1-.2-.2-.4-.4-.7-.6-.3-.2-.6-.3-1-.3s-.8.1-1.1.2c-.3.1-.7.3-1 .6l.1 1.3c.3-.3.5-.5.8-.6s.6-.2.9-.2c.3 0 .5.1.7.2.2.2.2.4.2.7 0 .3-.1.5-.2.8-.1.3-.4.7-.8 1.3l-1.8 2.8h4.3v-1.2h-2.2zm-2.8-3.1h-2L9.5 11 6.9 7.2h-2l3.6 5.3L4.7 18h2l2.7-4 2.7 4h2l-3.8-5.5 3.8-5.3z">\r\n        </path>\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-underline" viewBox="0 -960 960 960">\r\n        <path d="M243.85-155q-12.75 0-21.38-8.63-8.62-8.63-8.62-21.39 0-12.75 8.62-21.37 8.63-8.61 21.38-8.61h472.3q12.75 0 21.38 8.63 8.62 8.63 8.62 21.38 0 12.76-8.62 21.37-8.63 8.62-21.38 8.62h-472.3ZM480-298.85q-93.31 0-145.65-56.65Q282-412.15 282-507.31v-279.38q0-15.14 11.17-25.96 11.17-10.81 26.31-10.81 15.13 0 25.9 10.81 10.77 10.82 10.77 25.96v283.07q0 60.62 32.23 97.16T480-369.92q59.39 0 91.62-36.54 32.23-36.54 32.23-97.16v-283.07q0-15.14 11.17-25.96 11.17-10.81 26.31-10.81 15.13 0 25.9 10.81Q678-801.83 678-786.69v279.38q0 95.16-52.35 151.81-52.34 56.65-145.65 56.65Z" />\r\n    </symbol>\r\n\r\n\r\n    \x3c!-- <symbol id="icon-material-link" viewBox="0 0 512 512">\r\n        <path d="M208 352h-64a96 96 0 010-192h64M304 160h64a96 96 0 010 192h-64M163.29 256h187.42" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="36" />\r\n    </symbol> --\x3e\r\n\r\n\r\n    \r\n\r\n    <symbol id="icon-material-link" viewBox="0 -960 960 960">\r\n        <path d="M440-280H280q-83 0-141.5-58.5T80-480q0-83 58.5-141.5T280-680h160v80H280q-50 0-85 35t-35 85q0 50 35 85t85 35h160v80ZM320-440v-80h320v80H320Zm200 160v-80h160q50 0 85-35t35-85q0-50-35-85t-85-35H520v-80h160q83 0 141.5 58.5T880-480q0 83-58.5 141.5T680-280H520Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-italic" viewBox="0 -960 960 960">\r\n        <path d="M215.77-215v-72.31h152.69l129.62-385.38H345.39V-745h366.15v72.31H571.15L441.54-287.31h140.38V-215H215.77Z" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-wordpress-chevron-down" viewBox="0 0 24 24">\r\n        <path d="M17.5 11.6L12 16l-5.5-4.4.9-1.2L12 14l4.5-3.6 1 1.2z"></path>\r\n    </symbol>\r\n\r\n    <symbol id="icon-wordpress-chevron-up" viewBox="0 0 24 24">\r\n        <path d="M6.5 12.4L12 8l5.5 4.4-.9 1.2L12 10l-4.5 3.6-1-1.2z"></path>\r\n    </symbol>\r\n\r\n\r\n    <symbol id="icon-material-trash" viewBox="0 0 512 512">\r\n\r\n        <path d="M112 112l20 320c.95 18.49 14.4 32 32 32h184c17.67 0 30.87-13.51 32-32l20-320" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />\r\n        <path stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="32" d="M80 112h352" />\r\n        <path d="M192 112V72h0a23.93 23.93 0 0124-24h80a23.93 23.93 0 0124 24h0v40M256 176v224M184 176l8 224M328 176l-8 224" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-copy" viewBox="0 0 512 512">\r\n\r\n        <rect x="128" y="128" width="336" height="336" rx="57" ry="57" fill="none" stroke="currentColor" stroke-linejoin="round" stroke-width="32" />\r\n        <path d="M383.5 128l.5-24a56.16 56.16 0 00-56-56H112a64.19 64.19 0 00-64 64v216a56.16 56.16 0 0056 56h24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-clear" viewBox="0 0 512 512">\r\n        <path d="M320 146s24.36-12-64-12a160 160 0 10160 160" fill="none" stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="32" />\r\n        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M256 58l80 80-80 80" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-small-check" viewBox="0 -960 960 960">\r\n        <path d="M400-304 240-464l56-56 104 104 264-264 56 56-320 320Z" />\r\n    </symbol>\r\n\r\n\r\n    <symbol id="icon-material-more" viewBox="0 -960 960 960">\r\n        <path d="M480-189.23q-24.75 0-42.37-17.63Q420-224.48 420-249.23q0-24.75 17.63-42.38 17.62-17.62 42.37-17.62 24.75 0 42.37 17.62Q540-273.98 540-249.23q0 24.75-17.63 42.37-17.62 17.63-42.37 17.63ZM480-420q-24.75 0-42.37-17.63Q420-455.25 420-480q0-24.75 17.63-42.37Q455.25-540 480-540q24.75 0 42.37 17.63Q540-504.75 540-480q0 24.75-17.63 42.37Q504.75-420 480-420Zm0-230.77q-24.75 0-42.37-17.62Q420-686.02 420-710.77q0-24.75 17.63-42.37 17.62-17.63 42.37-17.63 24.75 0 42.37 17.63Q540-735.52 540-710.77q0 24.75-17.63 42.38-17.62 17.62-42.37 17.62Z" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-letter" viewBox="0 -960 960 960">\r\n        <path d="M276-280h76l40-112h176l40 112h76L520-720h-80L276-280Zm138-176 64-182h4l64 182H414Zm66 376q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 320q133 0 226.5-93.5T800-480q0-133-93.5-226.5T480-800q-133 0-226.5 93.5T160-480q0 133 93.5 226.5T480-160Z" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-format" viewBox="0 0 512 512">\r\n        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M32 415.5l120-320 120 320M230 303.5H74M326 239.5c12.19-28.69 41-48 74-48h0c46 0 80 32 80 80v144" />\r\n        <path d="M320 358.5c0 36 26.86 58 60 58 54 0 100-27 100-106v-15c-20 0-58 1-92 5-32.77 3.86-68 19-68 58z" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-eraser" viewBox="0 -960 960 960">\r\n        <path d="M690-240h190v80H610l80-80Zm-500 80-85-85q-23-23-23.5-57t22.5-58l440-456q23-24 56.5-24t56.5 23l199 199q23 23 23 57t-23 57L520-160H190Zm296-80 314-322-198-198-442 456 64 64h262Zm-6-240Z" />\r\n    </symbol>\r\n\r\n\r\n    <symbol id="icon-material-cut" viewBox="0 0 512 512">\r\n        <circle cx="104" cy="152" r="56" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />\r\n        <circle cx="104" cy="360" r="56" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />\r\n        <path d="M157 175l-11 15 37 15s3.46-6.42 7-10z" fill="none" stroke="currentColor" stroke-linecap="square" stroke-miterlimit="10" stroke-width="32" />\r\n        <path d="M154.17 334.43L460 162c-2.5-6.7-28-12-64-4-29.12 6.47-121.16 29.05-159.16 56.05C205.85 236.06 227 272 192 298c-25.61 19-44.43 22.82-44.43 22.82zM344.47 278.24L295 306.67c14.23 6.74 65.54 33.27 117 36.33 14.92.89 30 .39 39-6z" fill="none" stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="32" />\r\n        <circle cx="256" cy="240" r="32" fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="32" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-paste" viewBox="0 0 512 512">\r\n        <path d="M336 64h32a48 48 0 0148 48v320a48 48 0 01-48 48H144a48 48 0 01-48-48V112a48 48 0 0148-48h32" fill="none" stroke="currentColor" stroke-linejoin="round" stroke-width="32" />\r\n        <rect x="176" y="32" width="160" height="64" rx="26.13" ry="26.13" fill="none" stroke="currentColor" stroke-linejoin="round" stroke-width="32" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-duplicate" viewBox="0 0 512 512">\r\n        <path d="M434.8 137.65l-149.36-68.1c-16.19-7.4-42.69-7.4-58.88 0L77.3 137.65c-17.6 8-17.6 21.09 0 29.09l148 67.5c16.89 7.7 44.69 7.7 61.58 0l148-67.5c17.52-8 17.52-21.1-.08-29.09zM160 308.52l-82.7 37.11c-17.6 8-17.6 21.1 0 29.1l148 67.5c16.89 7.69 44.69 7.69 61.58 0l148-67.5c17.6-8 17.6-21.1 0-29.1l-79.94-38.47" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />\r\n        <path d="M160 204.48l-82.8 37.16c-17.6 8-17.6 21.1 0 29.1l148 67.49c16.89 7.7 44.69 7.7 61.58 0l148-67.49c17.7-8 17.7-21.1.1-29.1L352 204.48" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />\r\n    </symbol>\r\n\r\n\r\n    <symbol id="icon-material-code-block" viewBox="0 0 512 512">\r\n        <rect x="96" y="48" width="320" height="416" rx="48" ry="48" fill="none" stroke="currentColor" stroke-linejoin="round" stroke-width="32" />\r\n        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M176 128h160M176 208h160M176 288h80" />\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-code-block-2" viewBox="0 -960 960 960">\r\n        <path d="m327.54-480 71.2-71.21q7.44-7.41 7.63-18.02.19-10.62-7.63-18.44-7.56-7.56-17.95-7.56-10.38 0-18.46 7.56l-85.48 85.75q-5.21 4.95-7.31 10.35-2.1 5.41-2.1 11.69 0 6.29 2.1 11.57t7.31 10.23l86.54 86.54q7.4 7.44 17.97 7.63 10.58.19 18.43-7.63 7.57-7.8 7.57-18.22 0-10.42-7.57-17.98L327.54-480Zm304.92 0-72.25 72.26q-7.44 7.18-7.5 17.78-.07 10.6 7.62 18.42 7.7 7.82 18.1 7.82 10.4 0 18.18-7.82l86.87-86.62q4.88-4.87 6.98-10.27 2.1-5.41 2.1-11.69 0-6.29-2.1-11.57t-6.98-10.15l-86.87-86.62q-3.38-3.8-8.21-5.62-4.84-1.82-9.67-1.82t-9.63 1.7q-4.81 1.69-8.67 5.61-7.79 8.19-7.79 18.48 0 10.29 7.57 17.85L632.46-480ZM202.57-140q-25.79 0-44.18-18.39T140-202.57v-554.86q0-25.79 18.39-44.18T202.57-820h554.86q25.79 0 44.18 18.39T820-757.43v554.86q0 25.79-18.39 44.18T757.43-140H202.57Zm0-50.26h554.86q4.62 0 8.47-3.84 3.84-3.85 3.84-8.47v-554.86q0-4.62-3.84-8.47-3.85-3.84-8.47-3.84H202.57q-4.62 0-8.47 3.84-3.84 3.85-3.84 8.47v554.86q0 4.62 3.84 8.47 3.85 3.84 8.47 3.84Zm-12.31-579.48v579.48-579.48Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-aperture" viewBox="0 0 512 512">\r\n        <path d="M448 256c0-106-86-192-192-192S64 150 64 256s86 192 192 192 192-86 192-192z" fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="32"/>\r\n        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M360 94.59V296M443.13 212.87L296 360M417.41 360H216M299.13 443.13l-144-144M152 416V216M68.87 299.13l144-144M94.59 152H288M212.87 68.87L360 216"/>\r\n    </symbol>\r\n\r\n\r\n    <symbol id="icon-material-check-list-2" viewBox="0 -960 960 960">\r\n        <path d="m227.18-299.69 156.77-156.77q7.48-7.18 17.71-7.07 10.24.12 17.93 7.68 6.97 7.63 6.97 17.79t-7.23 17.6L249.69-250.62q-9.4 9.36-21.94 9.36-12.54 0-21.9-9.36l-88.54-88.53q-7.23-7.24-7.04-17.5.19-10.27 7.42-17.5 7.23-7.23 17.57-7.03 10.33.21 17.43 7.03l74.49 74.46Zm0-304.62 156.77-156.77q7.48-7.18 17.71-7.06 10.24.12 17.93 7.68 6.97 7.62 6.97 17.78 0 10.17-7.23 17.6L249.69-555.23q-9.4 9.36-21.94 9.36-12.54 0-21.9-9.36l-88.54-88.54q-7.23-7.23-7.04-17.5.19-10.27 7.42-17.5 7.23-7.23 17.57-7.02 10.33.2 17.43 7.02l74.49 74.46Zm318.33 301.74q-10.68 0-17.9-7.26-7.23-7.26-7.23-18 0-10.73 7.23-17.86 7.22-7.13 17.9-7.13h289.75q10.67 0 17.9 7.26 7.22 7.27 7.22 18 0 10.74-7.22 17.87-7.23 7.12-17.9 7.12H545.51Zm0-304.61q-10.68 0-17.9-7.26-7.23-7.27-7.23-18 0-10.74 7.23-17.87 7.22-7.12 17.9-7.12h289.75q10.67 0 17.9 7.26 7.22 7.26 7.22 18 0 10.73-7.22 17.86-7.23 7.13-17.9 7.13H545.51Z"/>\r\n    </symbol>\r\n\r\n\r\n    <symbol id="icon-material-code-inline" viewBox="0 0 512 512">\r\n        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M160 368L32 256l128-112M352 368l128-112-128-112"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-table" viewBox="0 -960 960 960">\r\n        <path d="M212.31-140Q182-140 161-161q-21-21-21-51.31v-535.38Q140-778 161-799q21-21 51.31-21h535.38Q778-820 799-799q21 21 21 51.31v535.38Q820-182 799-161q-21 21-51.31 21H212.31Zm0-60h134.15v-146.46H200v134.15q0 5.39 3.46 8.85t8.85 3.46Zm194.15 0h147.08v-146.46H406.46V-200Zm207.08 0h134.15q5.39 0 8.85-3.46t3.46-8.85v-134.15H613.54V-200ZM200-406.46h146.46v-147.08H200v147.08Zm206.46 0h147.08v-147.08H406.46v147.08Zm207.08 0H760v-147.08H613.54v147.08ZM200-613.54h146.46V-760H212.31q-5.39 0-8.85 3.46t-3.46 8.85v134.15Zm206.46 0h147.08V-760H406.46v146.46Zm207.08 0H760v-134.15q0-5.39-3.46-8.85t-8.85-3.46H613.54v146.46Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-column-right" viewBox="0 -960 960 960">\r\n        <path d="M600-140q-30.31 0-51.31-21-21-21-21-51.31v-535.38q0-30.31 21-51.31 21-21 51.31-21h135.38q30.31 0 51.31 21 21 21 21 51.31v535.38q0 30.31-21 51.31-21 21-51.31 21H600Zm-375.38 0q-30.31 0-51.31-21-21-21-21-51.31v-535.38q0-30.31 21-51.31 21-21 51.31-21H360q30.31 0 51.31 21 21 21 21 51.31v535.38q0 30.31-21 51.31-21 21-51.31 21H224.62Zm-12.31-607.69v535.38q0 4.62 3.85 8.46Q220-200 224.62-200H360q4.62 0 8.46-3.85 3.85-3.84 3.85-8.46v-535.38q0-4.62-3.85-8.46Q364.62-760 360-760H224.62q-4.62 0-8.46 3.85-3.85 3.84-3.85 8.46Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-column-left" viewBox="0 -960 960 960">\r\n        <path d="M224.62-140q-30.31 0-51.31-21-21-21-21-51.31v-535.38q0-30.31 21-51.31 21-21 51.31-21H360q30.31 0 51.31 21 21 21 21 51.31v535.38q0 30.31-21 51.31-21 21-51.31 21H224.62ZM600-140q-30.31 0-51.31-21-21-21-21-51.31v-535.38q0-30.31 21-51.31 21-21 51.31-21h135.38q30.31 0 51.31 21 21 21 21 51.31v535.38q0 30.31-21 51.31-21 21-51.31 21H600Zm147.69-607.69q0-4.62-3.85-8.46Q740-760 735.38-760H600q-4.62 0-8.46 3.85-3.85 3.84-3.85 8.46v535.38q0 4.62 3.85 8.46Q595.38-200 600-200h135.38q4.62 0 8.46-3.85 3.85-3.84 3.85-8.46v-535.38Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-row-below" viewBox="0 -960 960 960">\r\n        <path d="M212.31-152.31q-30.31 0-51.31-21-21-21-21-51.31V-360q0-30.31 21-51.31 21-21 51.31-21h535.38q30.31 0 51.31 21 21 21 21 51.31v135.38q0 30.31-21 51.31-21 21-51.31 21H212.31Zm0-375.38q-30.31 0-51.31-21-21-21-21-51.31v-135.38q0-30.31 21-51.31 21-21 51.31-21h535.38q30.31 0 51.31 21 21 21 21 51.31V-600q0 30.31-21 51.31-21 21-51.31 21H212.31Zm535.38-220H212.31q-4.62 0-8.46 3.85Q200-740 200-735.38V-600q0 4.62 3.85 8.46 3.84 3.85 8.46 3.85h535.38q4.62 0 8.46-3.85Q760-595.38 760-600v-135.38q0-4.62-3.85-8.46-3.84-3.85-8.46-3.85Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-row-above" viewBox="0 -960 960 960">\r\n        <path d="M212.31-527.69q-30.31 0-51.31-21-21-21-21-51.31v-135.38q0-30.31 21-51.31 21-21 51.31-21h535.38q30.31 0 51.31 21 21 21 21 51.31V-600q0 30.31-21 51.31-21 21-51.31 21H212.31Zm0 375.38q-30.31 0-51.31-21-21-21-21-51.31V-360q0-30.31 21-51.31 21-21 51.31-21h535.38q30.31 0 51.31 21 21 21 21 51.31v135.38q0 30.31-21 51.31-21 21-51.31 21H212.31Zm0-60h535.38q4.62 0 8.46-3.85Q760-220 760-224.62V-360q0-4.62-3.85-8.46-3.84-3.85-8.46-3.85H212.31q-4.62 0-8.46 3.85Q200-364.62 200-360v135.38q0 4.62 3.85 8.46 3.84 3.85 8.46 3.85Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-delete-sweep" viewBox="0 -960 960 960">\r\n        <path d="M597.69-250v-60h140v60h-140Zm0-320v-60h260v60h-260Zm0 160v-60h220v60h-220ZM142.31-640h-40v-60h154.61v-47.69h130.77V-700h154.62v60h-40v347.69q0 30.31-21 51.31-21 21-51.31 21H214.62q-30.31 0-51.31-21-21-21-21-51.31V-640Zm60 0v347.69q0 4.62 3.84 8.46Q210-280 214.62-280H430q4.61 0 8.46-3.85 3.85-3.84 3.85-8.46V-640h-240Zm0 0v360-360Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-ionic-close-circle" viewBox="0 0 512 512">\r\n        <path d="M448 256c0-106-86-192-192-192S64 150 64 256s86 192 192 192 192-86 192-192z" fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="32"/>\r\n        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M320 320L192 192M192 320l128-128"/>\r\n\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-callout" viewBox="0 -960 960 960">\r\n        <path d="M140-184.62v-60h680v60H140Zm0-530.76v-60h680v60H140ZM212.31-340Q182-340 161-361q-21-21-21-51.31v-135.38Q140-578 161-599q21-21 51.31-21h535.38Q778-620 799-599q21 21 21 51.31v135.38Q820-382 799-361q-21 21-51.31 21H212.31Zm0-60h535.38q4.62 0 8.46-3.85 3.85-3.84 3.85-8.46v-135.38q0-4.62-3.85-8.46-3.84-3.85-8.46-3.85H212.31q-4.62 0-8.46 3.85-3.85 3.84-3.85 8.46v135.38q0 4.62 3.85 8.46 3.84 3.85 8.46 3.85ZM200-560v160-160Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-image" viewBox="0 -960 960 960">\r\n        <path d="M162.57-180q-25.79 0-44.18-18.39T100-242.57v-474.86q0-25.79 18.39-44.18T162.57-780h634.86q25.79 0 44.18 18.39T860-717.43v474.86q0 25.79-18.39 44.18T797.43-180H162.57Zm0-50.26h634.86q4.62 0 8.47-3.84 3.84-3.85 3.84-8.47v-474.86q0-4.62-3.84-8.47-3.85-3.84-8.47-3.84H162.57q-4.62 0-8.47 3.84-3.84 3.85-3.84 8.47v474.86q0 4.62 3.84 8.47 3.85 3.84 8.47 3.84Zm284.76-111.79-68.51-90.1q-4.95-6.03-12.37-6.23-7.42-.21-12.37 5.95l-66.46 87.3q-6.16 8.16-1.67 16.64 4.49 8.49 13.85 8.49h363.89q9.03 0 13.6-8.49 4.58-8.48-1.04-16.64l-98.76-133.46q-4.95-6.41-12.57-6.41-7.61 0-12.56 6.41L447.33-342.05ZM150.26-230.26v-499.48 499.48Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-video" viewBox="0 -960 960 960">\r\n        <path d="M390-318.46 641.54-480 390-641.54v323.08ZM172.31-180Q142-180 121-201q-21-21-21-51.31v-455.38Q100-738 121-759q21-21 51.31-21h615.38Q818-780 839-759q21 21 21 51.31v455.38Q860-222 839-201q-21 21-51.31 21H172.31Zm0-60h615.38q4.62 0 8.46-3.85 3.85-3.84 3.85-8.46v-455.38q0-4.62-3.85-8.46-3.84-3.85-8.46-3.85H172.31q-4.62 0-8.46 3.85-3.85 3.84-3.85 8.46v455.38q0 4.62 3.85 8.46 3.84 3.85 8.46 3.85ZM160-240v-480 480Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-justify-center" viewBox="0 -960 960 960">\r\n        <path d="M450-100v-760h60v760h-60Zm144.61-190v-380h100v380h-100Zm-329.22 0v-380h100v380h-100Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-justify-start" viewBox="0 -960 960 960">\r\n        <path d="M100-100v-760h60v760h-60Zm430-190v-380h100v380H530Zm-240 0v-380h100v380H290Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-material-justify-end" viewBox="0 -960 960 960">\r\n        <path d="M800-100v-760h60v760h-60ZM570-290v-380h100v380H570Zm-240 0v-380h100v380H330Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-bootstrap-spotify" viewBox="0 0 16 16">\r\n        <path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0m3.669 11.538a.5.5 0 0 1-.686.165c-1.879-1.147-4.243-1.407-7.028-.77a.499.499 0 0 1-.222-.973c3.048-.696 5.662-.397 7.77.892a.5.5 0 0 1 .166.686m.979-2.178a.624.624 0 0 1-.858.205c-2.15-1.321-5.428-1.704-7.972-.932a.625.625 0 0 1-.362-1.194c2.905-.881 6.517-.454 8.986 1.063a.624.624 0 0 1 .206.858m.084-2.268C10.154 5.56 5.9 5.419 3.438 6.166a.748.748 0 1 1-.434-1.432c2.825-.857 7.523-.692 10.492 1.07a.747.747 0 1 1-.764 1.288"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-bootstrap-github" viewBox="0 0 16 16">\r\n        <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27s1.36.09 2 .27c1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.01 8.01 0 0 0 16 8c0-4.42-3.58-8-8-8"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-bootstrap-gitlab" viewBox="0 0 16 16">\r\n        <path d="m15.734 6.1-.022-.058L13.534.358a.57.57 0 0 0-.563-.356.6.6 0 0 0-.328.122.6.6 0 0 0-.193.294l-1.47 4.499H5.025l-1.47-4.5A.572.572 0 0 0 2.47.358L.289 6.04l-.022.057A4.044 4.044 0 0 0 1.61 10.77l.007.006.02.014 3.318 2.485 1.64 1.242 1 .755a.67.67 0 0 0 .814 0l1-.755 1.64-1.242 3.338-2.5.009-.007a4.05 4.05 0 0 0 1.34-4.668Z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-codepen" viewBox="0 0 1024 1024">\r\n        <path d="M938.666667 642.005333a36.096 36.096 0 0 1-0.341334 4.778667l-0.256 1.578667-0.682666 3.072c-0.128 0.64-0.341333 1.194667-0.554667 1.792l-0.938667 2.688-0.853333 1.792c-0.341333 0.853333-0.768 1.621333-1.194667 2.432l-1.066666 1.706666a32.810667 32.810667 0 0 1-4.608 5.76l-1.493334 1.450667a34.645333 34.645333 0 0 1-2.090666 1.706667l-1.621334 1.28c-0.213333 0.128-0.426667 0.341333-0.64 0.426666l-389.973333 260.053334a36.608 36.608 0 0 1-40.704 0l-389.973333-260.010667-0.597334-0.426667a34.432 34.432 0 0 1-3.754666-3.029333c-0.512-0.426667-0.981333-0.938667-1.450667-1.450667-0.64-0.64-1.28-1.28-1.834667-1.962666a30.165333 30.165333 0 0 1-2.816-3.84 44.288 44.288 0 0 1-2.304-4.096l-0.810666-1.792a37.034667 37.034667 0 0 1-0.938667-2.688c-0.213333-0.597333-0.426667-1.152-0.554667-1.792-0.298667-0.981333-0.426667-2.048-0.64-3.072l-0.298666-1.578667A36.138667 36.138667 0 0 1 85.333333 642.005333V381.994667c0-1.621333 0.128-3.2 0.341334-4.778667l0.298666-1.578667c0.170667-1.024 0.341333-2.090667 0.64-3.072a33.024 33.024 0 0 1 6.186667-12.586666 41.728 41.728 0 0 1 1.237333-1.621334l1.834667-1.962666 1.450667-1.450667a35.584 35.584 0 0 1 3.754666-2.986667c0.213333-0.128 0.384-0.341333 0.597334-0.426666l389.973333-260.053334a36.693333 36.693333 0 0 1 40.704 0l389.973333 260.010667c0.213333 0.128 0.426667 0.341333 0.64 0.426667l1.621334 1.28a35.797333 35.797333 0 0 1 2.133333 1.749333l1.450667 1.450667a31.36 31.36 0 0 1 4.608 5.802666l1.066666 1.706667 1.237334 2.389333 0.810666 1.792 0.938667 2.688c0.213333 0.597333 0.426667 1.152 0.554667 1.792 0.298667 0.981333 0.469333 2.048 0.682666 3.072l0.256 1.578667a35.584 35.584 0 0 1 0.341334 4.778667v260.010666zM158.677333 450.645333v122.709334L250.410667 512l-91.733334-61.354667z m316.672-89.088V190.506667l-287.317333 191.573333 128.341333 85.802667 158.976-106.325334z m360.618667 20.48L548.693333 190.506667v171.050666l158.976 106.325334 128.298667-85.845334zM188.032 641.962667l287.317333 191.530666v-171.050666l-158.976-106.325334-128.341333 85.845334z m360.661333 20.48v171.050666l287.274667-191.573333-128.298667-85.76-158.976 106.282667zM512 425.216L382.293333 512 512 598.741333 641.706667 512 512 425.258667z m353.322667 148.138667v-122.709334L773.589333 512l91.733334 61.354667z" />\r\n    </symbol>\r\n\r\n\r\n    <symbol id="icon-bootstrap-image" viewBox="0 0 16 16">\r\n        <path d="M6.002 5.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0"/>\r\n        <path d="M1.5 2A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2zm13 1a.5.5 0 0 1 .5.5v6l-3.775-1.947a.5.5 0 0 0-.577.093l-3.71 3.71-2.66-1.772a.5.5 0 0 0-.63.062L1.002 12v.54L1 12.5v-9a.5.5 0 0 1 .5-.5z"/>\r\n    </symbol>\r\n\r\n    <symbol id="icon-bootstrap-youtube" viewBox="0 0 16 16">\r\n        <path d="M8.051 1.999h.089c.822.003 4.987.033 6.11.335a2.01 2.01 0 0 1 1.415 1.42c.101.38.172.883.22 1.402l.01.104.022.26.008.104c.065.914.073 1.77.074 1.957v.075c-.001.194-.01 1.108-.082 2.06l-.008.105-.009.104c-.05.572-.124 1.14-.235 1.558a2.01 2.01 0 0 1-1.415 1.42c-1.16.312-5.569.334-6.18.335h-.142c-.309 0-1.587-.006-2.927-.052l-.17-.006-.087-.004-.171-.007-.171-.007c-1.11-.049-2.167-.128-2.654-.26a2.01 2.01 0 0 1-1.415-1.419c-.111-.417-.185-.986-.235-1.558L.09 9.82l-.008-.104A31 31 0 0 1 0 7.68v-.123c.002-.215.01-.958.064-1.778l.007-.103.003-.052.008-.104.022-.26.01-.104c.048-.519.119-1.023.22-1.402a2.01 2.01 0 0 1 1.415-1.42c.487-.13 1.544-.21 2.654-.26l.17-.007.172-.006.086-.003.171-.007A100 100 0 0 1 7.858 2zM6.4 5.209v4.818l4.157-2.408z"/>\r\n    </symbol>\r\n</svg>',e.className="svg-icons-container",document.body.appendChild(e)}}}class je{static instance=null;blockOperationsService;tableOperationsService;textOperationsService;constructor(e,t,n){if(je.instance)throw new Error("Attempt to instantiate singleton `CommandDispatcher` more than once.");this.blockOperationsService=e,this.textOperationsService=t,this.tableOperationsService=n}static getInstance(){const e=D.Instance.resolve("IBlockOperationsService"),t=D.Instance.resolve("ITextOperationsService"),n=D.Instance.resolve("ITableOperationsService");return je.instance||(je.instance=new je(e,t,n)),je.instance}listen(){document.addEventListener(c.emittedCommand,this.handleCommandEvent),document.addEventListener(c.pressedEnterOnTitle,(()=>this.blockOperationsService.createANewParagraphFromTitle()))}handleCommandEvent=e=>{const{command:t,showUI:n,value:o,targetBlockType:i,block:r,scope:l}=e.detail;switch(t){case h.linkReadyToInsert:if(!o)throw new Error(`${h.linkReadyToInsert} requires value`);this.textOperationsService.execInsertLink(o);break;case h.toggleLink:this.textOperationsService.execToggleLink();break;case h.toggleBold:this.textOperationsService.execBold();break;case h.toggleInlineCode:this.textOperationsService.execInlineCode();break;case h.toggleItalic:this.textOperationsService.execItalic();break;case h.toggleUnderline:this.textOperationsService.execUnderline();break;case h.toggleStrikeThrough:this.textOperationsService.execStrikeThrough();break;case h.toggleHiliteColor:if(!o)throw new Error(`${h.toggleHiliteColor} requires a color value`);this.textOperationsService.execHiliteColor(o);break;case h.toggleForeColor:if(!o)throw new Error(`${h.toggleForeColor} requires a color value`);this.textOperationsService.execForeColor(o);break;case h.transformBlock:if(!o)throw new Error(`${h.transformBlock} requires a value that represents the target element type.`);this.blockOperationsService.transformBlock(o,r);break;case h.duplicateBlock:this.blockOperationsService.execDuplicateBlock(r);break;case h.deleteBlock:this.blockOperationsService.execDeleteBlock(r);break;case h.deleteBlockAndFocusOnPrevious:this.blockOperationsService.execDeleteFocusOnPrevious();break;case h.deleteBlockAndFocusOnNext:this.blockOperationsService.execDeleteAndFocusOnNext();break;case h.focusOnNextBlock:this.blockOperationsService.execFocusOnNext();break;case h.removeFormat:this.execRemoveFormat(t);break;case h.JustifyLeft:if(!r)throw new Error(`${h.JustifyLeft} requires a block to justify.`);this.blockOperationsService.justifyLeft(r);break;case h.JustifyCenter:if(!r)throw new Error(`${h.JustifyCenter} requires a block to justify.`);this.blockOperationsService.justifyCenter(r);break;case h.JustifyRight:if(!r)throw new Error(`${h.JustifyRight} requires a block to justify.`);this.blockOperationsService.justifyRight(r);break;case h.changeCodeBlockLanguage:if(!r)throw new Error(`${h.changeCodeBlockLanguage} requires a block to change a code block language.`);if(!o)throw new Error(`${h.changeCodeBlockLanguage} requires a value to change a code block language.`);this.blockOperationsService.changeCodeBlockLanguage(r,o);break;case h.createDefaultBlock:this.execCreateDefaultBlock(t);break;case h.insertNew:this.execInsertNew(t);break;case h.focusOnPreviousBlock:this.execFocusOnPreviousBlock(t);break;case h.mergeWithNextBlock:this.blockOperationsService.execMergeWithNextBlock();break;case h.mergeWithPreviousBlock:this.blockOperationsService.execMergeWithPreviousBlock();break;case h.insertTableColumnLeft:this.tableOperationsService.insertColumnLeft();break;case h.insertTableColumnRight:this.tableOperationsService.insertColumnRight(r||null);break;case h.insertTableRowAbove:this.tableOperationsService.insertRowAbove();break;case h.insertTableRowBelow:this.tableOperationsService.insertRowBelow(r||null);break;case h.toggleCellHiliteColor:if(!o)throw new Error(`${h.toggleCellHiliteColor} requires a value that represents the cell background color.`);this.tableOperationsService.execCellBackgroundColor(o);break;case h.changeCalloutBackgroundColor:if(!r)throw new Error(`${h.changeCalloutBackgroundColor} requires a block.`);if(!o)throw new Error(`${h.changeCalloutBackgroundColor} requires a value that represents the background color.`);this.blockOperationsService.execChangeCalloutBackground(r,o);break;case h.removeColumn:this.tableOperationsService.removeColumn();break;case h.removeRow:case h.removeRow:this.tableOperationsService.removeRow();break;case h.changeTableBorderColor:this.tableOperationsService.changeTableBorderColor(l,o);break;default:console.error(`No action defined for command: ${t}`)}};execRemoveFormat(e){const t=this.blockOperationsService.execCommand(e,!1),n=P.getActiveContentEditable();return n&&n.normalize(),t}execCreateDefaultBlock(e){return this.blockOperationsService.execCommand(e,!1)}execInsertNew(e){return this.blockOperationsService.createNewElementAndSplitContent()}execFocusOnPreviousBlock(e){return this.blockOperationsService.execCommand(e,!1)}}class ze{static instance=null;constructor(){if(ze.instance)throw new Error("Use ShortcutListeners.getInstance() to get instance.");this.listen()}startListen(){console.log("listening keyboard shortcuts")}static getInstance(){return ze.instance?ze.instance:new ze}listen(){document.addEventListener("keydown",(e=>{console.log(`Key: ${e.key}, Code: ${e.code}, Ctrl: ${e.ctrlKey}, Alt: ${e.altKey}, AltGr: ${"AltGraph"===e.key}, NumLock: ${e.getModifierState("NumLock")}`);const t=e.code.startsWith("Numpad"),n=e.getModifierState("NumLock");(e.ctrlKey||e.metaKey)&&e.shiftKey&&"Enter"===e.key?(e.preventDefault(),e.stopPropagation(),alert("converto para paragrafo"),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.transformBlock,targetBlockType:O.ELEMENT_TYPES.PARAGRAPH}}))):!e.ctrlKey&&!e.metaKey||e.altKey||"Digit1"!==e.code&&"Numpad1"!==e.code?!e.ctrlKey&&!e.metaKey||e.shiftKey||"."!==e.key?!e.ctrlKey&&!e.metaKey||e.shiftKey||"/"!==e.key?e.ctrlKey&&e.altKey&&("Digit1"===e.code||t&&n&&"Numpad1"===e.code)?(e.preventDefault(),e.stopPropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.transformBlock,targetBlockType:O.ELEMENT_TYPES.HEADER_1}}))):e.ctrlKey&&e.altKey&&("Digit2"===e.code||t&&n&&"Numpad2"===e.code)?(e.preventDefault(),e.stopPropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.transformBlock,targetBlockType:O.ELEMENT_TYPES.HEADER_2}}))):e.ctrlKey&&e.altKey&&("Digit3"===e.code||t&&n&&"Numpad3"===e.code)?(e.preventDefault(),e.stopPropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.transformBlock,targetBlockType:O.ELEMENT_TYPES.HEADER_3}}))):e.ctrlKey&&e.altKey&&("Digit4"===e.code||t&&n&&"Numpad4"===e.code)?(e.preventDefault(),e.stopPropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.transformBlock,targetBlockType:O.ELEMENT_TYPES.HEADER_4}}))):e.ctrlKey&&e.altKey&&("Digit5"===e.code||t&&n&&"Numpad5"===e.code)?(e.preventDefault(),e.stopPropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.transformBlock,targetBlockType:O.ELEMENT_TYPES.HEADER_5}}))):e.ctrlKey&&e.altKey&&("Digit6"===e.code||t&&n&&"Numpad6"===e.code)?(e.preventDefault(),e.stopPropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.transformBlock,targetBlockType:O.ELEMENT_TYPES.HEADER_6}}))):"D"!==e.key&&"d"!==e.key||!e.ctrlKey?"Delete"!==e.key&&"Backspace"!==e.key||!e.shiftKey?"\\"===e.key&&(e.ctrlKey||e.metaKey)?document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.removeFormat}})):e.ctrlKey&&e.altKey&&"Digit1"===e.code&&e.preventDefault():(e.preventDefault(),e.stopPropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.deleteBlock}}))):(e.preventDefault(),e.stopPropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.duplicateBlock}}))):(e.preventDefault(),e.stopPropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.transformBlock,targetBlockType:O.ELEMENT_TYPES.NUMBERED_LIST}}))):(e.preventDefault(),e.stopPropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.transformBlock,targetBlockType:O.ELEMENT_TYPES.BULLETED_LIST}}))):(e.preventDefault(),e.stopPropagation(),document.dispatchEvent(new CustomEvent(c.emittedCommand,{detail:{command:h.transformBlock,targetBlockType:O.ELEMENT_TYPES.CHECK_LIST}})))}))}}class Ye{static instance=null;focusStack;shownElements=new Map;constructor(e){if(Ye.instance)throw new Error("Use TableEventListeners.getInstance() to get instance.");this.focusStack=e,this.listen()}startListen(){console.log("listening table clicks")}static getInstance(){const e=D.Instance.resolve("IFocusStack");return Ye.instance?Ye.instance:new Ye(e)}listen(){document.addEventListener("click",(e=>{let t=null;if(t=e.target.nodeType==Node.TEXT_NODE?e.target.parentElement:e.target,t?.closest(".add-table-column")){const e=new CustomEvent(c.emittedCommand,{detail:{command:h.insertTableColumnRight,block:t.closest(".block")}});document.dispatchEvent(e)}if(t?.closest(".add-table-row")){const e=new CustomEvent(c.emittedCommand,{detail:{command:h.insertTableRowBelow,block:t.closest(".block")}});document.dispatchEvent(e)}}))}}class Ue{static instance;stack;capacity=10;constructor(){this.stack=[]}static getInstance(){return Ue.instance||(Ue.instance=new Ue),Ue.instance}push(e){this.stack.length>=this.capacity&&this.stack.shift(),this.stack.push(e)}peek(){return this.stack[this.stack.length-1]}clear(){this.stack=[]}}class Ge{static instance;elementFactoryService;memento;focusStack;constructor(e,t,n){if(Ge.instance)throw new Error("Use BlockOperationsService.getInstance() to get instance.");this.elementFactoryService=e,this.focusStack=t,this.memento=n,Ge.instance=this}execCommand(e,t,n=null){if(e==h.copySelected){if(document.getSelection&&navigator.clipboard&&navigator.clipboard.writeText){const e=document.getSelection();if(e&&e.toString().length>0){const t=e.toString();navigator.clipboard.writeText(t).then((()=>{const e=new CustomEvent("copiedText",{bubbles:!0,cancelable:!0});return document.dispatchEvent(e),!0})).catch((e=>{console.error("Error when copy text",e)}))}}return!1}if(e==h.cutSelected){if(document.getSelection&&navigator.clipboard&&navigator.clipboard.writeText){const e=document.getSelection();if(e&&e.toString().length>0){const t=e.toString();e.deleteFromDocument(),navigator.clipboard.writeText(t).then((()=>!0)).catch((e=>{console.error("Error when cut text: ",e)}))}}return!1}if(e==h.past)return navigator.clipboard&&navigator.clipboard.readText&&navigator.clipboard.readText().then((e=>{const t=document.getSelection();if(t&&t.rangeCount>0){const n=t.getRangeAt(0);n.deleteContents(),n.insertNode(document.createTextNode(e));const o=new CustomEvent("requestUpdateFloatingToolbar",{bubbles:!0,cancelable:!0});return document.dispatchEvent(o),!0}console.error("No text selected or clipboard empty.")})).catch((e=>{console.error("Error when pasting text: ",e)})),!1;if(e==h.transformBlock&&this.getCurrentSelectedBlock()&&n&&this.transformBlock(n),e==h.removeFormat)return document.execCommand(h.removeFormat,!1);if(e==h.createDefaultBlock){const e=document.activeElement||null;return this.createDefaultBlock(e),!0}if(e==h.focusOnFirstBlock){const e=document.querySelector(".focusable");return!!e&&(e.focus(),!0)}if(e==h.deleteBlockAndFocusOnPrevious)throw new Error("Remove all reference to this code");if(e==h.deleteBlockAndFocusOnNext)throw new Error("Remove all reference to this code");return!0}queryCommandState(){throw new Error("Method not implemented.")}static getInstance(){const e=D.Instance.resolve("IElementFactoryService"),t=D.Instance.resolve("IFocusStack"),n=D.Instance.resolve("IMemento");return this.instance||(this.instance=new Ge(e,t,n)),this.instance}static getDraggableElementFromSelection(){const e=window.getSelection();if(e&&e.rangeCount>0){let t=e.getRangeAt(0).commonAncestorContainer;for(t.nodeType===Node.TEXT_NODE&&(t=t.parentNode);t&&!(t instanceof HTMLElement);)t=t.parentNode;if(t)return t.closest(".block")}throw new Error}execMergeWithPreviousBlock(){this.memento.saveState();const e=P.getActiveContentEditable();if(!e)return;const t=P.getPreviousContentEditable(e);t&&(P.sanitizeContentEditable(e),P.sanitizeContentEditable(t),setTimeout((()=>{P.placeCursorAtEndOfEditableElement(t),setTimeout((()=>{const n=P.saveCaretPosition2d(t);if(t.innerHTML=t.innerHTML+e.innerHTML,e.closest("li")){const t=e.closest("li");t&&t.remove()}else{const t=e.closest(".block");t&&t.remove()}const o={charIndex:n.charIndex+t.textContent.length,horizontalPos:n.horizontalPos};P.restoreCaretPosition2d(t,o)}),10)})))}execMergeWithNextBlock(){this.memento.saveState();const e=P.getActiveContentEditable();if(!e)return;const t=P.getNextContentEditable(e);t&&(P.sanitizeContentEditable(e),P.sanitizeContentEditable(t),setTimeout((()=>{P.placeCursorAtEndOfEditableElement(e),setTimeout((()=>{const n=P.saveCaretPosition2d(e);if(e.innerHTML=e.innerHTML+t.innerHTML,e.closest("li")){const e=t.closest("li");e&&e.remove()}else{const e=t.closest(".block");e&&e.remove()}P.restoreCaretPosition2d(e,n)}),10)})))}execDuplicateBlock(e){e||(e=this.getCurrentSelectedBlock()||P.getCurrentActiveBlock());const t=e.cloneNode(!0);t.querySelectorAll(".exclude-from-clone").forEach((e=>e.remove()));const n=e.nextSibling;e.parentNode?.insertBefore(t,n),t.id=`b-${H.generateUniqueId()}`;const o=new CustomEvent(c.blockCloned,{bubbles:!0,cancelable:!0});return document.dispatchEvent(o),!0}execDeleteBlock(e){e||(e=this.getCurrentSelectedBlock()||P.getCurrentActiveBlock()),this.focusOnNext(e),this.deleteTheCurrentElementAndTheDraggableBlockIfEmpty(e);const t=new CustomEvent(c.blockDeleted,{bubbles:!0,cancelable:!0});return document.dispatchEvent(t),!0}transformBlock(e,t){let n;n=t?t.closest(".block"):this.focusStack.peek()?.closest(".block")||null,t||(t=P.findClosestAncestorOfActiveElementByClass(".block"));let o=n.querySelector(".swittable");this.focusStack.peek()?.focus(),P.removeFilterText(),this.memento.saveState();let i,r=o?.innerText,l=null;switch(e){case O.ELEMENT_TYPES.PARAGRAPH:{i=this.elementFactoryService.create(O.ELEMENT_TYPES.PARAGRAPH);const e=P.querySelectorIncludingSelf(o,'[contenteditable="true"]');e&&(i.innerHTML=e.innerHTML);break}case O.ELEMENT_TYPES.HEADER_1:i=this.elementFactoryService.create(O.ELEMENT_TYPES.HEADER_1),i.innerText=r;break;case O.ELEMENT_TYPES.HEADER_2:i=this.elementFactoryService.create(O.ELEMENT_TYPES.HEADER_2),i.innerText=r;break;case O.ELEMENT_TYPES.HEADER_3:i=this.elementFactoryService.create(O.ELEMENT_TYPES.HEADER_3),i.innerText=r;break;case O.ELEMENT_TYPES.HEADER_4:i=this.elementFactoryService.create(O.ELEMENT_TYPES.HEADER_4),i.innerText=r;break;case O.ELEMENT_TYPES.HEADER_5:i=this.elementFactoryService.create(O.ELEMENT_TYPES.HEADER_5),i.innerText=r;break;case O.ELEMENT_TYPES.HEADER_6:i=this.elementFactoryService.create(O.ELEMENT_TYPES.HEADER_6),i.innerText=r;break;case O.ELEMENT_TYPES.CODE:i=this.elementFactoryService.create(O.ELEMENT_TYPES.CODE);break;case O.ELEMENT_TYPES.QUOTE:i=this.elementFactoryService.create(O.ELEMENT_TYPES.QUOTE);break;case O.ELEMENT_TYPES.BULLETED_LIST:i=this.elementFactoryService.create(O.ELEMENT_TYPES.BULLETED_LIST,r);break;case O.ELEMENT_TYPES.NUMBERED_LIST:i=this.elementFactoryService.create(O.ELEMENT_TYPES.NUMBERED_LIST,r);break;case O.ELEMENT_TYPES.CHECK_LIST:i=this.elementFactoryService.create(O.ELEMENT_TYPES.CHECK_LIST,r);break;case O.ELEMENT_TYPES.SEPARATOR:i=this.elementFactoryService.create(O.ELEMENT_TYPES.SEPARATOR);break;case O.ELEMENT_TYPES.TABLE:i=this.elementFactoryService.create(O.ELEMENT_TYPES.TABLE,",,");break;case O.ELEMENT_TYPES.IMAGE:i=this.elementFactoryService.create(O.ELEMENT_TYPES.IMAGE,r),l=i;break;case O.ELEMENT_TYPES.VIDEO:i=this.elementFactoryService.create(O.ELEMENT_TYPES.VIDEO,r),l=i;break;case O.ELEMENT_TYPES.SPOTIFY:i=this.elementFactoryService.create(O.ELEMENT_TYPES.SPOTIFY,r),l=i;break;case O.ELEMENT_TYPES.GITHUB_GIST:i=this.elementFactoryService.create(O.ELEMENT_TYPES.GITHUB_GIST,r),l=i;break;case O.ELEMENT_TYPES.GITLAB_SNIPPET:i=this.elementFactoryService.create(O.ELEMENT_TYPES.GITLAB_SNIPPET,r),l=i;break;case O.ELEMENT_TYPES.CODEPEN:i=this.elementFactoryService.create(O.ELEMENT_TYPES.CODEPEN,r),l=i;break;case O.ELEMENT_TYPES.CALLOUT:{i=this.elementFactoryService.create(O.ELEMENT_TYPES.CALLOUT);const e=i.querySelector(".callout-text"),t=P.querySelectorIncludingSelf(o,'[contenteditable="true"]');e&&t&&(e.innerHTML=t.innerHTML);break}default:return void console.error("Unsupported type")}if(!i)return;n.replaceChild(i,o);const s=i.closest(".focusable")||n.querySelector(".focusable");if(s&&(s.focus(),P.placeCursorAtEndOfEditableElement(s)),l&&this.focusStack.push(l),"image"==e||"video"==e||"spotify"==e||"github-gist"==e||"gitlab-snippet"==e||"codepen"==e){const e=l?.querySelector(".content-placeholder");e&&(console.log("opaaaaaa"),this.focusStack.push(e)),G.emitShowElementEvent("mediaInputter")}const a=n?.querySelector(".block-toolbar-wrapper");a&&a.remove()}createNewElement(e){this.memento.saveState();const t=e.target.closest(".johannes-content-element");t&&t.classList.contains("list")?this.createListItem(t):this.createDefaultBlock(t)}createListItem(e){this.memento.saveState();let t=null,n=(document.activeElement,e.closest(".johannes-content-element"));n.classList.contains("checkbox-list")?t=this.elementFactoryService.create("checkboxItem",""):n.classList.contains("list")&&(t=this.elementFactoryService.create("listItem",""))}createNewElementAndSplitContent(){this.memento.saveState();const e=P.getContentTypeFromActiveElement();if(e==o.Table)return!1;if(e==o.CheckList||e==o.BulletedList||e==o.NumberedList){const e=P.findClosestAncestorOfActiveElementByClass("list-item");if(e&&P.hasTextContent(e)){const t=P.cloneAndInsertAfter(e);if(t){const n=e.querySelector(".focusable"),o=t.querySelector(".focusable");P.rearrangeContentAfterSplit(n,o)}}else if(e){const t=e.closest(".block");if(t){const n=t.querySelectorAll(".list-item").length,o=O.blockParagraph();P.insertAfter(o,t),e.remove(),1==n&&t.remove();const i=o.querySelector("p");P.placeCursorAtStartOfEditableElement(i)}}}else{const e=P.findClosestAncestorOfActiveElementByClass("block");if(e){const t=P.cloneAndInsertAfter(e);if(t){const n=e.querySelector(".focusable"),i=t.querySelector(".focusable");P.rearrangeContentAfterSplit(n,i),this.transformBlock(o.Paragraph,t)}const n=t.querySelector(".focusable");P.placeCursorAtStartOfEditableElement(n)}}return!0}createANewParagraphFromTitle(){this.memento.saveState();const e=document.querySelector("#johannesEditor .title h1"),t=P.cloneAndInsertAfter(e);t&&P.rearrangeContentAfterSplit(e,t);const n=this.elementFactoryService.create(O.ELEMENT_TYPES.BLOCK_PARAGRAPH,""),o=n.querySelector(`.${l.ContentElement}`);o&&(o.innerHTML=t?.innerHTML||"");const i=document.querySelector("#johannesEditor .content");if(i){i.prepend(n);const e=n.querySelector(".focusable");P.placeCursorAtStartOfEditableElement(e)}t?.remove()}createDefaultBlock(e){this.memento.saveState();const t=this.elementFactoryService.create(O.ELEMENT_TYPES.BLOCK_PARAGRAPH,"");return e&&e.closest(".block")?e.closest(".block").insertAdjacentElement("afterend",t):document.querySelector("#johannesEditor .content").appendChild(t),t.querySelector(".johannes-content-element").focus(),this.focusStack.push(t),t}execFocusOnNext(){let e=this.getCurrentSelectedBlock()||P.getCurrentActiveBlock();return!!e&&(this.focusOnNext(e),!0)}execDeleteFocusOnPrevious(){this.memento.saveState();const e=document.activeElement;return this.focusOnPrevious(e),this.deleteTheCurrentElementAndTheDraggableBlockIfEmpty(e),!0}execDeleteAndFocusOnNext(){this.memento.saveState();let e=this.getCurrentSelectedBlock()||P.getCurrentActiveBlock();return!!e&&(this.focusOnNext(e),this.deleteTheCurrentElementAndTheDraggableBlockIfEmpty(e),!0)}focusOnPrevious(e,t=null){let n=null;if("LI"===e.tagName.toUpperCase()){let o=e.previousElementSibling;if(!o)return;if(o&&o.classList.contains("focusable"))return n=o,void(t?this.applyCursorXEndPosition(n,t):P.placeCursorAtEndOfEditableElement(n))}if("LI"===e.parentNode.tagName.toUpperCase()){let o=e.closest("li")?.previousElementSibling?.querySelector(".focusable");if(o&&o.classList.contains("focusable"))return n=o,void(t?this.applyCursorXEndPosition(n,t):P.placeCursorAtEndOfEditableElement(n))}let o=e.closest(".block");if(!o)return;let i=o.previousElementSibling;for(;i;){let e=i.querySelectorAll(".focusable");if(e.length>0)return n=e[e.length-1],void(t?this.applyCursorXEndPosition(n,t):P.placeCursorAtEndOfEditableElement(n));i=i.previousElementSibling}}getPreviousFocusableElement(e){let t=null;if("LI"===e.tagName.toUpperCase()){let n=e.previousElementSibling;if(!n)return null;if(n&&n.classList.contains("focusable"))return t=n,t}if("LI"===e.parentNode.tagName.toUpperCase()){let n=e.closest("li")?.previousElementSibling?.querySelector(".focusable");if(n&&n.classList.contains("focusable"))return t=n,t}let n=e.closest(".block");if(!n)return null;let o=n.previousElementSibling;for(;o;){let e=o.querySelectorAll(".focusable");if(e.length>0)return t=e[e.length-1],t;o=o.previousElementSibling}return t}focusOnNext(e,t=null){let n=null;if("LI"===e.tagName.toUpperCase()){let o=e.nextElementSibling;if(o&&o.classList.contains("focusable"))return n=o,t?this.applyCursorXStartPosition(n,t):P.placeCursorAtStartOfEditableElement(n),n}if("LI"===e.parentNode.tagName.toUpperCase()){let o=e.closest("li")?.nextElementSibling?.querySelector(".focusable");if(o&&o.classList.contains("focusable"))return n=o,t?this.applyCursorXStartPosition(n,t):P.placeCursorAtStartOfEditableElement(n),n}let o=e.closest(".block");if(!o)return;let i=o.nextElementSibling;for(;i;){let e=i.querySelectorAll(".focusable");if(e.length>0)return n=e[0],t?this.applyCursorXStartPosition(n,t):P.placeCursorAtStartOfEditableElement(n),n;i=i.nextElementSibling}return n}getNextFocusableElement(e){let t=null;if("LI"===e.tagName.toUpperCase()){let n=e.nextElementSibling;if(n&&n.classList.contains("focusable"))return t=n,t}if("LI"===e.parentNode.tagName.toUpperCase()){let n=e.closest("li")?.nextElementSibling?.querySelector(".focusable");if(n&&n.classList.contains("focusable"))return t=n,t}let n=e.closest(".block");if(!n)return null;let o=n.nextElementSibling;for(;o;){let e=o.querySelectorAll(".focusable");if(e.length>0)return t=e[0],t;o=o.nextElementSibling}return t}deleteTheCurrentElementAndTheDraggableBlockIfEmpty(e){const t=e.closest(".block"),n=e.closest(".deletable");n?.remove(),t&&0==t.querySelectorAll(".editable").length&&t.remove()}applyCursorXEndPosition(e,t){const n=window.getSelection(),o=document.createRange();let i=e.lastChild,r=null;for(;i;){if(i.nodeType===Node.TEXT_NODE){r=this.adjustCursorOffset(i,t);break}i=(i.nodeName.toUpperCase(),i.previousSibling)}r&&r.closestNode?(o.setStart(r.closestNode,r.closestOffset),o.collapse(!0),n.removeAllRanges(),n.addRange(o),e.focus()):(o.selectNodeContents(e),o.collapse(!1),n.removeAllRanges(),n.addRange(o),e.focus())}applyCursorXStartPosition(e,t){const n=window.getSelection(),o=document.createRange();let i=e.firstChild,r=null;for(;i;){if(i.nodeType===Node.TEXT_NODE){r=this.adjustCursorOffset(i,t);break}i=i.nextSibling}r&&r.closestNode?(o.setStart(r.closestNode,r.closestOffset),o.collapse(!0),n.removeAllRanges(),n.addRange(o),e.focus()):(o.selectNodeContents(e),o.collapse(!0),n.removeAllRanges(),n.addRange(o),e.focus())}adjustCursorOffset(e,t){let n=document.createRange(),o=e,i=0,r=1/0;for(let o=0;o<e.textContent.length;o++){n.setStart(e,o),n.setEnd(e,o+1);const l=n.getBoundingClientRect(),s=Math.abs(l.left-t),a=Math.abs(l.right-t);(s<r||a<r)&&(r=Math.min(s,a),i=o+(a<s?1:0))}return t>n.getBoundingClientRect().right&&(i=e.textContent.length),{closestNode:o,closestOffset:i}}getCurrentSelectedFocusable(){const e=window.getSelection();if(!e||0===e.rangeCount)return null;let t=e.getRangeAt(0).commonAncestorContainer;return t.nodeType===Node.TEXT_NODE&&(t=t.parentNode),t.closest(".focusable")}getCurrentSelectedBlock(){const e=window.getSelection();if(!e||0===e.rangeCount)return null;let t=e.getRangeAt(0).commonAncestorContainer;return t.nodeType===Node.TEXT_NODE&&(t=t.parentNode),t.closest(".block")}justifyLeft(e){this.memento.saveState(),this.removeJustify(e),e.classList.add("justify-left")}justifyCenter(e){this.memento.saveState(),this.removeJustify(e),e.classList.add("justify-center")}justifyRight(e){this.memento.saveState(),this.removeJustify(e),e.classList.add("justify-right")}changeCodeBlockLanguage(e,t){this.memento.saveState();const n=e.querySelector("code");n&&(P.removeClassesWithPrefix(n,"language-"),n.classList.add(`language-${t}`),n.removeAttribute("data-highlighted"),hljs.highlightElement(n),G.emitCodeBlockLanguageChangedEvent("code-block-language-menu",e.id,t))}removeJustify(e){const t=e.classList;for(let e=0;e<t.length;e++){const n=t[e];n.startsWith("justify-")&&t.remove(n)}}execChangeCalloutBackground(e,t){const n=e.querySelector(".callout > div");n&&(P.removeClassesWithPrefix(n,"callout-background-"),n.classList.add(t))}}class Ke{static instance;memento;textOperationService;constructor(e){if(Ke.instance)throw new Error("Use TextOperationService.getInstance() to get instance.");this.memento=e}static getInstance(){const e=D.Instance.resolve("IMemento");return this.instance||(this.instance=new Ke(e)),this.instance}execInsertLink(e){this.memento.saveState(),document.execCommand("createLink",!1,e),setTimeout((()=>{G.emitChangeComponentColorEvent(p.Link,u.IconActiveBlue),this.normalizeAnchors()}),50)}normalizeAnchors(){document.querySelectorAll("#johannesEditor .content a").forEach((e=>{e.hasAttribute("title")||e.setAttribute("title",e.href),e.normalize()}))}execToggleLink(){this.queryAnchorCommandState()?(document.execCommand("unlink",!1),G.emitChangeComponentColorEvent("linkButton",u.IconDefaultBlack)):G.emitShowElementEvent("linkBox")}execBold(){this.memento.saveState(),document.execCommand("bold")&&(document.queryCommandState("bold")?G.emitChangeComponentColorEvent(p.Bold,u.IconActiveBlue):G.emitChangeComponentColorEvent(p.Bold,u.IconDefaultBlack))}execInlineCode(){this.memento.saveState(),this.toggleInlineCode()&&(this.queryInlineCodeCommandState()?G.emitChangeComponentColorEvent(p.InlineCode,u.IconActiveBlue):G.emitChangeComponentColorEvent(p.InlineCode,u.IconDefaultBlack))}toggleInlineCode(){const e=window.getSelection();if(!e||0===e.rangeCount)return!1;const t=e.getRangeAt(0);let n=t.extractContents(),o=!1;const i=document.createElement("span");i.appendChild(n.cloneNode(!0)),i.querySelector("code")&&(o=!0,i.querySelectorAll("code").forEach((e=>{const t=document.createTextNode(e.textContent||"");e.parentNode?.replaceChild(t,e)})),n=i);let r=e.anchorNode;for(;r&&"CODE"!==r.nodeName&&"BODY"!==r.nodeName;)r=r.parentNode;if(r&&"CODE"===r.nodeName){o=!0;const e=document.createTextNode(r.textContent||"");r.parentNode?.replaceChild(e,r)}if(o)t.insertNode(i);else{const e=document.createElement("code");e.appendChild(n),t.insertNode(e)}e.removeAllRanges(),e.addRange(t);const l=P.getActiveContentEditable();return l&&(l.normalize(),P.mergeInlineElements(l)),!0}execItalic(){this.memento.saveState(),document.execCommand("italic")&&(document.queryCommandState("italic")?G.emitChangeComponentColorEvent(p.Italic,u.IconActiveBlue):G.emitChangeComponentColorEvent(p.Italic,u.IconDefaultBlack))}execStrikeThrough(){this.memento.saveState(),document.execCommand("strikeThrough")&&(document.queryCommandState("strikeThrough")?G.emitChangeComponentColorEvent(p.Strikethrough,u.IconActiveBlue):G.emitChangeComponentColorEvent(p.Strikethrough,u.IconDefaultBlack))}execUnderline(){this.memento.saveState(),document.execCommand("underline")&&setTimeout((()=>{document.queryCommandState("underline")?G.emitChangeComponentColorEvent(p.Underline,u.IconActiveBlue):G.emitChangeComponentColorEvent(p.Underline,u.IconDefaultBlack)}),10)}execHiliteColor(e){this.memento.saveState(),G.emitResetActiveButtonsElementEvent("hiliteColor"),document.execCommand("hiliteColor",!1,e)&&G.emitShowHideActiveElementEvent("hiliteColor",e,"show")}execForeColor(e){this.memento.saveState(),G.emitResetActiveButtonsElementEvent("foreColor"),document.execCommand("foreColor",!1,e)&&G.emitShowHideActiveElementEvent("foreColor",e,"show")}queryCommandState(e,t){return e===h.toggleLink?this.queryAnchorCommandState():e===h.toggleUnderline?this.queryUnderlineCommandState():e===h.toggleHiliteColor?this.queryHiliteColor(t):e===h.toggleForeColor?this.queryForeColor(t):e===h.toggleInlineCode?this.queryInlineCodeCommandState():document.queryCommandState(e)}queryAnchorCommandState(){const e=window.getSelection();if(!e||!e.rangeCount)return!1;const t=e.getRangeAt(0),n=t.startContainer,o=t.endContainer,i=e=>{for(;e&&e!==document.body;){if(e.nodeType===Node.ELEMENT_NODE&&"a"===e.tagName.toLowerCase())return!0;e=e.parentNode}return!1};return!(!i(n)&&!i(o))||t.cloneContents().querySelectorAll("a").length>0}queryInlineCodeCommandState(){const e=window.getSelection();if(!e||!e.rangeCount)return!1;let t=e.getRangeAt(0).commonAncestorContainer;for(t.nodeType===Node.TEXT_NODE&&(t=t.parentNode);t&&null!==t;){if(t.nodeType==Node.ELEMENT_NODE&&t.closest("code"))return!0;t=t.parentNode}return!1}queryUnderlineCommandState(){const e=window.getSelection();if(!e||!e.rangeCount)return!1;let t=e.getRangeAt(0).commonAncestorContainer;for(t.nodeType===Node.TEXT_NODE&&(t=t.parentNode);t&&null!==t;){if(t.nodeType==Node.ELEMENT_NODE&&t.closest("u"))return!0;t=t.parentNode}return!1}queryForeColor(e){const t=window.getSelection();if(!t)return!1;if(!t.rangeCount)return!1;let n=t.getRangeAt(0).commonAncestorContainer;if(n.nodeType===Node.TEXT_NODE&&(n=n.parentNode),!(n instanceof Element))return!1;const o=n.closest("font[color]");if(!o)return!1;const i=window.getComputedStyle(o).color;return H.rgbToHex(i).toUpperCase()===e.toUpperCase()}queryHiliteColor(e){const t=window.getSelection();if(!t)return!1;if(!t.rangeCount)return!1;let n=t.getRangeAt(0).commonAncestorContainer;if(n.nodeType===Node.TEXT_NODE&&(n=n.parentNode),!(n instanceof Element))return!1;const o=n.closest("span[style*='background-color']")||n.closest("font[style*='background-color']");if(!o)return!1;const i=window.getComputedStyle(o).backgroundColor;return H.rgbToHex(i).toUpperCase()===e.toUpperCase()}getTargetElementMap(e){switch(e){case"strong":case"bold":case"b":return"strong";case"italic":case"i":case"em":return"em";case"underline":case"u":return"u";case"strikethrough":case"s":return"s";case"background":case"color":return"span";default:throw new Error}}static getSelectedHTMLElement(){const e=window.getSelection();if(e&&e.rangeCount>0){let t=e.getRangeAt(0).commonAncestorContainer;for(t.nodeType===Node.TEXT_NODE&&(t=t.parentNode);t&&!(t instanceof HTMLElement);)t=t.parentNode;if(t)return t}return null}getSelectedTextNodes(){const e=window.getSelection();if(!e||0===e.rangeCount)return[];const t=[];for(let n=0;n<e.rangeCount;++n){const o=e.getRangeAt(n),i=document.createNodeIterator(o.commonAncestorContainer,NodeFilter.SHOW_TEXT,{acceptNode:e=>o.intersectsNode(e)?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_REJECT});let r;for(;r=i.nextNode();)if(r.nodeType===Node.TEXT_NODE){const e=document.createRange();e.selectNodeContents(r),-1===o.compareBoundaryPoints(Range.END_TO_START,e)&&1===o.compareBoundaryPoints(Range.START_TO_END,e)&&t.push(r)}}return t}findClosestMatchingParent(e,t){for(e&&e.nodeType===Node.TEXT_NODE&&(e=e.parentElement);e&&e!==document.body;){if(e.nodeType===Node.ELEMENT_NODE){const n=e;if(n.tagName.toLowerCase()===t.nodeType.toLowerCase()&&(!t.classes||t.classes.every((e=>n.classList.contains(e)))))return n}e=e.parentElement}return null}extractSelectedText(e){const t=window.getSelection();if(!t||0===t.rangeCount)return"";const n=t.getRangeAt(0);if(e.nodeType!==Node.TEXT_NODE)return"";const o=e.textContent||"";let i=0,r=o.length;return n.intersectsNode(e)?(n.startContainer===e?i=n.startOffset:n.startContainer.contains(e)&&(i=0),n.endContainer===e?r=n.endOffset:n.endContainer.contains(e)&&(r=o.length),i<r?o.substring(i,r):""):""}}!function(e){e.TableToolbar="tableFloatingToolbar",e.TextToolbar="textFloatingToolbar"}(Le||(Le={}));class Ze{static instance;focusStack;memento;constructor(e,t){if(Ze.instance)throw new Error("Use TableOperationsService.getInstance() to get instance.");this.focusStack=e,this.memento=t}isActiveCellBackgroundColor(e){throw new Error("Method not implemented.")}removeColumn(){this.memento.saveState();const e=this.focusStack.peek();e&&Ne.removeColumnByCell(e),G.emitCloseElementEvent(Le.TableToolbar)}removeRow(){this.memento.saveState();const e=this.focusStack.peek();e&&Ne.removeRowByCell(e),G.emitCloseElementEvent(Le.TableToolbar)}execCellBackgroundColor(e){this.memento.saveState(),G.emitResetActiveButtonsElementEvent("backgroundColor");const t=Ne.getActiveTableCell();t?(t.closest("table").querySelectorAll("td.selected").forEach((t=>{t.style.backgroundColor=e})),G.emitShowHideActiveElementEvent("backgroundColor",e,"show")):console.error("cell not found")}static isCellBackgroundColor(e,t){if(!e||"TD"!==e.tagName||!e.hasAttribute("data-placeholder"))return!1;const n=window.getComputedStyle(e).getPropertyValue("background-color");return H.rgbToHex(n).toUpperCase()===t.toUpperCase()}queryStateCellBackgroundColor(e){const t=Ne.getActiveTableCell();if(t){const n=window.getComputedStyle(t).getPropertyValue("background-color");return H.rgbToHex(n).toUpperCase()===e.toUpperCase()}return!1}queryAllStateCellBackgroundColor(e,t){let n=!0;return t!=u.BackgroundColorNone&&(e.forEach((e=>{const o=window.getComputedStyle(e).backgroundColor;H.rgbToHex(o).toLocaleLowerCase()!==t.toLocaleLowerCase()&&(n=!1)})),n)}static getInstance(){const e=D.Instance.resolve("IFocusStack"),t=D.Instance.resolve("IMemento");return this.instance||(this.instance=new Ze(e,t)),this.instance}insertRowAbove(){this.memento.saveState();const e=this.focusStack.peek();if(!e)return void console.error("No cell is focused");const t=e.parentElement;if(!t)return void console.error("No row is focused");const n=t.closest("table");if(!n)return void console.error("Table does not exist");const o=n.querySelector("tbody")||n,i=Array.from(o.children).indexOf(t);i<0?console.error("Row index not found"):(Ne.addRow(n,i),G.emitCloseElementEvent(Le.TableToolbar))}insertRowBelow(e){if(this.memento.saveState(),e){const t=e.querySelector("table");if(!t)return void console.error("Table does not exist");{const e=t.querySelector("tr:last-child");if(!e)return void console.error("No rows in the table");{const n=Array.from(t.children[0].children).indexOf(e)+1;Ne.addRow(t,n)}}}else{const e=this.focusStack.peek();if(!e)return void console.error("No focused element available");const t=e.closest("td");if(!t)return void console.error("No cell is focused");const n=t.parentElement,o=t.closest("table");if(!o)return void console.error("Table does not exist");if(n){const e=Array.from(o.children[0].children).indexOf(n)+1;Ne.addRow(o,e),G.emitCloseElementEvent(Le.TableToolbar)}}}insertColumnLeft(){this.memento.saveState();const e=this.focusStack.peek();if(!e)return void console.error("No focused element available");const t=e.closest("td");if(!t)return void console.error("No cell is focused");const n=t.closest("table");if(!n)return void console.error("Table does not exist");const o=Array.from(t.parentElement.children).indexOf(t);Ne.addColumn(n,o),G.emitCloseElementEvent(Le.TableToolbar)}insertColumnRight(e){if(this.memento.saveState(),e){const t=e.querySelector("table");t&&Ne.addColumn(t)}else{const e=this.focusStack.peek();if(!e)return void console.error("No focused element available");const t=e.closest("td");if(!t)return void console.error("No cell is focused");const n=t.closest("table");if(!n)return void console.error("Table does not exist");const o=Array.from(t.parentElement.children).indexOf(t);Ne.addColumn(n,o+1),G.emitCloseElementEvent(Le.TableToolbar)}}showInsertLineElement(e){e.querySelector(".add-table-row").style.visibility="visible"}showInsertColumnElement(e){e.querySelector(".add-table-column").style.visibility="visible"}hideInsertRowElement(e){e.querySelector(".add-table-row").style.visibility="hidden"}hideInsertColumnElement(e){e.querySelector(".add-table-column").style.visibility="hidden"}changeTableBorderColor(e,t){const n=this.focusStack.peek()?.closest(g.TABLE);n&&Ne.changeCellBorderColor(n,e,t)}}class We{static query="#johannesEditor .content-wrapper";static instance;undoStack=[];redoStack=[];get content(){return document.querySelector(We.query)}constructor(){if(We.instance)throw new Error("Use Memento.getInstance() to get instance.");this.attachEvents(),this.saveState()}saveState(){if(this.content){const e=this.content.cloneNode(!0);setTimeout((()=>{const t=P.saveCaretPosition3d(this.content);e.querySelectorAll(`.${l.EditorOnly}`).forEach((e=>e.remove())),this.undoStack.push({html:e.innerHTML,caretPosition:t}),this.redoStack=[]}),10)}}undo(){if(this.undoStack.length>1){this.redoStack.push({html:this.content.innerHTML,caretPosition:P.saveCaretPosition3d(this.content)});const e=this.undoStack.pop();e&&(this.content.innerHTML=e.html,P.restoreCaretPosition3d(this.content,e.caretPosition))}}redo(){if(this.redoStack.length>0){this.undoStack.push({html:this.content.innerHTML,caretPosition:P.saveCaretPosition3d(this.content)});const e=this.redoStack.pop();e&&(this.content.innerHTML=e.html,P.restoreCaretPosition3d(this.content,e.caretPosition))}}attachEvents(){document.addEventListener("keydown",(e=>{e.ctrlKey&&"z"===e.key?(this.undo(),e.preventDefault()):e.ctrlKey&&"y"===e.key&&(this.redo(),e.preventDefault())})),document.addEventListener(a.Keyup,(e=>{e.key==A.Space&&this.saveState()}))}static getInstance(){return We.instance||(We.instance=new We),We.instance}}!function(e){e.First="First",e.Last="Last"}(Me||(Me={}));class $e{static instance;quickMenu;constructor(e){document.addEventListener("keydown",this.handleArrowKeys.bind(this)),this.quickMenu=e}listen(){console.log("EditableNavigation is now listening for key events.")}static getInstance(){if(!$e.instance){const e=D.Instance.resolve("IQuickMenu");$e.instance=new $e(e)}return $e.instance}handleArrowKeys(e){if(!this.quickMenu.isVisible&&e.key.startsWith("Arrow")&&!e.altKey&&!e.ctrlKey&&!e.altKey&&!e.shiftKey&&!e.metaKey){const t=document.activeElement;if(t&&t.isContentEditable&&this.shouldSwitchEditable(t,e.key)){const n=this.findNextEditable(t,e.key);n&&(e.preventDefault(),e.stopImmediatePropagation(),e.key!=ye.ArrowUp&&e.key!=ye.ArrowDown||this.placeCaretInSimilarPosition(t,n),e.key==ye.ArrowLeft&&P.placeCursorAtEndOfEditableElement(n),e.key==ye.ArrowRight&&P.placeCursorAtStartOfEditableElement(n),n.focus())}}}shouldSwitchEditable(e,t){const n=window.getSelection();if(n&&n.rangeCount>0){let e=n.getRangeAt(0);if(e.endOffset!=e.startOffset)return!1}if(n&&n.rangeCount>0){const{atStart:n,atEnd:o}=P.getSelectionTextInfo(e),i=this.isAtLineBoundary(e,Me.First),r=this.isAtLineBoundary(e,Me.Last);return!!(t===ye.ArrowLeft&&n||t===ye.ArrowRight&&o||t===ye.ArrowUp&&(n||i)||t===ye.ArrowDown&&(o||r))}return!1}isAtLineBoundary(e,t){if(""===e.textContent?.trim())return!0;const n=window.getSelection();if(!n||0===n.rangeCount)return!1;const o=n.getRangeAt(0).getClientRects()[0];if(!o)return!0;const i=e.getBoundingClientRect();return t===Me.First?Math.abs(o.top-i.top)<11:t===Me.Last&&Math.abs(o.bottom-i.bottom)<11}findNextEditable(e,t){const n=Array.from(document.querySelectorAll('[contenteditable="true"]')),o=n.indexOf(e);if(e.closest("td")){const n=e.closest("table"),o=e.closest("td");if(n&&o){const e=Ne.getNeighborCell(n,o,t);if(e)return e}}let i=-1;return i=t===ye.ArrowLeft||t===ye.ArrowRight?t===ye.ArrowLeft?o-1:o+1:this.findVerticalEditableIndex(e,n,t),i<0||i>=n.length?null:n[i]||null}findVerticalEditableIndex(e,t,n){let o=t.indexOf(e);return n===ye.ArrowUp?o--:n===ye.ArrowDown&&o++,o>=0&&o<t.length?o:-1}placeCaretInSimilarPosition(e,t){const n=window.getSelection();if(n&&n.rangeCount>0){const e=n.getRangeAt(0).getBoundingClientRect();n.removeAllRanges();const o=document.createRange(),i=document.createTreeWalker(t,NodeFilter.SHOW_TEXT);let r=i.nextNode(),l=r,s=0,a=1/0;if(l){do{if(r&&r.nodeValue){o.setStart(r,0),o.setEnd(r,r.nodeValue.length);for(let t=0;t<r.nodeValue.length;t++){o.setStart(r,t),o.collapse(!0);const n=o.getBoundingClientRect(),i=Math.abs(n.left-e.left);i<a&&(a=i,l=r,s=t)}}}while(r=i.nextNode());o.setStart(l,s),o.collapse(!0),n.addRange(o)}else o.selectNodeContents(t),o.collapse(!0),n.addRange(o)}}}document.addEventListener("DOMContentLoaded",(function(){D.Instance.register("IMemento",(()=>We.getInstance())),D.Instance.register("IShortcutListeners",(()=>ze.getInstance())),D.Instance.register("ITableListeners",(()=>Ye.getInstance())),D.Instance.register("IFocusStack",(()=>Ue.getInstance())),D.Instance.register("IElementFactoryService",(()=>O.getInstance())),D.Instance.register("ITextOperationsService",(()=>Ke.getInstance())),D.Instance.register("ITableOperationsService",(()=>Ze.getInstance())),D.Instance.register("IBlockOperationsService",(()=>Ge.getInstance())),D.Instance.register("IQuickMenu",(()=>Ee.getInstance())),D.Instance.register("ITableContextFloatingToolbar",(()=>Oe.getInstance())),D.Instance.register("IEditableNavigation",(()=>$e.getInstance())),_e.build().start(),je.getInstance().listen(),$e.getInstance().listen(),pe.getInstance().listen()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,